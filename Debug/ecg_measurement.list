
ecg_measurement.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009570  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  08009710  08009710  0000a710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c04  08009c04  0000b074  2**0
                  CONTENTS
  4 .ARM          00000008  08009c04  08009c04  0000ac04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c0c  08009c0c  0000b074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c0c  08009c0c  0000ac0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c10  08009c10  0000ac10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08009c14  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025e4  20000074  08009c88  0000b074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002658  08009c88  0000b658  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b074  2**0
                  CONTENTS, READONLY
 12 .debug_info   000151db  00000000  00000000  0000b0a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003039  00000000  00000000  0002027f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013f8  00000000  00000000  000232b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f97  00000000  00000000  000246b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019f95  00000000  00000000  00025647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a8ca  00000000  00000000  0003f5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009df93  00000000  00000000  00059ea6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f7e39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005974  00000000  00000000  000f7e7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000fd7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000074 	.word	0x20000074
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080096f8 	.word	0x080096f8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000078 	.word	0x20000078
 80001dc:	080096f8 	.word	0x080096f8

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <SELECT>:
 * SPI functions
 **************************************/

/* slave select */
static void SELECT(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_RESET);
 8000584:	2200      	movs	r2, #0
 8000586:	2140      	movs	r1, #64	@ 0x40
 8000588:	4803      	ldr	r0, [pc, #12]	@ (8000598 <SELECT+0x18>)
 800058a:	f002 fb43 	bl	8002c14 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800058e:	2001      	movs	r0, #1
 8000590:	f001 fb88 	bl	8001ca4 <HAL_Delay>
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}
 8000598:	40020400 	.word	0x40020400

0800059c <DESELECT>:

/* slave deselect */
static void DESELECT(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_PORT, SD_CS_PIN, GPIO_PIN_SET);
 80005a0:	2201      	movs	r2, #1
 80005a2:	2140      	movs	r1, #64	@ 0x40
 80005a4:	4803      	ldr	r0, [pc, #12]	@ (80005b4 <DESELECT+0x18>)
 80005a6:	f002 fb35 	bl	8002c14 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 80005aa:	2001      	movs	r0, #1
 80005ac:	f001 fb7a 	bl	8001ca4 <HAL_Delay>
}
 80005b0:	bf00      	nop
 80005b2:	bd80      	pop	{r7, pc}
 80005b4:	40020400 	.word	0x40020400

080005b8 <SPI_TxByte>:

/* SPI transmit a byte */
static void SPI_TxByte(uint8_t data)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0
 80005be:	4603      	mov	r3, r0
 80005c0:	71fb      	strb	r3, [r7, #7]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005c2:	bf00      	nop
 80005c4:	4b08      	ldr	r3, [pc, #32]	@ (80005e8 <SPI_TxByte+0x30>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	689b      	ldr	r3, [r3, #8]
 80005ca:	f003 0302 	and.w	r3, r3, #2
 80005ce:	2b02      	cmp	r3, #2
 80005d0:	d1f8      	bne.n	80005c4 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(HSPI_SDCARD, &data, 1, SPI_TIMEOUT);
 80005d2:	1df9      	adds	r1, r7, #7
 80005d4:	2364      	movs	r3, #100	@ 0x64
 80005d6:	2201      	movs	r2, #1
 80005d8:	4803      	ldr	r0, [pc, #12]	@ (80005e8 <SPI_TxByte+0x30>)
 80005da:	f003 f816 	bl	800360a <HAL_SPI_Transmit>
}
 80005de:	bf00      	nop
 80005e0:	3708      	adds	r7, #8
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	200000e0 	.word	0x200000e0

080005ec <SPI_TxBuffer>:

/* SPI transmit buffer */
static void SPI_TxBuffer(uint8_t *buffer, uint16_t len)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b082      	sub	sp, #8
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	6078      	str	r0, [r7, #4]
 80005f4:	460b      	mov	r3, r1
 80005f6:	807b      	strh	r3, [r7, #2]
  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 80005f8:	bf00      	nop
 80005fa:	4b08      	ldr	r3, [pc, #32]	@ (800061c <SPI_TxBuffer+0x30>)
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	689b      	ldr	r3, [r3, #8]
 8000600:	f003 0302 	and.w	r3, r3, #2
 8000604:	2b02      	cmp	r3, #2
 8000606:	d1f8      	bne.n	80005fa <SPI_TxBuffer+0xe>
  HAL_SPI_Transmit(HSPI_SDCARD, buffer, len, SPI_TIMEOUT);
 8000608:	887a      	ldrh	r2, [r7, #2]
 800060a:	2364      	movs	r3, #100	@ 0x64
 800060c:	6879      	ldr	r1, [r7, #4]
 800060e:	4803      	ldr	r0, [pc, #12]	@ (800061c <SPI_TxBuffer+0x30>)
 8000610:	f002 fffb 	bl	800360a <HAL_SPI_Transmit>
}
 8000614:	bf00      	nop
 8000616:	3708      	adds	r7, #8
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	200000e0 	.word	0x200000e0

08000620 <SPI_RxByte>:

/* SPI receive a byte */
static uint8_t SPI_RxByte(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 8000626:	23ff      	movs	r3, #255	@ 0xff
 8000628:	71fb      	strb	r3, [r7, #7]

  while(!__HAL_SPI_GET_FLAG(HSPI_SDCARD, SPI_FLAG_TXE));
 800062a:	bf00      	nop
 800062c:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <SPI_RxByte+0x34>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	f003 0302 	and.w	r3, r3, #2
 8000636:	2b02      	cmp	r3, #2
 8000638:	d1f8      	bne.n	800062c <SPI_RxByte+0xc>
  HAL_SPI_TransmitReceive(HSPI_SDCARD, &dummy, &data, 1, SPI_TIMEOUT);
 800063a:	1dba      	adds	r2, r7, #6
 800063c:	1df9      	adds	r1, r7, #7
 800063e:	2364      	movs	r3, #100	@ 0x64
 8000640:	9300      	str	r3, [sp, #0]
 8000642:	2301      	movs	r3, #1
 8000644:	4803      	ldr	r0, [pc, #12]	@ (8000654 <SPI_RxByte+0x34>)
 8000646:	f003 f923 	bl	8003890 <HAL_SPI_TransmitReceive>

  return data;
 800064a:	79bb      	ldrb	r3, [r7, #6]
}
 800064c:	4618      	mov	r0, r3
 800064e:	3708      	adds	r7, #8
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	200000e0 	.word	0x200000e0

08000658 <SPI_RxBytePtr>:

/* SPI receive a byte via pointer */
static void SPI_RxBytePtr(uint8_t *buff)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b082      	sub	sp, #8
 800065c:	af00      	add	r7, sp, #0
 800065e:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 8000660:	f7ff ffde 	bl	8000620 <SPI_RxByte>
 8000664:	4603      	mov	r3, r0
 8000666:	461a      	mov	r2, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	701a      	strb	r2, [r3, #0]
}
 800066c:	bf00      	nop
 800066e:	3708      	adds	r7, #8
 8000670:	46bd      	mov	sp, r7
 8000672:	bd80      	pop	{r7, pc}

08000674 <SD_ReadyWait>:
 * SD functions
 **************************************/

/* wait SD ready */
static uint8_t SD_ReadyWait(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
  uint8_t res;

  /* timeout 500ms */
  Timer2 = 500;
 800067a:	4b0a      	ldr	r3, [pc, #40]	@ (80006a4 <SD_ReadyWait+0x30>)
 800067c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000680:	801a      	strh	r2, [r3, #0]

  /* if SD goes ready, receives 0xFF */
  do {
    res = SPI_RxByte();
 8000682:	f7ff ffcd 	bl	8000620 <SPI_RxByte>
 8000686:	4603      	mov	r3, r0
 8000688:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	2bff      	cmp	r3, #255	@ 0xff
 800068e:	d003      	beq.n	8000698 <SD_ReadyWait+0x24>
 8000690:	4b04      	ldr	r3, [pc, #16]	@ (80006a4 <SD_ReadyWait+0x30>)
 8000692:	881b      	ldrh	r3, [r3, #0]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d1f4      	bne.n	8000682 <SD_ReadyWait+0xe>

  return res;
 8000698:	79fb      	ldrb	r3, [r7, #7]
}
 800069a:	4618      	mov	r0, r3
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	20000092 	.word	0x20000092

080006a8 <SD_PowerOn>:

/* power on */
static void SD_PowerOn(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af00      	add	r7, sp, #0
  uint8_t args[6];
  uint32_t cnt = 0x1FFF;
 80006ae:	f641 73ff 	movw	r3, #8191	@ 0x1fff
 80006b2:	60fb      	str	r3, [r7, #12]

  /* transmit bytes to wake up */
  DESELECT();
 80006b4:	f7ff ff72 	bl	800059c <DESELECT>
  for(int i = 0; i < 10; i++)
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	e005      	b.n	80006ca <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80006be:	20ff      	movs	r0, #255	@ 0xff
 80006c0:	f7ff ff7a 	bl	80005b8 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80006c4:	68bb      	ldr	r3, [r7, #8]
 80006c6:	3301      	adds	r3, #1
 80006c8:	60bb      	str	r3, [r7, #8]
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	2b09      	cmp	r3, #9
 80006ce:	ddf6      	ble.n	80006be <SD_PowerOn+0x16>
  }

  /* slave select */
  SELECT();
 80006d0:	f7ff ff56 	bl	8000580 <SELECT>

  /* make idle state */
  args[0] = CMD0;   /* CMD0:GO_IDLE_STATE */
 80006d4:	2340      	movs	r3, #64	@ 0x40
 80006d6:	703b      	strb	r3, [r7, #0]
  args[1] = 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	707b      	strb	r3, [r7, #1]
  args[2] = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	70bb      	strb	r3, [r7, #2]
  args[3] = 0;
 80006e0:	2300      	movs	r3, #0
 80006e2:	70fb      	strb	r3, [r7, #3]
  args[4] = 0;
 80006e4:	2300      	movs	r3, #0
 80006e6:	713b      	strb	r3, [r7, #4]
  args[5] = 0x95;   /* CRC */
 80006e8:	2395      	movs	r3, #149	@ 0x95
 80006ea:	717b      	strb	r3, [r7, #5]

  SPI_TxBuffer(args, sizeof(args));
 80006ec:	463b      	mov	r3, r7
 80006ee:	2106      	movs	r1, #6
 80006f0:	4618      	mov	r0, r3
 80006f2:	f7ff ff7b 	bl	80005ec <SPI_TxBuffer>

  /* wait response */
  while ((SPI_RxByte() != 0x01) && cnt)
 80006f6:	e002      	b.n	80006fe <SD_PowerOn+0x56>
  {
    cnt--;
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	3b01      	subs	r3, #1
 80006fc:	60fb      	str	r3, [r7, #12]
  while ((SPI_RxByte() != 0x01) && cnt)
 80006fe:	f7ff ff8f 	bl	8000620 <SPI_RxByte>
 8000702:	4603      	mov	r3, r0
 8000704:	2b01      	cmp	r3, #1
 8000706:	d002      	beq.n	800070e <SD_PowerOn+0x66>
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d1f4      	bne.n	80006f8 <SD_PowerOn+0x50>
  }

  DESELECT();
 800070e:	f7ff ff45 	bl	800059c <DESELECT>
  SPI_TxByte(0XFF);
 8000712:	20ff      	movs	r0, #255	@ 0xff
 8000714:	f7ff ff50 	bl	80005b8 <SPI_TxByte>

  PowerFlag = 1;
 8000718:	4b03      	ldr	r3, [pc, #12]	@ (8000728 <SD_PowerOn+0x80>)
 800071a:	2201      	movs	r2, #1
 800071c:	701a      	strb	r2, [r3, #0]
}
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000095 	.word	0x20000095

0800072c <SD_PowerOff>:

/* power off */
static void SD_PowerOff(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8000730:	4b03      	ldr	r3, [pc, #12]	@ (8000740 <SD_PowerOff+0x14>)
 8000732:	2200      	movs	r2, #0
 8000734:	701a      	strb	r2, [r3, #0]
}
 8000736:	bf00      	nop
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	20000095 	.word	0x20000095

08000744 <SD_CheckPower>:

/* check power flag */
static uint8_t SD_CheckPower(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  return PowerFlag;
 8000748:	4b03      	ldr	r3, [pc, #12]	@ (8000758 <SD_CheckPower+0x14>)
 800074a:	781b      	ldrb	r3, [r3, #0]
}
 800074c:	4618      	mov	r0, r3
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr
 8000756:	bf00      	nop
 8000758:	20000095 	.word	0x20000095

0800075c <SD_RxDataBlock>:

/* receive data block */
static bool SD_RxDataBlock(BYTE *buff, UINT len)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b084      	sub	sp, #16
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	6039      	str	r1, [r7, #0]
  uint8_t token;

  /* timeout 200ms */
  Timer1 = 200;
 8000766:	4b13      	ldr	r3, [pc, #76]	@ (80007b4 <SD_RxDataBlock+0x58>)
 8000768:	22c8      	movs	r2, #200	@ 0xc8
 800076a:	801a      	strh	r2, [r3, #0]

  /* loop until receive a response or timeout */
  do {
    token = SPI_RxByte();
 800076c:	f7ff ff58 	bl	8000620 <SPI_RxByte>
 8000770:	4603      	mov	r3, r0
 8000772:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8000774:	7bfb      	ldrb	r3, [r7, #15]
 8000776:	2bff      	cmp	r3, #255	@ 0xff
 8000778:	d103      	bne.n	8000782 <SD_RxDataBlock+0x26>
 800077a:	4b0e      	ldr	r3, [pc, #56]	@ (80007b4 <SD_RxDataBlock+0x58>)
 800077c:	881b      	ldrh	r3, [r3, #0]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d1f4      	bne.n	800076c <SD_RxDataBlock+0x10>

  /* invalid response */
  if(token != 0xFE) return FALSE;
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	2bfe      	cmp	r3, #254	@ 0xfe
 8000786:	d001      	beq.n	800078c <SD_RxDataBlock+0x30>
 8000788:	2300      	movs	r3, #0
 800078a:	e00f      	b.n	80007ac <SD_RxDataBlock+0x50>

  /* receive data */
  do {
    SPI_RxBytePtr(buff++);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	1c5a      	adds	r2, r3, #1
 8000790:	607a      	str	r2, [r7, #4]
 8000792:	4618      	mov	r0, r3
 8000794:	f7ff ff60 	bl	8000658 <SPI_RxBytePtr>
  } while(len--);
 8000798:	683b      	ldr	r3, [r7, #0]
 800079a:	1e5a      	subs	r2, r3, #1
 800079c:	603a      	str	r2, [r7, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d1f4      	bne.n	800078c <SD_RxDataBlock+0x30>

  /* discard CRC */
  SPI_RxByte();
 80007a2:	f7ff ff3d 	bl	8000620 <SPI_RxByte>
  SPI_RxByte();
 80007a6:	f7ff ff3b 	bl	8000620 <SPI_RxByte>

  return TRUE;
 80007aa:	2301      	movs	r3, #1
}
 80007ac:	4618      	mov	r0, r3
 80007ae:	3710      	adds	r7, #16
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	20000090 	.word	0x20000090

080007b8 <SD_TxDataBlock>:

/* transmit data block */
#if _USE_WRITE == 1
static bool SD_TxDataBlock(const uint8_t *buff, BYTE token)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
 80007c0:	460b      	mov	r3, r1
 80007c2:	70fb      	strb	r3, [r7, #3]
  uint8_t resp;
  uint8_t i = 0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	73bb      	strb	r3, [r7, #14]

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return FALSE;
 80007c8:	f7ff ff54 	bl	8000674 <SD_ReadyWait>
 80007cc:	4603      	mov	r3, r0
 80007ce:	2bff      	cmp	r3, #255	@ 0xff
 80007d0:	d001      	beq.n	80007d6 <SD_TxDataBlock+0x1e>
 80007d2:	2300      	movs	r3, #0
 80007d4:	e02f      	b.n	8000836 <SD_TxDataBlock+0x7e>

  /* transmit token */
  SPI_TxByte(token);
 80007d6:	78fb      	ldrb	r3, [r7, #3]
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff feed 	bl	80005b8 <SPI_TxByte>

  /* if it's not STOP token, transmit data */
  if (token != 0xFD)
 80007de:	78fb      	ldrb	r3, [r7, #3]
 80007e0:	2bfd      	cmp	r3, #253	@ 0xfd
 80007e2:	d020      	beq.n	8000826 <SD_TxDataBlock+0x6e>
  {
    SPI_TxBuffer((uint8_t*)buff, 512);
 80007e4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff feff 	bl	80005ec <SPI_TxBuffer>

    /* discard CRC */
    SPI_RxByte();
 80007ee:	f7ff ff17 	bl	8000620 <SPI_RxByte>
    SPI_RxByte();
 80007f2:	f7ff ff15 	bl	8000620 <SPI_RxByte>

    /* receive response */
    while (i <= 64)
 80007f6:	e00b      	b.n	8000810 <SD_TxDataBlock+0x58>
    {
      resp = SPI_RxByte();
 80007f8:	f7ff ff12 	bl	8000620 <SPI_RxByte>
 80007fc:	4603      	mov	r3, r0
 80007fe:	73fb      	strb	r3, [r7, #15]

      /* transmit 0x05 accepted */
      if ((resp & 0x1F) == 0x05) break;
 8000800:	7bfb      	ldrb	r3, [r7, #15]
 8000802:	f003 031f 	and.w	r3, r3, #31
 8000806:	2b05      	cmp	r3, #5
 8000808:	d006      	beq.n	8000818 <SD_TxDataBlock+0x60>
      i++;
 800080a:	7bbb      	ldrb	r3, [r7, #14]
 800080c:	3301      	adds	r3, #1
 800080e:	73bb      	strb	r3, [r7, #14]
    while (i <= 64)
 8000810:	7bbb      	ldrb	r3, [r7, #14]
 8000812:	2b40      	cmp	r3, #64	@ 0x40
 8000814:	d9f0      	bls.n	80007f8 <SD_TxDataBlock+0x40>
 8000816:	e000      	b.n	800081a <SD_TxDataBlock+0x62>
      if ((resp & 0x1F) == 0x05) break;
 8000818:	bf00      	nop
    }

    /* recv buffer clear */
    while (SPI_RxByte() == 0);
 800081a:	bf00      	nop
 800081c:	f7ff ff00 	bl	8000620 <SPI_RxByte>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d0fa      	beq.n	800081c <SD_TxDataBlock+0x64>
  }

  /* transmit 0x05 accepted */
  if ((resp & 0x1F) == 0x05) return TRUE;
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	f003 031f 	and.w	r3, r3, #31
 800082c:	2b05      	cmp	r3, #5
 800082e:	d101      	bne.n	8000834 <SD_TxDataBlock+0x7c>
 8000830:	2301      	movs	r3, #1
 8000832:	e000      	b.n	8000836 <SD_TxDataBlock+0x7e>

  return FALSE;
 8000834:	2300      	movs	r3, #0
}
 8000836:	4618      	mov	r0, r3
 8000838:	3710      	adds	r7, #16
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}

0800083e <SD_SendCmd>:
#endif /* _USE_WRITE */

/* transmit command */
static BYTE SD_SendCmd(BYTE cmd, uint32_t arg)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b084      	sub	sp, #16
 8000842:	af00      	add	r7, sp, #0
 8000844:	4603      	mov	r3, r0
 8000846:	6039      	str	r1, [r7, #0]
 8000848:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;

  /* wait SD ready */
  if (SD_ReadyWait() != 0xFF) return 0xFF;
 800084a:	f7ff ff13 	bl	8000674 <SD_ReadyWait>
 800084e:	4603      	mov	r3, r0
 8000850:	2bff      	cmp	r3, #255	@ 0xff
 8000852:	d001      	beq.n	8000858 <SD_SendCmd+0x1a>
 8000854:	23ff      	movs	r3, #255	@ 0xff
 8000856:	e042      	b.n	80008de <SD_SendCmd+0xa0>

  /* transmit command */
  SPI_TxByte(cmd);          /* Command */
 8000858:	79fb      	ldrb	r3, [r7, #7]
 800085a:	4618      	mov	r0, r3
 800085c:	f7ff feac 	bl	80005b8 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 24));   /* Argument[31..24] */
 8000860:	683b      	ldr	r3, [r7, #0]
 8000862:	0e1b      	lsrs	r3, r3, #24
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4618      	mov	r0, r3
 8000868:	f7ff fea6 	bl	80005b8 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 16));   /* Argument[23..16] */
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	0c1b      	lsrs	r3, r3, #16
 8000870:	b2db      	uxtb	r3, r3
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fea0 	bl	80005b8 <SPI_TxByte>
  SPI_TxByte((uint8_t)(arg >> 8));  /* Argument[15..8] */
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	0a1b      	lsrs	r3, r3, #8
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff fe9a 	bl	80005b8 <SPI_TxByte>
  SPI_TxByte((uint8_t)arg);       /* Argument[7..0] */
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fe95 	bl	80005b8 <SPI_TxByte>

  /* prepare CRC */
  if(cmd == CMD0) crc = 0x95; /* CRC for CMD0(0) */
 800088e:	79fb      	ldrb	r3, [r7, #7]
 8000890:	2b40      	cmp	r3, #64	@ 0x40
 8000892:	d102      	bne.n	800089a <SD_SendCmd+0x5c>
 8000894:	2395      	movs	r3, #149	@ 0x95
 8000896:	73fb      	strb	r3, [r7, #15]
 8000898:	e007      	b.n	80008aa <SD_SendCmd+0x6c>
  else if(cmd == CMD8) crc = 0x87;  /* CRC for CMD8(0x1AA) */
 800089a:	79fb      	ldrb	r3, [r7, #7]
 800089c:	2b48      	cmp	r3, #72	@ 0x48
 800089e:	d102      	bne.n	80008a6 <SD_SendCmd+0x68>
 80008a0:	2387      	movs	r3, #135	@ 0x87
 80008a2:	73fb      	strb	r3, [r7, #15]
 80008a4:	e001      	b.n	80008aa <SD_SendCmd+0x6c>
  else crc = 1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	73fb      	strb	r3, [r7, #15]

  /* transmit CRC */
  SPI_TxByte(crc);
 80008aa:	7bfb      	ldrb	r3, [r7, #15]
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fe83 	bl	80005b8 <SPI_TxByte>

  /* Skip a stuff byte when STOP_TRANSMISSION */
  if (cmd == CMD12) SPI_RxByte();
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b4c      	cmp	r3, #76	@ 0x4c
 80008b6:	d101      	bne.n	80008bc <SD_SendCmd+0x7e>
 80008b8:	f7ff feb2 	bl	8000620 <SPI_RxByte>

  /* receive response */
  uint8_t n = 10;
 80008bc:	230a      	movs	r3, #10
 80008be:	73bb      	strb	r3, [r7, #14]
  do {
    res = SPI_RxByte();
 80008c0:	f7ff feae 	bl	8000620 <SPI_RxByte>
 80008c4:	4603      	mov	r3, r0
 80008c6:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 80008c8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	da05      	bge.n	80008dc <SD_SendCmd+0x9e>
 80008d0:	7bbb      	ldrb	r3, [r7, #14]
 80008d2:	3b01      	subs	r3, #1
 80008d4:	73bb      	strb	r3, [r7, #14]
 80008d6:	7bbb      	ldrb	r3, [r7, #14]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d1f1      	bne.n	80008c0 <SD_SendCmd+0x82>

  return res;
 80008dc:	7b7b      	ldrb	r3, [r7, #13]
}
 80008de:	4618      	mov	r0, r3
 80008e0:	3710      	adds	r7, #16
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd80      	pop	{r7, pc}
	...

080008e8 <SD_disk_initialize>:
 * user_diskio.c functions
 **************************************/

/* initialize SD */
DSTATUS SD_disk_initialize(BYTE drv)
{
 80008e8:	b590      	push	{r4, r7, lr}
 80008ea:	b085      	sub	sp, #20
 80008ec:	af00      	add	r7, sp, #0
 80008ee:	4603      	mov	r3, r0
 80008f0:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];

  /* single drive, drv should be 0 */
  if(drv) return STA_NOINIT;
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <SD_disk_initialize+0x14>
 80008f8:	2301      	movs	r3, #1
 80008fa:	e0d1      	b.n	8000aa0 <SD_disk_initialize+0x1b8>

  /* no disk */
  if(Stat & STA_NODISK) return Stat;
 80008fc:	4b6a      	ldr	r3, [pc, #424]	@ (8000aa8 <SD_disk_initialize+0x1c0>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	b2db      	uxtb	r3, r3
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	2b00      	cmp	r3, #0
 8000908:	d003      	beq.n	8000912 <SD_disk_initialize+0x2a>
 800090a:	4b67      	ldr	r3, [pc, #412]	@ (8000aa8 <SD_disk_initialize+0x1c0>)
 800090c:	781b      	ldrb	r3, [r3, #0]
 800090e:	b2db      	uxtb	r3, r3
 8000910:	e0c6      	b.n	8000aa0 <SD_disk_initialize+0x1b8>

  /* power on */
  SD_PowerOn();
 8000912:	f7ff fec9 	bl	80006a8 <SD_PowerOn>

  /* slave select */
  SELECT();
 8000916:	f7ff fe33 	bl	8000580 <SELECT>

  /* check disk type */
  type = 0;
 800091a:	2300      	movs	r3, #0
 800091c:	73bb      	strb	r3, [r7, #14]

  /* send GO_IDLE_STATE command */
  if (SD_SendCmd(CMD0, 0) == 1)
 800091e:	2100      	movs	r1, #0
 8000920:	2040      	movs	r0, #64	@ 0x40
 8000922:	f7ff ff8c 	bl	800083e <SD_SendCmd>
 8000926:	4603      	mov	r3, r0
 8000928:	2b01      	cmp	r3, #1
 800092a:	f040 80a1 	bne.w	8000a70 <SD_disk_initialize+0x188>
  {
    /* timeout 1 sec */
    Timer1 = 1000;
 800092e:	4b5f      	ldr	r3, [pc, #380]	@ (8000aac <SD_disk_initialize+0x1c4>)
 8000930:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000934:	801a      	strh	r2, [r3, #0]

    /* SDC V2+ accept CMD8 command, http://elm-chan.org/docs/mmc/mmc_e.html */
    if (SD_SendCmd(CMD8, 0x1AA) == 1)
 8000936:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 800093a:	2048      	movs	r0, #72	@ 0x48
 800093c:	f7ff ff7f 	bl	800083e <SD_SendCmd>
 8000940:	4603      	mov	r3, r0
 8000942:	2b01      	cmp	r3, #1
 8000944:	d155      	bne.n	80009f2 <SD_disk_initialize+0x10a>
    {
      /* operation condition register */
      for (n = 0; n < 4; n++)
 8000946:	2300      	movs	r3, #0
 8000948:	73fb      	strb	r3, [r7, #15]
 800094a:	e00c      	b.n	8000966 <SD_disk_initialize+0x7e>
      {
        ocr[n] = SPI_RxByte();
 800094c:	7bfc      	ldrb	r4, [r7, #15]
 800094e:	f7ff fe67 	bl	8000620 <SPI_RxByte>
 8000952:	4603      	mov	r3, r0
 8000954:	461a      	mov	r2, r3
 8000956:	f104 0310 	add.w	r3, r4, #16
 800095a:	443b      	add	r3, r7
 800095c:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 8000960:	7bfb      	ldrb	r3, [r7, #15]
 8000962:	3301      	adds	r3, #1
 8000964:	73fb      	strb	r3, [r7, #15]
 8000966:	7bfb      	ldrb	r3, [r7, #15]
 8000968:	2b03      	cmp	r3, #3
 800096a:	d9ef      	bls.n	800094c <SD_disk_initialize+0x64>
      }

      /* voltage range 2.7-3.6V */
      if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 800096c:	7abb      	ldrb	r3, [r7, #10]
 800096e:	2b01      	cmp	r3, #1
 8000970:	d17e      	bne.n	8000a70 <SD_disk_initialize+0x188>
 8000972:	7afb      	ldrb	r3, [r7, #11]
 8000974:	2baa      	cmp	r3, #170	@ 0xaa
 8000976:	d17b      	bne.n	8000a70 <SD_disk_initialize+0x188>
      {
        /* ACMD41 with HCS bit */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 8000978:	2100      	movs	r1, #0
 800097a:	2077      	movs	r0, #119	@ 0x77
 800097c:	f7ff ff5f 	bl	800083e <SD_SendCmd>
 8000980:	4603      	mov	r3, r0
 8000982:	2b01      	cmp	r3, #1
 8000984:	d807      	bhi.n	8000996 <SD_disk_initialize+0xae>
 8000986:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 800098a:	2069      	movs	r0, #105	@ 0x69
 800098c:	f7ff ff57 	bl	800083e <SD_SendCmd>
 8000990:	4603      	mov	r3, r0
 8000992:	2b00      	cmp	r3, #0
 8000994:	d004      	beq.n	80009a0 <SD_disk_initialize+0xb8>
        } while (Timer1);
 8000996:	4b45      	ldr	r3, [pc, #276]	@ (8000aac <SD_disk_initialize+0x1c4>)
 8000998:	881b      	ldrh	r3, [r3, #0]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d1ec      	bne.n	8000978 <SD_disk_initialize+0x90>
 800099e:	e000      	b.n	80009a2 <SD_disk_initialize+0xba>
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0) break;
 80009a0:	bf00      	nop

        /* READ_OCR */
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0)
 80009a2:	4b42      	ldr	r3, [pc, #264]	@ (8000aac <SD_disk_initialize+0x1c4>)
 80009a4:	881b      	ldrh	r3, [r3, #0]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	d062      	beq.n	8000a70 <SD_disk_initialize+0x188>
 80009aa:	2100      	movs	r1, #0
 80009ac:	207a      	movs	r0, #122	@ 0x7a
 80009ae:	f7ff ff46 	bl	800083e <SD_SendCmd>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d15b      	bne.n	8000a70 <SD_disk_initialize+0x188>
        {
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 80009b8:	2300      	movs	r3, #0
 80009ba:	73fb      	strb	r3, [r7, #15]
 80009bc:	e00c      	b.n	80009d8 <SD_disk_initialize+0xf0>
          {
            ocr[n] = SPI_RxByte();
 80009be:	7bfc      	ldrb	r4, [r7, #15]
 80009c0:	f7ff fe2e 	bl	8000620 <SPI_RxByte>
 80009c4:	4603      	mov	r3, r0
 80009c6:	461a      	mov	r2, r3
 80009c8:	f104 0310 	add.w	r3, r4, #16
 80009cc:	443b      	add	r3, r7
 80009ce:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 80009d2:	7bfb      	ldrb	r3, [r7, #15]
 80009d4:	3301      	adds	r3, #1
 80009d6:	73fb      	strb	r3, [r7, #15]
 80009d8:	7bfb      	ldrb	r3, [r7, #15]
 80009da:	2b03      	cmp	r3, #3
 80009dc:	d9ef      	bls.n	80009be <SD_disk_initialize+0xd6>
          }

          /* SDv2 (HC or SC) */
          type = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;
 80009de:	7a3b      	ldrb	r3, [r7, #8]
 80009e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <SD_disk_initialize+0x104>
 80009e8:	230c      	movs	r3, #12
 80009ea:	e000      	b.n	80009ee <SD_disk_initialize+0x106>
 80009ec:	2304      	movs	r3, #4
 80009ee:	73bb      	strb	r3, [r7, #14]
 80009f0:	e03e      	b.n	8000a70 <SD_disk_initialize+0x188>
      }
    }
    else
    {
      /* SDC V1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? CT_SD1 : CT_MMC;
 80009f2:	2100      	movs	r1, #0
 80009f4:	2077      	movs	r0, #119	@ 0x77
 80009f6:	f7ff ff22 	bl	800083e <SD_SendCmd>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b01      	cmp	r3, #1
 80009fe:	d808      	bhi.n	8000a12 <SD_disk_initialize+0x12a>
 8000a00:	2100      	movs	r1, #0
 8000a02:	2069      	movs	r0, #105	@ 0x69
 8000a04:	f7ff ff1b 	bl	800083e <SD_SendCmd>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d801      	bhi.n	8000a12 <SD_disk_initialize+0x12a>
 8000a0e:	2302      	movs	r3, #2
 8000a10:	e000      	b.n	8000a14 <SD_disk_initialize+0x12c>
 8000a12:	2301      	movs	r3, #1
 8000a14:	73bb      	strb	r3, [r7, #14]

      do
      {
        if (type == CT_SD1)
 8000a16:	7bbb      	ldrb	r3, [r7, #14]
 8000a18:	2b02      	cmp	r3, #2
 8000a1a:	d10e      	bne.n	8000a3a <SD_disk_initialize+0x152>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0) break; /* ACMD41 */
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	2077      	movs	r0, #119	@ 0x77
 8000a20:	f7ff ff0d 	bl	800083e <SD_SendCmd>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d80e      	bhi.n	8000a48 <SD_disk_initialize+0x160>
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	2069      	movs	r0, #105	@ 0x69
 8000a2e:	f7ff ff06 	bl	800083e <SD_SendCmd>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d107      	bne.n	8000a48 <SD_disk_initialize+0x160>
 8000a38:	e00c      	b.n	8000a54 <SD_disk_initialize+0x16c>
        }
        else
        {
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	2041      	movs	r0, #65	@ 0x41
 8000a3e:	f7ff fefe 	bl	800083e <SD_SendCmd>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d004      	beq.n	8000a52 <SD_disk_initialize+0x16a>
        }

      } while (Timer1);
 8000a48:	4b18      	ldr	r3, [pc, #96]	@ (8000aac <SD_disk_initialize+0x1c4>)
 8000a4a:	881b      	ldrh	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d1e2      	bne.n	8000a16 <SD_disk_initialize+0x12e>
 8000a50:	e000      	b.n	8000a54 <SD_disk_initialize+0x16c>
          if (SD_SendCmd(CMD1, 0) == 0) break; /* CMD1 */
 8000a52:	bf00      	nop

      /* SET_BLOCKLEN */
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) type = 0;
 8000a54:	4b15      	ldr	r3, [pc, #84]	@ (8000aac <SD_disk_initialize+0x1c4>)
 8000a56:	881b      	ldrh	r3, [r3, #0]
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d007      	beq.n	8000a6c <SD_disk_initialize+0x184>
 8000a5c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000a60:	2050      	movs	r0, #80	@ 0x50
 8000a62:	f7ff feec 	bl	800083e <SD_SendCmd>
 8000a66:	4603      	mov	r3, r0
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d001      	beq.n	8000a70 <SD_disk_initialize+0x188>
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	73bb      	strb	r3, [r7, #14]
    }
  }

  CardType = type;
 8000a70:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab0 <SD_disk_initialize+0x1c8>)
 8000a72:	7bbb      	ldrb	r3, [r7, #14]
 8000a74:	7013      	strb	r3, [r2, #0]

  /* Idle */
  DESELECT();
 8000a76:	f7ff fd91 	bl	800059c <DESELECT>
  SPI_RxByte();
 8000a7a:	f7ff fdd1 	bl	8000620 <SPI_RxByte>

  /* Clear STA_NOINIT */
  if (type)
 8000a7e:	7bbb      	ldrb	r3, [r7, #14]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d008      	beq.n	8000a96 <SD_disk_initialize+0x1ae>
  {
    Stat &= ~STA_NOINIT;
 8000a84:	4b08      	ldr	r3, [pc, #32]	@ (8000aa8 <SD_disk_initialize+0x1c0>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	b2db      	uxtb	r3, r3
 8000a8a:	f023 0301 	bic.w	r3, r3, #1
 8000a8e:	b2da      	uxtb	r2, r3
 8000a90:	4b05      	ldr	r3, [pc, #20]	@ (8000aa8 <SD_disk_initialize+0x1c0>)
 8000a92:	701a      	strb	r2, [r3, #0]
 8000a94:	e001      	b.n	8000a9a <SD_disk_initialize+0x1b2>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 8000a96:	f7ff fe49 	bl	800072c <SD_PowerOff>
  }

  return Stat;
 8000a9a:	4b03      	ldr	r3, [pc, #12]	@ (8000aa8 <SD_disk_initialize+0x1c0>)
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	b2db      	uxtb	r3, r3
}
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	3714      	adds	r7, #20
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd90      	pop	{r4, r7, pc}
 8000aa8:	20000000 	.word	0x20000000
 8000aac:	20000090 	.word	0x20000090
 8000ab0:	20000094 	.word	0x20000094

08000ab4 <SD_disk_status>:

/* return disk status */
DSTATUS SD_disk_status(BYTE drv)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  if (drv) return STA_NOINIT;
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <SD_disk_status+0x14>
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	e002      	b.n	8000ace <SD_disk_status+0x1a>
  return Stat;
 8000ac8:	4b04      	ldr	r3, [pc, #16]	@ (8000adc <SD_disk_status+0x28>)
 8000aca:	781b      	ldrb	r3, [r3, #0]
 8000acc:	b2db      	uxtb	r3, r3
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	20000000 	.word	0x20000000

08000ae0 <SD_disk_read>:

/* read sector */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b084      	sub	sp, #16
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	60b9      	str	r1, [r7, #8]
 8000ae8:	607a      	str	r2, [r7, #4]
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	4603      	mov	r3, r0
 8000aee:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000af0:	7bfb      	ldrb	r3, [r7, #15]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d102      	bne.n	8000afc <SD_disk_read+0x1c>
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d101      	bne.n	8000b00 <SD_disk_read+0x20>
 8000afc:	2304      	movs	r3, #4
 8000afe:	e051      	b.n	8000ba4 <SD_disk_read+0xc4>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000b00:	4b2a      	ldr	r3, [pc, #168]	@ (8000bac <SD_disk_read+0xcc>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	b2db      	uxtb	r3, r3
 8000b06:	f003 0301 	and.w	r3, r3, #1
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d001      	beq.n	8000b12 <SD_disk_read+0x32>
 8000b0e:	2303      	movs	r3, #3
 8000b10:	e048      	b.n	8000ba4 <SD_disk_read+0xc4>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000b12:	4b27      	ldr	r3, [pc, #156]	@ (8000bb0 <SD_disk_read+0xd0>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	f003 0304 	and.w	r3, r3, #4
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d102      	bne.n	8000b24 <SD_disk_read+0x44>
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	025b      	lsls	r3, r3, #9
 8000b22:	607b      	str	r3, [r7, #4]

  SELECT();
 8000b24:	f7ff fd2c 	bl	8000580 <SELECT>

  if (count == 1)
 8000b28:	683b      	ldr	r3, [r7, #0]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d111      	bne.n	8000b52 <SD_disk_read+0x72>
  {
    /* READ_SINGLE_BLOCK */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512)) count = 0;
 8000b2e:	6879      	ldr	r1, [r7, #4]
 8000b30:	2051      	movs	r0, #81	@ 0x51
 8000b32:	f7ff fe84 	bl	800083e <SD_SendCmd>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d129      	bne.n	8000b90 <SD_disk_read+0xb0>
 8000b3c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b40:	68b8      	ldr	r0, [r7, #8]
 8000b42:	f7ff fe0b 	bl	800075c <SD_RxDataBlock>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d021      	beq.n	8000b90 <SD_disk_read+0xb0>
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	603b      	str	r3, [r7, #0]
 8000b50:	e01e      	b.n	8000b90 <SD_disk_read+0xb0>
  }
  else
  {
    /* READ_MULTIPLE_BLOCK */
    if (SD_SendCmd(CMD18, sector) == 0)
 8000b52:	6879      	ldr	r1, [r7, #4]
 8000b54:	2052      	movs	r0, #82	@ 0x52
 8000b56:	f7ff fe72 	bl	800083e <SD_SendCmd>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d117      	bne.n	8000b90 <SD_disk_read+0xb0>
    {
      do {
        if (!SD_RxDataBlock(buff, 512)) break;
 8000b60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000b64:	68b8      	ldr	r0, [r7, #8]
 8000b66:	f7ff fdf9 	bl	800075c <SD_RxDataBlock>
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	2b00      	cmp	r3, #0
 8000b6e:	d00a      	beq.n	8000b86 <SD_disk_read+0xa6>
        buff += 512;
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000b76:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	603b      	str	r3, [r7, #0]
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d1ed      	bne.n	8000b60 <SD_disk_read+0x80>
 8000b84:	e000      	b.n	8000b88 <SD_disk_read+0xa8>
        if (!SD_RxDataBlock(buff, 512)) break;
 8000b86:	bf00      	nop

      /* STOP_TRANSMISSION */
      SD_SendCmd(CMD12, 0);
 8000b88:	2100      	movs	r1, #0
 8000b8a:	204c      	movs	r0, #76	@ 0x4c
 8000b8c:	f7ff fe57 	bl	800083e <SD_SendCmd>
    }
  }

  /* Idle */
  DESELECT();
 8000b90:	f7ff fd04 	bl	800059c <DESELECT>
  SPI_RxByte();
 8000b94:	f7ff fd44 	bl	8000620 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	2b00      	cmp	r3, #0
 8000b9c:	bf14      	ite	ne
 8000b9e:	2301      	movne	r3, #1
 8000ba0:	2300      	moveq	r3, #0
 8000ba2:	b2db      	uxtb	r3, r3
}
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	3710      	adds	r7, #16
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	bd80      	pop	{r7, pc}
 8000bac:	20000000 	.word	0x20000000
 8000bb0:	20000094 	.word	0x20000094

08000bb4 <SD_disk_write>:

/* write sector */
#if _USE_WRITE == 1
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60b9      	str	r1, [r7, #8]
 8000bbc:	607a      	str	r2, [r7, #4]
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	73fb      	strb	r3, [r7, #15]
  /* pdrv should be 0 */
  if (pdrv || !count) return RES_PARERR;
 8000bc4:	7bfb      	ldrb	r3, [r7, #15]
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d102      	bne.n	8000bd0 <SD_disk_write+0x1c>
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d101      	bne.n	8000bd4 <SD_disk_write+0x20>
 8000bd0:	2304      	movs	r3, #4
 8000bd2:	e06b      	b.n	8000cac <SD_disk_write+0xf8>

  /* no disk */
  if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000bd4:	4b37      	ldr	r3, [pc, #220]	@ (8000cb4 <SD_disk_write+0x100>)
 8000bd6:	781b      	ldrb	r3, [r3, #0]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	f003 0301 	and.w	r3, r3, #1
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <SD_disk_write+0x32>
 8000be2:	2303      	movs	r3, #3
 8000be4:	e062      	b.n	8000cac <SD_disk_write+0xf8>

  /* write protection */
  if (Stat & STA_PROTECT) return RES_WRPRT;
 8000be6:	4b33      	ldr	r3, [pc, #204]	@ (8000cb4 <SD_disk_write+0x100>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	b2db      	uxtb	r3, r3
 8000bec:	f003 0304 	and.w	r3, r3, #4
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d001      	beq.n	8000bf8 <SD_disk_write+0x44>
 8000bf4:	2302      	movs	r3, #2
 8000bf6:	e059      	b.n	8000cac <SD_disk_write+0xf8>

  /* convert to byte address */
  if (!(CardType & CT_SD2)) sector *= 512;
 8000bf8:	4b2f      	ldr	r3, [pc, #188]	@ (8000cb8 <SD_disk_write+0x104>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	f003 0304 	and.w	r3, r3, #4
 8000c00:	2b00      	cmp	r3, #0
 8000c02:	d102      	bne.n	8000c0a <SD_disk_write+0x56>
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	025b      	lsls	r3, r3, #9
 8000c08:	607b      	str	r3, [r7, #4]

  SELECT();
 8000c0a:	f7ff fcb9 	bl	8000580 <SELECT>

  if (count == 1)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	2b01      	cmp	r3, #1
 8000c12:	d110      	bne.n	8000c36 <SD_disk_write+0x82>
  {
    /* WRITE_BLOCK */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8000c14:	6879      	ldr	r1, [r7, #4]
 8000c16:	2058      	movs	r0, #88	@ 0x58
 8000c18:	f7ff fe11 	bl	800083e <SD_SendCmd>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d13a      	bne.n	8000c98 <SD_disk_write+0xe4>
 8000c22:	21fe      	movs	r1, #254	@ 0xfe
 8000c24:	68b8      	ldr	r0, [r7, #8]
 8000c26:	f7ff fdc7 	bl	80007b8 <SD_TxDataBlock>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d033      	beq.n	8000c98 <SD_disk_write+0xe4>
      count = 0;
 8000c30:	2300      	movs	r3, #0
 8000c32:	603b      	str	r3, [r7, #0]
 8000c34:	e030      	b.n	8000c98 <SD_disk_write+0xe4>
  }
  else
  {
    /* WRITE_MULTIPLE_BLOCK */
    if (CardType & CT_SD1)
 8000c36:	4b20      	ldr	r3, [pc, #128]	@ (8000cb8 <SD_disk_write+0x104>)
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	f003 0302 	and.w	r3, r3, #2
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d007      	beq.n	8000c52 <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8000c42:	2100      	movs	r1, #0
 8000c44:	2077      	movs	r0, #119	@ 0x77
 8000c46:	f7ff fdfa 	bl	800083e <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8000c4a:	6839      	ldr	r1, [r7, #0]
 8000c4c:	2057      	movs	r0, #87	@ 0x57
 8000c4e:	f7ff fdf6 	bl	800083e <SD_SendCmd>
    }

    if (SD_SendCmd(CMD25, sector) == 0)
 8000c52:	6879      	ldr	r1, [r7, #4]
 8000c54:	2059      	movs	r0, #89	@ 0x59
 8000c56:	f7ff fdf2 	bl	800083e <SD_SendCmd>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d11b      	bne.n	8000c98 <SD_disk_write+0xe4>
    {
      do {
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c60:	21fc      	movs	r1, #252	@ 0xfc
 8000c62:	68b8      	ldr	r0, [r7, #8]
 8000c64:	f7ff fda8 	bl	80007b8 <SD_TxDataBlock>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d00a      	beq.n	8000c84 <SD_disk_write+0xd0>
        buff += 512;
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8000c74:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	603b      	str	r3, [r7, #0]
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d1ee      	bne.n	8000c60 <SD_disk_write+0xac>
 8000c82:	e000      	b.n	8000c86 <SD_disk_write+0xd2>
        if(!SD_TxDataBlock(buff, 0xFC)) break;
 8000c84:	bf00      	nop

      /* STOP_TRAN token */
      if(!SD_TxDataBlock(0, 0xFD))
 8000c86:	21fd      	movs	r1, #253	@ 0xfd
 8000c88:	2000      	movs	r0, #0
 8000c8a:	f7ff fd95 	bl	80007b8 <SD_TxDataBlock>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d101      	bne.n	8000c98 <SD_disk_write+0xe4>
      {
        count = 1;
 8000c94:	2301      	movs	r3, #1
 8000c96:	603b      	str	r3, [r7, #0]
      }
    }
  }

  /* Idle */
  DESELECT();
 8000c98:	f7ff fc80 	bl	800059c <DESELECT>
  SPI_RxByte();
 8000c9c:	f7ff fcc0 	bl	8000620 <SPI_RxByte>

  return count ? RES_ERROR : RES_OK;
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	bf14      	ite	ne
 8000ca6:	2301      	movne	r3, #1
 8000ca8:	2300      	moveq	r3, #0
 8000caa:	b2db      	uxtb	r3, r3
}
 8000cac:	4618      	mov	r0, r3
 8000cae:	3710      	adds	r7, #16
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20000000 	.word	0x20000000
 8000cb8:	20000094 	.word	0x20000094

08000cbc <SD_disk_ioctl>:
#endif /* _USE_WRITE */

/* ioctl */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff)
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b08b      	sub	sp, #44	@ 0x2c
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	603a      	str	r2, [r7, #0]
 8000cc6:	71fb      	strb	r3, [r7, #7]
 8000cc8:	460b      	mov	r3, r1
 8000cca:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  uint8_t n, csd[16], *ptr = buff;
 8000ccc:	683b      	ldr	r3, [r7, #0]
 8000cce:	623b      	str	r3, [r7, #32]
  WORD csize;

  /* pdrv should be 0 */
  if (drv) return RES_PARERR;
 8000cd0:	79fb      	ldrb	r3, [r7, #7]
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <SD_disk_ioctl+0x1e>
 8000cd6:	2304      	movs	r3, #4
 8000cd8:	e113      	b.n	8000f02 <SD_disk_ioctl+0x246>
  res = RES_ERROR;
 8000cda:	2301      	movs	r3, #1
 8000cdc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  if (ctrl == CTRL_POWER)
 8000ce0:	79bb      	ldrb	r3, [r7, #6]
 8000ce2:	2b05      	cmp	r3, #5
 8000ce4:	d124      	bne.n	8000d30 <SD_disk_ioctl+0x74>
  {
    switch (*ptr)
 8000ce6:	6a3b      	ldr	r3, [r7, #32]
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	2b02      	cmp	r3, #2
 8000cec:	d012      	beq.n	8000d14 <SD_disk_ioctl+0x58>
 8000cee:	2b02      	cmp	r3, #2
 8000cf0:	dc1a      	bgt.n	8000d28 <SD_disk_ioctl+0x6c>
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d002      	beq.n	8000cfc <SD_disk_ioctl+0x40>
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d006      	beq.n	8000d08 <SD_disk_ioctl+0x4c>
 8000cfa:	e015      	b.n	8000d28 <SD_disk_ioctl+0x6c>
    {
    case 0:
      SD_PowerOff();    /* Power Off */
 8000cfc:	f7ff fd16 	bl	800072c <SD_PowerOff>
      res = RES_OK;
 8000d00:	2300      	movs	r3, #0
 8000d02:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000d06:	e0fa      	b.n	8000efe <SD_disk_ioctl+0x242>
    case 1:
      SD_PowerOn();   /* Power On */
 8000d08:	f7ff fcce 	bl	80006a8 <SD_PowerOn>
      res = RES_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000d12:	e0f4      	b.n	8000efe <SD_disk_ioctl+0x242>
    case 2:
      *(ptr + 1) = SD_CheckPower();
 8000d14:	6a3b      	ldr	r3, [r7, #32]
 8000d16:	1c5c      	adds	r4, r3, #1
 8000d18:	f7ff fd14 	bl	8000744 <SD_CheckPower>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	7023      	strb	r3, [r4, #0]
      res = RES_OK;   /* Power Check */
 8000d20:	2300      	movs	r3, #0
 8000d22:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000d26:	e0ea      	b.n	8000efe <SD_disk_ioctl+0x242>
    default:
      res = RES_PARERR;
 8000d28:	2304      	movs	r3, #4
 8000d2a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000d2e:	e0e6      	b.n	8000efe <SD_disk_ioctl+0x242>
    }
  }
  else
  {
    /* no disk */
    if (Stat & STA_NOINIT) return RES_NOTRDY;
 8000d30:	4b76      	ldr	r3, [pc, #472]	@ (8000f0c <SD_disk_ioctl+0x250>)
 8000d32:	781b      	ldrb	r3, [r3, #0]
 8000d34:	b2db      	uxtb	r3, r3
 8000d36:	f003 0301 	and.w	r3, r3, #1
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d001      	beq.n	8000d42 <SD_disk_ioctl+0x86>
 8000d3e:	2303      	movs	r3, #3
 8000d40:	e0df      	b.n	8000f02 <SD_disk_ioctl+0x246>

    SELECT();
 8000d42:	f7ff fc1d 	bl	8000580 <SELECT>

    switch (ctrl)
 8000d46:	79bb      	ldrb	r3, [r7, #6]
 8000d48:	2b0d      	cmp	r3, #13
 8000d4a:	f200 80c9 	bhi.w	8000ee0 <SD_disk_ioctl+0x224>
 8000d4e:	a201      	add	r2, pc, #4	@ (adr r2, 8000d54 <SD_disk_ioctl+0x98>)
 8000d50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d54:	08000e4b 	.word	0x08000e4b
 8000d58:	08000d8d 	.word	0x08000d8d
 8000d5c:	08000e3b 	.word	0x08000e3b
 8000d60:	08000ee1 	.word	0x08000ee1
 8000d64:	08000ee1 	.word	0x08000ee1
 8000d68:	08000ee1 	.word	0x08000ee1
 8000d6c:	08000ee1 	.word	0x08000ee1
 8000d70:	08000ee1 	.word	0x08000ee1
 8000d74:	08000ee1 	.word	0x08000ee1
 8000d78:	08000ee1 	.word	0x08000ee1
 8000d7c:	08000ee1 	.word	0x08000ee1
 8000d80:	08000e5d 	.word	0x08000e5d
 8000d84:	08000e81 	.word	0x08000e81
 8000d88:	08000ea5 	.word	0x08000ea5
    {
    case GET_SECTOR_COUNT:
      /* SEND_CSD */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16))
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2049      	movs	r0, #73	@ 0x49
 8000d90:	f7ff fd55 	bl	800083e <SD_SendCmd>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f040 80a6 	bne.w	8000ee8 <SD_disk_ioctl+0x22c>
 8000d9c:	f107 030c 	add.w	r3, r7, #12
 8000da0:	2110      	movs	r1, #16
 8000da2:	4618      	mov	r0, r3
 8000da4:	f7ff fcda 	bl	800075c <SD_RxDataBlock>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f000 809c 	beq.w	8000ee8 <SD_disk_ioctl+0x22c>
      {
        if ((csd[0] >> 6) == 1)
 8000db0:	7b3b      	ldrb	r3, [r7, #12]
 8000db2:	099b      	lsrs	r3, r3, #6
 8000db4:	b2db      	uxtb	r3, r3
 8000db6:	2b01      	cmp	r3, #1
 8000db8:	d10d      	bne.n	8000dd6 <SD_disk_ioctl+0x11a>
        {
          /* SDC V2 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8000dba:	7d7b      	ldrb	r3, [r7, #21]
 8000dbc:	461a      	mov	r2, r3
 8000dbe:	7d3b      	ldrb	r3, [r7, #20]
 8000dc0:	021b      	lsls	r3, r3, #8
 8000dc2:	b29b      	uxth	r3, r3
 8000dc4:	4413      	add	r3, r2
 8000dc6:	b29b      	uxth	r3, r3
 8000dc8:	3301      	adds	r3, #1
 8000dca:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8000dcc:	8bfb      	ldrh	r3, [r7, #30]
 8000dce:	029a      	lsls	r2, r3, #10
 8000dd0:	683b      	ldr	r3, [r7, #0]
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	e02d      	b.n	8000e32 <SD_disk_ioctl+0x176>
        }
        else
        {
          /* MMC or SDC V1 */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8000dd6:	7c7b      	ldrb	r3, [r7, #17]
 8000dd8:	f003 030f 	and.w	r3, r3, #15
 8000ddc:	b2da      	uxtb	r2, r3
 8000dde:	7dbb      	ldrb	r3, [r7, #22]
 8000de0:	09db      	lsrs	r3, r3, #7
 8000de2:	b2db      	uxtb	r3, r3
 8000de4:	4413      	add	r3, r2
 8000de6:	b2da      	uxtb	r2, r3
 8000de8:	7d7b      	ldrb	r3, [r7, #21]
 8000dea:	005b      	lsls	r3, r3, #1
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	f003 0306 	and.w	r3, r3, #6
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	4413      	add	r3, r2
 8000df6:	b2db      	uxtb	r3, r3
 8000df8:	3302      	adds	r3, #2
 8000dfa:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8000dfe:	7d3b      	ldrb	r3, [r7, #20]
 8000e00:	099b      	lsrs	r3, r3, #6
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	461a      	mov	r2, r3
 8000e06:	7cfb      	ldrb	r3, [r7, #19]
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	b29b      	uxth	r3, r3
 8000e0c:	4413      	add	r3, r2
 8000e0e:	b29a      	uxth	r2, r3
 8000e10:	7cbb      	ldrb	r3, [r7, #18]
 8000e12:	029b      	lsls	r3, r3, #10
 8000e14:	b29b      	uxth	r3, r3
 8000e16:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8000e1a:	b29b      	uxth	r3, r3
 8000e1c:	4413      	add	r3, r2
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	3301      	adds	r3, #1
 8000e22:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8000e24:	8bfa      	ldrh	r2, [r7, #30]
 8000e26:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000e2a:	3b09      	subs	r3, #9
 8000e2c:	409a      	lsls	r2, r3
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	601a      	str	r2, [r3, #0]
        }
        res = RES_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
      break;
 8000e38:	e056      	b.n	8000ee8 <SD_disk_ioctl+0x22c>
    case GET_SECTOR_SIZE:
      *(WORD*) buff = 512;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e40:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000e48:	e055      	b.n	8000ef6 <SD_disk_ioctl+0x23a>
    case CTRL_SYNC:
      if (SD_ReadyWait() == 0xFF) res = RES_OK;
 8000e4a:	f7ff fc13 	bl	8000674 <SD_ReadyWait>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2bff      	cmp	r3, #255	@ 0xff
 8000e52:	d14b      	bne.n	8000eec <SD_disk_ioctl+0x230>
 8000e54:	2300      	movs	r3, #0
 8000e56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000e5a:	e047      	b.n	8000eec <SD_disk_ioctl+0x230>
    case MMC_GET_CSD:
      /* SEND_CSD */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e5c:	2100      	movs	r1, #0
 8000e5e:	2049      	movs	r0, #73	@ 0x49
 8000e60:	f7ff fced 	bl	800083e <SD_SendCmd>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d142      	bne.n	8000ef0 <SD_disk_ioctl+0x234>
 8000e6a:	2110      	movs	r1, #16
 8000e6c:	6a38      	ldr	r0, [r7, #32]
 8000e6e:	f7ff fc75 	bl	800075c <SD_RxDataBlock>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d03b      	beq.n	8000ef0 <SD_disk_ioctl+0x234>
 8000e78:	2300      	movs	r3, #0
 8000e7a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000e7e:	e037      	b.n	8000ef0 <SD_disk_ioctl+0x234>
    case MMC_GET_CID:
      /* SEND_CID */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16)) res = RES_OK;
 8000e80:	2100      	movs	r1, #0
 8000e82:	204a      	movs	r0, #74	@ 0x4a
 8000e84:	f7ff fcdb 	bl	800083e <SD_SendCmd>
 8000e88:	4603      	mov	r3, r0
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	d132      	bne.n	8000ef4 <SD_disk_ioctl+0x238>
 8000e8e:	2110      	movs	r1, #16
 8000e90:	6a38      	ldr	r0, [r7, #32]
 8000e92:	f7ff fc63 	bl	800075c <SD_RxDataBlock>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d02b      	beq.n	8000ef4 <SD_disk_ioctl+0x238>
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      break;
 8000ea2:	e027      	b.n	8000ef4 <SD_disk_ioctl+0x238>
    case MMC_GET_OCR:
      /* READ_OCR */
      if (SD_SendCmd(CMD58, 0) == 0)
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	207a      	movs	r0, #122	@ 0x7a
 8000ea8:	f7ff fcc9 	bl	800083e <SD_SendCmd>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d116      	bne.n	8000ee0 <SD_disk_ioctl+0x224>
      {
        for (n = 0; n < 4; n++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000eb8:	e00b      	b.n	8000ed2 <SD_disk_ioctl+0x216>
        {
          *ptr++ = SPI_RxByte();
 8000eba:	6a3c      	ldr	r4, [r7, #32]
 8000ebc:	1c63      	adds	r3, r4, #1
 8000ebe:	623b      	str	r3, [r7, #32]
 8000ec0:	f7ff fbae 	bl	8000620 <SPI_RxByte>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8000ec8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000ecc:	3301      	adds	r3, #1
 8000ece:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8000ed2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8000ed6:	2b03      	cmp	r3, #3
 8000ed8:	d9ef      	bls.n	8000eba <SD_disk_ioctl+0x1fe>
        }
        res = RES_OK;
 8000eda:	2300      	movs	r3, #0
 8000edc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }
    default:
      res = RES_PARERR;
 8000ee0:	2304      	movs	r3, #4
 8000ee2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8000ee6:	e006      	b.n	8000ef6 <SD_disk_ioctl+0x23a>
      break;
 8000ee8:	bf00      	nop
 8000eea:	e004      	b.n	8000ef6 <SD_disk_ioctl+0x23a>
      break;
 8000eec:	bf00      	nop
 8000eee:	e002      	b.n	8000ef6 <SD_disk_ioctl+0x23a>
      break;
 8000ef0:	bf00      	nop
 8000ef2:	e000      	b.n	8000ef6 <SD_disk_ioctl+0x23a>
      break;
 8000ef4:	bf00      	nop
    }

    DESELECT();
 8000ef6:	f7ff fb51 	bl	800059c <DESELECT>
    SPI_RxByte();
 8000efa:	f7ff fb91 	bl	8000620 <SPI_RxByte>
  }

  return res;
 8000efe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	372c      	adds	r7, #44	@ 0x2c
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd90      	pop	{r4, r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000000 	.word	0x20000000

08000f10 <start_measurement>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void start_measurement(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
	set_pins_to_start_measurement();
 8000f14:	f000 f842 	bl	8000f9c <set_pins_to_start_measurement>
	if (initialize_sd_card())
 8000f18:	f000 f858 	bl	8000fcc <initialize_sd_card>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <start_measurement+0x16>
		create_unique_measurement_file();
 8000f22:	f000 f89b 	bl	800105c <create_unique_measurement_file>
	measured_data_count = 0U;
 8000f26:	4b05      	ldr	r3, [pc, #20]	@ (8000f3c <start_measurement+0x2c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	801a      	strh	r2, [r3, #0]
	is_measure_ready = false;
 8000f2c:	4b04      	ldr	r3, [pc, #16]	@ (8000f40 <start_measurement+0x30>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	701a      	strb	r2, [r3, #0]
	is_measurement_in_progress = true;
 8000f32:	4b04      	ldr	r3, [pc, #16]	@ (8000f44 <start_measurement+0x34>)
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	20000212 	.word	0x20000212
 8000f40:	20000232 	.word	0x20000232
 8000f44:	20000231 	.word	0x20000231

08000f48 <stop_measurement>:

void stop_measurement(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	is_measurement_in_progress = false;
 8000f4c:	4b0e      	ldr	r3, [pc, #56]	@ (8000f88 <stop_measurement+0x40>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	701a      	strb	r2, [r3, #0]
	set_pins_to_stop_measurement();
 8000f52:	f000 f82f 	bl	8000fb4 <set_pins_to_stop_measurement>
	if (is_sd_card_file_opened)
 8000f56:	4b0d      	ldr	r3, [pc, #52]	@ (8000f8c <stop_measurement+0x44>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d002      	beq.n	8000f64 <stop_measurement+0x1c>
		f_close(&file);
 8000f5e:	480c      	ldr	r0, [pc, #48]	@ (8000f90 <stop_measurement+0x48>)
 8000f60:	f007 fc5a 	bl	8008818 <f_close>
	if (is_sd_card_mounted)
 8000f64:	4b0b      	ldr	r3, [pc, #44]	@ (8000f94 <stop_measurement+0x4c>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d004      	beq.n	8000f76 <stop_measurement+0x2e>
		f_mount(NULL, "", 0U);
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	490a      	ldr	r1, [pc, #40]	@ (8000f98 <stop_measurement+0x50>)
 8000f70:	2000      	movs	r0, #0
 8000f72:	f007 f831 	bl	8007fd8 <f_mount>
	is_sd_card_mounted = false;
 8000f76:	4b07      	ldr	r3, [pc, #28]	@ (8000f94 <stop_measurement+0x4c>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
	is_sd_card_file_opened = false;
 8000f7c:	4b03      	ldr	r3, [pc, #12]	@ (8000f8c <stop_measurement+0x44>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	701a      	strb	r2, [r3, #0]
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	20000231 	.word	0x20000231
 8000f8c:	20000235 	.word	0x20000235
 8000f90:	20001270 	.word	0x20001270
 8000f94:	20000234 	.word	0x20000234
 8000f98:	08009710 	.word	0x08009710

08000f9c <set_pins_to_start_measurement>:

void set_pins_to_start_measurement(void)
{
 8000f9c:	b580      	push	{r7, lr}
 8000f9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_SET);
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	4802      	ldr	r0, [pc, #8]	@ (8000fb0 <set_pins_to_start_measurement+0x14>)
 8000fa6:	f001 fe35 	bl	8002c14 <HAL_GPIO_WritePin>
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40020800 	.word	0x40020800

08000fb4 <set_pins_to_stop_measurement>:

void set_pins_to_stop_measurement(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8000fb8:	2200      	movs	r2, #0
 8000fba:	2101      	movs	r1, #1
 8000fbc:	4802      	ldr	r0, [pc, #8]	@ (8000fc8 <set_pins_to_stop_measurement+0x14>)
 8000fbe:	f001 fe29 	bl	8002c14 <HAL_GPIO_WritePin>
}
 8000fc2:	bf00      	nop
 8000fc4:	bd80      	pop	{r7, pc}
 8000fc6:	bf00      	nop
 8000fc8:	40020800 	.word	0x40020800

08000fcc <initialize_sd_card>:

bool initialize_sd_card(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	af00      	add	r7, sp, #0
	fresult = f_mount(&fatfs, "", 1U);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	491b      	ldr	r1, [pc, #108]	@ (8001040 <initialize_sd_card+0x74>)
 8000fd4:	481b      	ldr	r0, [pc, #108]	@ (8001044 <initialize_sd_card+0x78>)
 8000fd6:	f006 ffff 	bl	8007fd8 <f_mount>
 8000fda:	4603      	mov	r3, r0
 8000fdc:	461a      	mov	r2, r3
 8000fde:	4b1a      	ldr	r3, [pc, #104]	@ (8001048 <initialize_sd_card+0x7c>)
 8000fe0:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8000fe2:	4b19      	ldr	r3, [pc, #100]	@ (8001048 <initialize_sd_card+0x7c>)
 8000fe4:	781b      	ldrb	r3, [r3, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <initialize_sd_card+0x22>
		return false;
 8000fea:	2300      	movs	r3, #0
 8000fec:	e025      	b.n	800103a <initialize_sd_card+0x6e>

	f_getfree("", &free_cluster, &pfs);
 8000fee:	4a17      	ldr	r2, [pc, #92]	@ (800104c <initialize_sd_card+0x80>)
 8000ff0:	4917      	ldr	r1, [pc, #92]	@ (8001050 <initialize_sd_card+0x84>)
 8000ff2:	4813      	ldr	r0, [pc, #76]	@ (8001040 <initialize_sd_card+0x74>)
 8000ff4:	f007 fc3a 	bl	800886c <f_getfree>
	free_space = (uint32_t)(free_cluster * pfs->csize * 0.5f);
 8000ff8:	4b14      	ldr	r3, [pc, #80]	@ (800104c <initialize_sd_card+0x80>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	895b      	ldrh	r3, [r3, #10]
 8000ffe:	461a      	mov	r2, r3
 8001000:	4b13      	ldr	r3, [pc, #76]	@ (8001050 <initialize_sd_card+0x84>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	fb02 f303 	mul.w	r3, r2, r3
 8001008:	ee07 3a90 	vmov	s15, r3
 800100c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001010:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001014:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001018:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800101c:	ee17 2a90 	vmov	r2, s15
 8001020:	4b0c      	ldr	r3, [pc, #48]	@ (8001054 <initialize_sd_card+0x88>)
 8001022:	601a      	str	r2, [r3, #0]
	if (free_space < MIN_FREE_SPACE)
 8001024:	4b0b      	ldr	r3, [pc, #44]	@ (8001054 <initialize_sd_card+0x88>)
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	2bc7      	cmp	r3, #199	@ 0xc7
 800102a:	d801      	bhi.n	8001030 <initialize_sd_card+0x64>
		return false;
 800102c:	2300      	movs	r3, #0
 800102e:	e004      	b.n	800103a <initialize_sd_card+0x6e>

	return is_sd_card_mounted = true;
 8001030:	4b09      	ldr	r3, [pc, #36]	@ (8001058 <initialize_sd_card+0x8c>)
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	4b08      	ldr	r3, [pc, #32]	@ (8001058 <initialize_sd_card+0x8c>)
 8001038:	781b      	ldrb	r3, [r3, #0]
}
 800103a:	4618      	mov	r0, r3
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	08009710 	.word	0x08009710
 8001044:	20000238 	.word	0x20000238
 8001048:	200022a0 	.word	0x200022a0
 800104c:	200022a4 	.word	0x200022a4
 8001050:	200022a8 	.word	0x200022a8
 8001054:	200022ac 	.word	0x200022ac
 8001058:	20000234 	.word	0x20000234

0800105c <create_unique_measurement_file>:

void create_unique_measurement_file(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
	filename_index = 0U;
 8001060:	4b15      	ldr	r3, [pc, #84]	@ (80010b8 <create_unique_measurement_file+0x5c>)
 8001062:	2200      	movs	r2, #0
 8001064:	701a      	strb	r2, [r3, #0]

	do
	{
		snprintf(filename, FILENAME_SIZE, "ecg_measurement_%d.txt", ++filename_index);
 8001066:	4b14      	ldr	r3, [pc, #80]	@ (80010b8 <create_unique_measurement_file+0x5c>)
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	3301      	adds	r3, #1
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b12      	ldr	r3, [pc, #72]	@ (80010b8 <create_unique_measurement_file+0x5c>)
 8001070:	701a      	strb	r2, [r3, #0]
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <create_unique_measurement_file+0x5c>)
 8001074:	781b      	ldrb	r3, [r3, #0]
 8001076:	4a11      	ldr	r2, [pc, #68]	@ (80010bc <create_unique_measurement_file+0x60>)
 8001078:	2118      	movs	r1, #24
 800107a:	4811      	ldr	r0, [pc, #68]	@ (80010c0 <create_unique_measurement_file+0x64>)
 800107c:	f007 fe68 	bl	8008d50 <sniprintf>
		fresult = f_open(&file, filename, FA_WRITE | FA_CREATE_NEW);
 8001080:	2206      	movs	r2, #6
 8001082:	490f      	ldr	r1, [pc, #60]	@ (80010c0 <create_unique_measurement_file+0x64>)
 8001084:	480f      	ldr	r0, [pc, #60]	@ (80010c4 <create_unique_measurement_file+0x68>)
 8001086:	f006 ffed 	bl	8008064 <f_open>
 800108a:	4603      	mov	r3, r0
 800108c:	461a      	mov	r2, r3
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <create_unique_measurement_file+0x6c>)
 8001090:	701a      	strb	r2, [r3, #0]
	}
	while (fresult != FR_OK && filename_index != UINT8_MAX);
 8001092:	4b0d      	ldr	r3, [pc, #52]	@ (80010c8 <create_unique_measurement_file+0x6c>)
 8001094:	781b      	ldrb	r3, [r3, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <create_unique_measurement_file+0x46>
 800109a:	4b07      	ldr	r3, [pc, #28]	@ (80010b8 <create_unique_measurement_file+0x5c>)
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2bff      	cmp	r3, #255	@ 0xff
 80010a0:	d1e1      	bne.n	8001066 <create_unique_measurement_file+0xa>

	is_sd_card_file_opened = (fresult == FR_OK);
 80010a2:	4b09      	ldr	r3, [pc, #36]	@ (80010c8 <create_unique_measurement_file+0x6c>)
 80010a4:	781b      	ldrb	r3, [r3, #0]
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	bf0c      	ite	eq
 80010aa:	2301      	moveq	r3, #1
 80010ac:	2300      	movne	r3, #0
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <create_unique_measurement_file+0x70>)
 80010b2:	701a      	strb	r2, [r3, #0]
}
 80010b4:	bf00      	nop
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	200022b0 	.word	0x200022b0
 80010bc:	08009714 	.word	0x08009714
 80010c0:	200022b4 	.word	0x200022b4
 80010c4:	20001270 	.word	0x20001270
 80010c8:	200022a0 	.word	0x200022a0
 80010cc:	20000235 	.word	0x20000235

080010d0 <get_moving_average_with_new_value>:

uint16_t get_moving_average_with_new_value(uint16_t buffer[], uint16_t new_adc_data)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b085      	sub	sp, #20
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	460b      	mov	r3, r1
 80010da:	807b      	strh	r3, [r7, #2]
	uint16_t sum = 0U;
 80010dc:	2300      	movs	r3, #0
 80010de:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0U; i < WINDOW_SIZE - 1U; ++i) {
 80010e0:	2300      	movs	r3, #0
 80010e2:	737b      	strb	r3, [r7, #13]
 80010e4:	e015      	b.n	8001112 <get_moving_average_with_new_value+0x42>
		buffer[i] = buffer[i+1U];
 80010e6:	7b7b      	ldrb	r3, [r7, #13]
 80010e8:	3301      	adds	r3, #1
 80010ea:	005b      	lsls	r3, r3, #1
 80010ec:	687a      	ldr	r2, [r7, #4]
 80010ee:	441a      	add	r2, r3
 80010f0:	7b7b      	ldrb	r3, [r7, #13]
 80010f2:	005b      	lsls	r3, r3, #1
 80010f4:	6879      	ldr	r1, [r7, #4]
 80010f6:	440b      	add	r3, r1
 80010f8:	8812      	ldrh	r2, [r2, #0]
 80010fa:	801a      	strh	r2, [r3, #0]
		sum += buffer[i];
 80010fc:	7b7b      	ldrb	r3, [r7, #13]
 80010fe:	005b      	lsls	r3, r3, #1
 8001100:	687a      	ldr	r2, [r7, #4]
 8001102:	4413      	add	r3, r2
 8001104:	881a      	ldrh	r2, [r3, #0]
 8001106:	89fb      	ldrh	r3, [r7, #14]
 8001108:	4413      	add	r3, r2
 800110a:	81fb      	strh	r3, [r7, #14]
	for (uint8_t i = 0U; i < WINDOW_SIZE - 1U; ++i) {
 800110c:	7b7b      	ldrb	r3, [r7, #13]
 800110e:	3301      	adds	r3, #1
 8001110:	737b      	strb	r3, [r7, #13]
 8001112:	7b7b      	ldrb	r3, [r7, #13]
 8001114:	2b08      	cmp	r3, #8
 8001116:	d9e6      	bls.n	80010e6 <get_moving_average_with_new_value+0x16>
	}
	buffer[WINDOW_SIZE-1U] = new_adc_data;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	3312      	adds	r3, #18
 800111c:	887a      	ldrh	r2, [r7, #2]
 800111e:	801a      	strh	r2, [r3, #0]
	sum += new_adc_data;
 8001120:	89fa      	ldrh	r2, [r7, #14]
 8001122:	887b      	ldrh	r3, [r7, #2]
 8001124:	4413      	add	r3, r2
 8001126:	81fb      	strh	r3, [r7, #14]

	return (uint16_t)(sum / (float)WINDOW_SIZE);
 8001128:	89fb      	ldrh	r3, [r7, #14]
 800112a:	ee07 3a90 	vmov	s15, r3
 800112e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001132:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8001136:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800113e:	ee17 3a90 	vmov	r3, s15
 8001142:	b29b      	uxth	r3, r3
}
 8001144:	4618      	mov	r0, r3
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001154:	f000 fd34 	bl	8001bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001158:	f000 f888 	bl	800126c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800115c:	f000 fa3c 	bl	80015d8 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001160:	f000 f8e2 	bl	8001328 <MX_ADC1_Init>
  MX_TIM3_Init();
 8001164:	f000 f9c0 	bl	80014e8 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001168:	f000 fa0c 	bl	8001584 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 800116c:	f000 f964 	bl	8001438 <MX_TIM2_Init>
  MX_FATFS_Init();
 8001170:	f004 fcea 	bl	8005b48 <MX_FATFS_Init>
  MX_SPI1_Init();
 8001174:	f000 f92a 	bl	80013cc <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8001178:	482e      	ldr	r0, [pc, #184]	@ (8001234 <main+0xe4>)
 800117a:	f002 fe65 	bl	8003e48 <HAL_TIM_Base_Start>
  HAL_ADC_Start_IT(&hadc1);
 800117e:	482e      	ldr	r0, [pc, #184]	@ (8001238 <main+0xe8>)
 8001180:	f000 fdf8 	bl	8001d74 <HAL_ADC_Start_IT>
  TIM2->CCR1 = 30000U;
 8001184:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001188:	f247 5230 	movw	r2, #30000	@ 0x7530
 800118c:	635a      	str	r2, [r3, #52]	@ 0x34
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800118e:	2100      	movs	r1, #0
 8001190:	482a      	ldr	r0, [pc, #168]	@ (800123c <main+0xec>)
 8001192:	f002 ff03 	bl	8003f9c <HAL_TIM_PWM_Start>
  HAL_UART_Receive_IT(&huart2, (uint8_t*)uart_receive_buffer, 1U);
 8001196:	2201      	movs	r2, #1
 8001198:	4929      	ldr	r1, [pc, #164]	@ (8001240 <main+0xf0>)
 800119a:	482a      	ldr	r0, [pc, #168]	@ (8001244 <main+0xf4>)
 800119c:	f003 fd59 	bl	8004c52 <HAL_UART_Receive_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	if (is_measure_ready)
 80011a0:	4b29      	ldr	r3, [pc, #164]	@ (8001248 <main+0xf8>)
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d02f      	beq.n	8001208 <main+0xb8>
	{
		if (++measured_data_count > MAX_MEASURED_DATA_COUNT)
 80011a8:	4b28      	ldr	r3, [pc, #160]	@ (800124c <main+0xfc>)
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	3301      	adds	r3, #1
 80011ae:	b29a      	uxth	r2, r3
 80011b0:	4b26      	ldr	r3, [pc, #152]	@ (800124c <main+0xfc>)
 80011b2:	801a      	strh	r2, [r3, #0]
 80011b4:	4b25      	ldr	r3, [pc, #148]	@ (800124c <main+0xfc>)
 80011b6:	881b      	ldrh	r3, [r3, #0]
 80011b8:	f247 5230 	movw	r2, #30000	@ 0x7530
 80011bc:	4293      	cmp	r3, r2
 80011be:	d902      	bls.n	80011c6 <main+0x76>
		{
			stop_measurement();
 80011c0:	f7ff fec2 	bl	8000f48 <stop_measurement>
			continue;
 80011c4:	e034      	b.n	8001230 <main+0xe0>
		}

		sprintf(uart_transmit_buffer, "%d\n", get_moving_average_with_new_value((uint16_t*)moving_average_buffer, adc_data));
 80011c6:	4b22      	ldr	r3, [pc, #136]	@ (8001250 <main+0x100>)
 80011c8:	881b      	ldrh	r3, [r3, #0]
 80011ca:	4619      	mov	r1, r3
 80011cc:	4821      	ldr	r0, [pc, #132]	@ (8001254 <main+0x104>)
 80011ce:	f7ff ff7f 	bl	80010d0 <get_moving_average_with_new_value>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	4920      	ldr	r1, [pc, #128]	@ (8001258 <main+0x108>)
 80011d8:	4820      	ldr	r0, [pc, #128]	@ (800125c <main+0x10c>)
 80011da:	f007 fded 	bl	8008db8 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)uart_transmit_buffer, strlen(uart_transmit_buffer), 10U);
 80011de:	481f      	ldr	r0, [pc, #124]	@ (800125c <main+0x10c>)
 80011e0:	f7fe fffe 	bl	80001e0 <strlen>
 80011e4:	4603      	mov	r3, r0
 80011e6:	b29a      	uxth	r2, r3
 80011e8:	230a      	movs	r3, #10
 80011ea:	491c      	ldr	r1, [pc, #112]	@ (800125c <main+0x10c>)
 80011ec:	4815      	ldr	r0, [pc, #84]	@ (8001244 <main+0xf4>)
 80011ee:	f003 fca5 	bl	8004b3c <HAL_UART_Transmit>
		if (is_sd_card_file_opened)
 80011f2:	4b1b      	ldr	r3, [pc, #108]	@ (8001260 <main+0x110>)
 80011f4:	781b      	ldrb	r3, [r3, #0]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d003      	beq.n	8001202 <main+0xb2>
		    f_puts(uart_transmit_buffer, &file);
 80011fa:	491a      	ldr	r1, [pc, #104]	@ (8001264 <main+0x114>)
 80011fc:	4817      	ldr	r0, [pc, #92]	@ (800125c <main+0x10c>)
 80011fe:	f007 fc61 	bl	8008ac4 <f_puts>
		is_measure_ready = false;
 8001202:	4b11      	ldr	r3, [pc, #68]	@ (8001248 <main+0xf8>)
 8001204:	2200      	movs	r2, #0
 8001206:	701a      	strb	r2, [r3, #0]
	}

	if (is_serial_code_received)
 8001208:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <main+0x118>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d0c7      	beq.n	80011a0 <main+0x50>
	{
		switch (uart_receive_buffer[0])
 8001210:	4b0b      	ldr	r3, [pc, #44]	@ (8001240 <main+0xf0>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	2b31      	cmp	r3, #49	@ 0x31
 8001216:	d002      	beq.n	800121e <main+0xce>
 8001218:	2b32      	cmp	r3, #50	@ 0x32
 800121a:	d003      	beq.n	8001224 <main+0xd4>
 800121c:	e005      	b.n	800122a <main+0xda>
		{
			case START_MEASUREMENT_CODE:
				start_measurement();
 800121e:	f7ff fe77 	bl	8000f10 <start_measurement>
				break;
 8001222:	e002      	b.n	800122a <main+0xda>

			case STOP_MEASUREMENT_CODE:
				stop_measurement();
 8001224:	f7ff fe90 	bl	8000f48 <stop_measurement>
				break;
 8001228:	bf00      	nop
		}

		is_serial_code_received = false;
 800122a:	4b0f      	ldr	r3, [pc, #60]	@ (8001268 <main+0x118>)
 800122c:	2200      	movs	r2, #0
 800122e:	701a      	strb	r2, [r3, #0]
	if (is_measure_ready)
 8001230:	e7b6      	b.n	80011a0 <main+0x50>
 8001232:	bf00      	nop
 8001234:	20000180 	.word	0x20000180
 8001238:	20000098 	.word	0x20000098
 800123c:	20000138 	.word	0x20000138
 8001240:	20000230 	.word	0x20000230
 8001244:	200001c8 	.word	0x200001c8
 8001248:	20000232 	.word	0x20000232
 800124c:	20000212 	.word	0x20000212
 8001250:	20000210 	.word	0x20000210
 8001254:	20000214 	.word	0x20000214
 8001258:	0800972c 	.word	0x0800972c
 800125c:	20000228 	.word	0x20000228
 8001260:	20000235 	.word	0x20000235
 8001264:	20001270 	.word	0x20001270
 8001268:	20000233 	.word	0x20000233

0800126c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b094      	sub	sp, #80	@ 0x50
 8001270:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001272:	f107 0320 	add.w	r3, r7, #32
 8001276:	2230      	movs	r2, #48	@ 0x30
 8001278:	2100      	movs	r1, #0
 800127a:	4618      	mov	r0, r3
 800127c:	f007 fdbc 	bl	8008df8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001280:	f107 030c 	add.w	r3, r7, #12
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
 8001294:	4b22      	ldr	r3, [pc, #136]	@ (8001320 <SystemClock_Config+0xb4>)
 8001296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001298:	4a21      	ldr	r2, [pc, #132]	@ (8001320 <SystemClock_Config+0xb4>)
 800129a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800129e:	6413      	str	r3, [r2, #64]	@ 0x40
 80012a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001320 <SystemClock_Config+0xb4>)
 80012a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012a8:	60bb      	str	r3, [r7, #8]
 80012aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ac:	2300      	movs	r3, #0
 80012ae:	607b      	str	r3, [r7, #4]
 80012b0:	4b1c      	ldr	r3, [pc, #112]	@ (8001324 <SystemClock_Config+0xb8>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a1b      	ldr	r2, [pc, #108]	@ (8001324 <SystemClock_Config+0xb8>)
 80012b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012ba:	6013      	str	r3, [r2, #0]
 80012bc:	4b19      	ldr	r3, [pc, #100]	@ (8001324 <SystemClock_Config+0xb8>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012c4:	607b      	str	r3, [r7, #4]
 80012c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012c8:	2302      	movs	r3, #2
 80012ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012cc:	2301      	movs	r3, #1
 80012ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012d0:	2310      	movs	r3, #16
 80012d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80012d4:	2300      	movs	r3, #0
 80012d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d8:	f107 0320 	add.w	r3, r7, #32
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 fcb3 	bl	8002c48 <HAL_RCC_OscConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0x80>
  {
    Error_Handler();
 80012e8:	f000 fa10 	bl	800170c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012ec:	230f      	movs	r3, #15
 80012ee:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001300:	f107 030c 	add.w	r3, r7, #12
 8001304:	2100      	movs	r1, #0
 8001306:	4618      	mov	r0, r3
 8001308:	f001 ff16 	bl	8003138 <HAL_RCC_ClockConfig>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d001      	beq.n	8001316 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001312:	f000 f9fb 	bl	800170c <Error_Handler>
  }
}
 8001316:	bf00      	nop
 8001318:	3750      	adds	r7, #80	@ 0x50
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800
 8001324:	40007000 	.word	0x40007000

08001328 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800132e:	463b      	mov	r3, r7
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]
 8001334:	605a      	str	r2, [r3, #4]
 8001336:	609a      	str	r2, [r3, #8]
 8001338:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800133a:	4b22      	ldr	r3, [pc, #136]	@ (80013c4 <MX_ADC1_Init+0x9c>)
 800133c:	4a22      	ldr	r2, [pc, #136]	@ (80013c8 <MX_ADC1_Init+0xa0>)
 800133e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001340:	4b20      	ldr	r3, [pc, #128]	@ (80013c4 <MX_ADC1_Init+0x9c>)
 8001342:	2200      	movs	r2, #0
 8001344:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001346:	4b1f      	ldr	r3, [pc, #124]	@ (80013c4 <MX_ADC1_Init+0x9c>)
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800134c:	4b1d      	ldr	r3, [pc, #116]	@ (80013c4 <MX_ADC1_Init+0x9c>)
 800134e:	2200      	movs	r2, #0
 8001350:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001352:	4b1c      	ldr	r3, [pc, #112]	@ (80013c4 <MX_ADC1_Init+0x9c>)
 8001354:	2200      	movs	r2, #0
 8001356:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001358:	4b1a      	ldr	r3, [pc, #104]	@ (80013c4 <MX_ADC1_Init+0x9c>)
 800135a:	2200      	movs	r2, #0
 800135c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001360:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <MX_ADC1_Init+0x9c>)
 8001362:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001366:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T3_TRGO;
 8001368:	4b16      	ldr	r3, [pc, #88]	@ (80013c4 <MX_ADC1_Init+0x9c>)
 800136a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800136e:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001370:	4b14      	ldr	r3, [pc, #80]	@ (80013c4 <MX_ADC1_Init+0x9c>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001376:	4b13      	ldr	r3, [pc, #76]	@ (80013c4 <MX_ADC1_Init+0x9c>)
 8001378:	2201      	movs	r2, #1
 800137a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800137c:	4b11      	ldr	r3, [pc, #68]	@ (80013c4 <MX_ADC1_Init+0x9c>)
 800137e:	2200      	movs	r2, #0
 8001380:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001384:	4b0f      	ldr	r3, [pc, #60]	@ (80013c4 <MX_ADC1_Init+0x9c>)
 8001386:	2201      	movs	r2, #1
 8001388:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800138a:	480e      	ldr	r0, [pc, #56]	@ (80013c4 <MX_ADC1_Init+0x9c>)
 800138c:	f000 fcae 	bl	8001cec <HAL_ADC_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001396:	f000 f9b9 	bl	800170c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800139a:	2304      	movs	r3, #4
 800139c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800139e:	2301      	movs	r3, #1
 80013a0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80013a2:	2307      	movs	r3, #7
 80013a4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80013a6:	463b      	mov	r3, r7
 80013a8:	4619      	mov	r1, r3
 80013aa:	4806      	ldr	r0, [pc, #24]	@ (80013c4 <MX_ADC1_Init+0x9c>)
 80013ac:	f000 fed2 	bl	8002154 <HAL_ADC_ConfigChannel>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d001      	beq.n	80013ba <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 80013b6:	f000 f9a9 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000098 	.word	0x20000098
 80013c8:	40012000 	.word	0x40012000

080013cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013d0:	4b17      	ldr	r3, [pc, #92]	@ (8001430 <MX_SPI1_Init+0x64>)
 80013d2:	4a18      	ldr	r2, [pc, #96]	@ (8001434 <MX_SPI1_Init+0x68>)
 80013d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013d6:	4b16      	ldr	r3, [pc, #88]	@ (8001430 <MX_SPI1_Init+0x64>)
 80013d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80013dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013de:	4b14      	ldr	r3, [pc, #80]	@ (8001430 <MX_SPI1_Init+0x64>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013e4:	4b12      	ldr	r3, [pc, #72]	@ (8001430 <MX_SPI1_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013ea:	4b11      	ldr	r3, [pc, #68]	@ (8001430 <MX_SPI1_Init+0x64>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001430 <MX_SPI1_Init+0x64>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001430 <MX_SPI1_Init+0x64>)
 80013f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80013fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001430 <MX_SPI1_Init+0x64>)
 8001400:	2200      	movs	r2, #0
 8001402:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001404:	4b0a      	ldr	r3, [pc, #40]	@ (8001430 <MX_SPI1_Init+0x64>)
 8001406:	2200      	movs	r2, #0
 8001408:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800140a:	4b09      	ldr	r3, [pc, #36]	@ (8001430 <MX_SPI1_Init+0x64>)
 800140c:	2200      	movs	r2, #0
 800140e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001410:	4b07      	ldr	r3, [pc, #28]	@ (8001430 <MX_SPI1_Init+0x64>)
 8001412:	2200      	movs	r2, #0
 8001414:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001416:	4b06      	ldr	r3, [pc, #24]	@ (8001430 <MX_SPI1_Init+0x64>)
 8001418:	220a      	movs	r2, #10
 800141a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800141c:	4804      	ldr	r0, [pc, #16]	@ (8001430 <MX_SPI1_Init+0x64>)
 800141e:	f002 f86b 	bl	80034f8 <HAL_SPI_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001428:	f000 f970 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}
 8001430:	200000e0 	.word	0x200000e0
 8001434:	40013000 	.word	0x40013000

08001438 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b08a      	sub	sp, #40	@ 0x28
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800143e:	f107 0320 	add.w	r3, r7, #32
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
 8001454:	611a      	str	r2, [r3, #16]
 8001456:	615a      	str	r2, [r3, #20]
 8001458:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800145a:	4b22      	ldr	r3, [pc, #136]	@ (80014e4 <MX_TIM2_Init+0xac>)
 800145c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001460:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8001462:	4b20      	ldr	r3, [pc, #128]	@ (80014e4 <MX_TIM2_Init+0xac>)
 8001464:	221f      	movs	r2, #31
 8001466:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001468:	4b1e      	ldr	r3, [pc, #120]	@ (80014e4 <MX_TIM2_Init+0xac>)
 800146a:	2200      	movs	r2, #0
 800146c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 49999;
 800146e:	4b1d      	ldr	r3, [pc, #116]	@ (80014e4 <MX_TIM2_Init+0xac>)
 8001470:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 8001474:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001476:	4b1b      	ldr	r3, [pc, #108]	@ (80014e4 <MX_TIM2_Init+0xac>)
 8001478:	2200      	movs	r2, #0
 800147a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800147c:	4b19      	ldr	r3, [pc, #100]	@ (80014e4 <MX_TIM2_Init+0xac>)
 800147e:	2280      	movs	r2, #128	@ 0x80
 8001480:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001482:	4818      	ldr	r0, [pc, #96]	@ (80014e4 <MX_TIM2_Init+0xac>)
 8001484:	f002 fd3a 	bl	8003efc <HAL_TIM_PWM_Init>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800148e:	f000 f93d 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001492:	2300      	movs	r3, #0
 8001494:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001496:	2300      	movs	r3, #0
 8001498:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800149a:	f107 0320 	add.w	r3, r7, #32
 800149e:	4619      	mov	r1, r3
 80014a0:	4810      	ldr	r0, [pc, #64]	@ (80014e4 <MX_TIM2_Init+0xac>)
 80014a2:	f003 fa8d 	bl	80049c0 <HAL_TIMEx_MasterConfigSynchronization>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80014ac:	f000 f92e 	bl	800170c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b0:	2360      	movs	r3, #96	@ 0x60
 80014b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014b8:	2300      	movs	r3, #0
 80014ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014c0:	1d3b      	adds	r3, r7, #4
 80014c2:	2200      	movs	r2, #0
 80014c4:	4619      	mov	r1, r3
 80014c6:	4807      	ldr	r0, [pc, #28]	@ (80014e4 <MX_TIM2_Init+0xac>)
 80014c8:	f002 fe18 	bl	80040fc <HAL_TIM_PWM_ConfigChannel>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80014d2:	f000 f91b 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014d6:	4803      	ldr	r0, [pc, #12]	@ (80014e4 <MX_TIM2_Init+0xac>)
 80014d8:	f000 fa1c 	bl	8001914 <HAL_TIM_MspPostInit>

}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	@ 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	20000138 	.word	0x20000138

080014e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b086      	sub	sp, #24
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ee:	f107 0308 	add.w	r3, r7, #8
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fc:	463b      	mov	r3, r7
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001504:	4b1d      	ldr	r3, [pc, #116]	@ (800157c <MX_TIM3_Init+0x94>)
 8001506:	4a1e      	ldr	r2, [pc, #120]	@ (8001580 <MX_TIM3_Init+0x98>)
 8001508:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800150a:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <MX_TIM3_Init+0x94>)
 800150c:	2200      	movs	r2, #0
 800150e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001510:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <MX_TIM3_Init+0x94>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 31999;
 8001516:	4b19      	ldr	r3, [pc, #100]	@ (800157c <MX_TIM3_Init+0x94>)
 8001518:	f647 42ff 	movw	r2, #31999	@ 0x7cff
 800151c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800151e:	4b17      	ldr	r3, [pc, #92]	@ (800157c <MX_TIM3_Init+0x94>)
 8001520:	2200      	movs	r2, #0
 8001522:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001524:	4b15      	ldr	r3, [pc, #84]	@ (800157c <MX_TIM3_Init+0x94>)
 8001526:	2280      	movs	r2, #128	@ 0x80
 8001528:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800152a:	4814      	ldr	r0, [pc, #80]	@ (800157c <MX_TIM3_Init+0x94>)
 800152c:	f002 fc3c 	bl	8003da8 <HAL_TIM_Base_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001536:	f000 f8e9 	bl	800170c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800153a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800153e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001540:	f107 0308 	add.w	r3, r7, #8
 8001544:	4619      	mov	r1, r3
 8001546:	480d      	ldr	r0, [pc, #52]	@ (800157c <MX_TIM3_Init+0x94>)
 8001548:	f002 fe9a 	bl	8004280 <HAL_TIM_ConfigClockSource>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001552:	f000 f8db 	bl	800170c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001556:	2320      	movs	r3, #32
 8001558:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800155e:	463b      	mov	r3, r7
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	@ (800157c <MX_TIM3_Init+0x94>)
 8001564:	f003 fa2c 	bl	80049c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800156e:	f000 f8cd 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000180 	.word	0x20000180
 8001580:	40000400 	.word	0x40000400

08001584 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001588:	4b11      	ldr	r3, [pc, #68]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 800158a:	4a12      	ldr	r2, [pc, #72]	@ (80015d4 <MX_USART2_UART_Init+0x50>)
 800158c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800158e:	4b10      	ldr	r3, [pc, #64]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 8001590:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001594:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001596:	4b0e      	ldr	r3, [pc, #56]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800159c:	4b0c      	ldr	r3, [pc, #48]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 800159e:	2200      	movs	r2, #0
 80015a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015a2:	4b0b      	ldr	r3, [pc, #44]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a8:	4b09      	ldr	r3, [pc, #36]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015aa:	220c      	movs	r2, #12
 80015ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ae:	4b08      	ldr	r3, [pc, #32]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015b4:	4b06      	ldr	r3, [pc, #24]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ba:	4805      	ldr	r0, [pc, #20]	@ (80015d0 <MX_USART2_UART_Init+0x4c>)
 80015bc:	f003 fa6e 	bl	8004a9c <HAL_UART_Init>
 80015c0:	4603      	mov	r3, r0
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d001      	beq.n	80015ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80015c6:	f000 f8a1 	bl	800170c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015ca:	bf00      	nop
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	200001c8 	.word	0x200001c8
 80015d4:	40004400 	.word	0x40004400

080015d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b088      	sub	sp, #32
 80015dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015de:	f107 030c 	add.w	r3, r7, #12
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]
 80015ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ee:	2300      	movs	r3, #0
 80015f0:	60bb      	str	r3, [r7, #8]
 80015f2:	4b29      	ldr	r3, [pc, #164]	@ (8001698 <MX_GPIO_Init+0xc0>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	4a28      	ldr	r2, [pc, #160]	@ (8001698 <MX_GPIO_Init+0xc0>)
 80015f8:	f043 0304 	orr.w	r3, r3, #4
 80015fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015fe:	4b26      	ldr	r3, [pc, #152]	@ (8001698 <MX_GPIO_Init+0xc0>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001602:	f003 0304 	and.w	r3, r3, #4
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800160a:	2300      	movs	r3, #0
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	4b22      	ldr	r3, [pc, #136]	@ (8001698 <MX_GPIO_Init+0xc0>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	4a21      	ldr	r2, [pc, #132]	@ (8001698 <MX_GPIO_Init+0xc0>)
 8001614:	f043 0301 	orr.w	r3, r3, #1
 8001618:	6313      	str	r3, [r2, #48]	@ 0x30
 800161a:	4b1f      	ldr	r3, [pc, #124]	@ (8001698 <MX_GPIO_Init+0xc0>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	4b1b      	ldr	r3, [pc, #108]	@ (8001698 <MX_GPIO_Init+0xc0>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	4a1a      	ldr	r2, [pc, #104]	@ (8001698 <MX_GPIO_Init+0xc0>)
 8001630:	f043 0302 	orr.w	r3, r3, #2
 8001634:	6313      	str	r3, [r2, #48]	@ 0x30
 8001636:	4b18      	ldr	r3, [pc, #96]	@ (8001698 <MX_GPIO_Init+0xc0>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	f003 0302 	and.w	r3, r3, #2
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(AD8232_SDN_GPIO_Port, AD8232_SDN_Pin, GPIO_PIN_RESET);
 8001642:	2200      	movs	r2, #0
 8001644:	2101      	movs	r1, #1
 8001646:	4815      	ldr	r0, [pc, #84]	@ (800169c <MX_GPIO_Init+0xc4>)
 8001648:	f001 fae4 	bl	8002c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Chip_Select_GPIO_Port, Chip_Select_Pin, GPIO_PIN_RESET);
 800164c:	2200      	movs	r2, #0
 800164e:	2140      	movs	r1, #64	@ 0x40
 8001650:	4813      	ldr	r0, [pc, #76]	@ (80016a0 <MX_GPIO_Init+0xc8>)
 8001652:	f001 fadf 	bl	8002c14 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AD8232_SDN_Pin */
  GPIO_InitStruct.Pin = AD8232_SDN_Pin;
 8001656:	2301      	movs	r3, #1
 8001658:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800165a:	2301      	movs	r3, #1
 800165c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165e:	2300      	movs	r3, #0
 8001660:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001662:	2302      	movs	r3, #2
 8001664:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(AD8232_SDN_GPIO_Port, &GPIO_InitStruct);
 8001666:	f107 030c 	add.w	r3, r7, #12
 800166a:	4619      	mov	r1, r3
 800166c:	480b      	ldr	r0, [pc, #44]	@ (800169c <MX_GPIO_Init+0xc4>)
 800166e:	f001 f94d 	bl	800290c <HAL_GPIO_Init>

  /*Configure GPIO pin : Chip_Select_Pin */
  GPIO_InitStruct.Pin = Chip_Select_Pin;
 8001672:	2340      	movs	r3, #64	@ 0x40
 8001674:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001676:	2301      	movs	r3, #1
 8001678:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800167e:	2302      	movs	r3, #2
 8001680:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Chip_Select_GPIO_Port, &GPIO_InitStruct);
 8001682:	f107 030c 	add.w	r3, r7, #12
 8001686:	4619      	mov	r1, r3
 8001688:	4805      	ldr	r0, [pc, #20]	@ (80016a0 <MX_GPIO_Init+0xc8>)
 800168a:	f001 f93f 	bl	800290c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800168e:	bf00      	nop
 8001690:	3720      	adds	r7, #32
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	40023800 	.word	0x40023800
 800169c:	40020800 	.word	0x40020800
 80016a0:	40020400 	.word	0x40020400

080016a4 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b082      	sub	sp, #8
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
	if (is_measurement_in_progress)
 80016ac:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <HAL_ADC_ConvCpltCallback+0x2c>)
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d009      	beq.n	80016c8 <HAL_ADC_ConvCpltCallback+0x24>
	{
		adc_data = HAL_ADC_GetValue(&hadc1);
 80016b4:	4807      	ldr	r0, [pc, #28]	@ (80016d4 <HAL_ADC_ConvCpltCallback+0x30>)
 80016b6:	f000 fd2b 	bl	8002110 <HAL_ADC_GetValue>
 80016ba:	4603      	mov	r3, r0
 80016bc:	b29a      	uxth	r2, r3
 80016be:	4b06      	ldr	r3, [pc, #24]	@ (80016d8 <HAL_ADC_ConvCpltCallback+0x34>)
 80016c0:	801a      	strh	r2, [r3, #0]
		is_measure_ready = true;
 80016c2:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <HAL_ADC_ConvCpltCallback+0x38>)
 80016c4:	2201      	movs	r2, #1
 80016c6:	701a      	strb	r2, [r3, #0]
	}
}
 80016c8:	bf00      	nop
 80016ca:	3708      	adds	r7, #8
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000231 	.word	0x20000231
 80016d4:	20000098 	.word	0x20000098
 80016d8:	20000210 	.word	0x20000210
 80016dc:	20000232 	.word	0x20000232

080016e0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart2, (uint8_t*)uart_receive_buffer, 1U);
 80016e8:	2201      	movs	r2, #1
 80016ea:	4905      	ldr	r1, [pc, #20]	@ (8001700 <HAL_UART_RxCpltCallback+0x20>)
 80016ec:	4805      	ldr	r0, [pc, #20]	@ (8001704 <HAL_UART_RxCpltCallback+0x24>)
 80016ee:	f003 fab0 	bl	8004c52 <HAL_UART_Receive_IT>
	is_serial_code_received = true;
 80016f2:	4b05      	ldr	r3, [pc, #20]	@ (8001708 <HAL_UART_RxCpltCallback+0x28>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	701a      	strb	r2, [r3, #0]
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20000230 	.word	0x20000230
 8001704:	200001c8 	.word	0x200001c8
 8001708:	20000233 	.word	0x20000233

0800170c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001710:	b672      	cpsid	i
}
 8001712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001714:	bf00      	nop
 8001716:	e7fd      	b.n	8001714 <Error_Handler+0x8>

08001718 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001718:	b480      	push	{r7}
 800171a:	b083      	sub	sp, #12
 800171c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	607b      	str	r3, [r7, #4]
 8001722:	4b10      	ldr	r3, [pc, #64]	@ (8001764 <HAL_MspInit+0x4c>)
 8001724:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001726:	4a0f      	ldr	r2, [pc, #60]	@ (8001764 <HAL_MspInit+0x4c>)
 8001728:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800172c:	6453      	str	r3, [r2, #68]	@ 0x44
 800172e:	4b0d      	ldr	r3, [pc, #52]	@ (8001764 <HAL_MspInit+0x4c>)
 8001730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001732:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001736:	607b      	str	r3, [r7, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800173a:	2300      	movs	r3, #0
 800173c:	603b      	str	r3, [r7, #0]
 800173e:	4b09      	ldr	r3, [pc, #36]	@ (8001764 <HAL_MspInit+0x4c>)
 8001740:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001742:	4a08      	ldr	r2, [pc, #32]	@ (8001764 <HAL_MspInit+0x4c>)
 8001744:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001748:	6413      	str	r3, [r2, #64]	@ 0x40
 800174a:	4b06      	ldr	r3, [pc, #24]	@ (8001764 <HAL_MspInit+0x4c>)
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001752:	603b      	str	r3, [r7, #0]
 8001754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001756:	bf00      	nop
 8001758:	370c      	adds	r7, #12
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	40023800 	.word	0x40023800

08001768 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	@ 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1b      	ldr	r2, [pc, #108]	@ (80017f4 <HAL_ADC_MspInit+0x8c>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d12f      	bne.n	80017ea <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	4b1a      	ldr	r3, [pc, #104]	@ (80017f8 <HAL_ADC_MspInit+0x90>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001792:	4a19      	ldr	r2, [pc, #100]	@ (80017f8 <HAL_ADC_MspInit+0x90>)
 8001794:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001798:	6453      	str	r3, [r2, #68]	@ 0x44
 800179a:	4b17      	ldr	r3, [pc, #92]	@ (80017f8 <HAL_ADC_MspInit+0x90>)
 800179c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	2300      	movs	r3, #0
 80017a8:	60fb      	str	r3, [r7, #12]
 80017aa:	4b13      	ldr	r3, [pc, #76]	@ (80017f8 <HAL_ADC_MspInit+0x90>)
 80017ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ae:	4a12      	ldr	r2, [pc, #72]	@ (80017f8 <HAL_ADC_MspInit+0x90>)
 80017b0:	f043 0301 	orr.w	r3, r3, #1
 80017b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80017b6:	4b10      	ldr	r3, [pc, #64]	@ (80017f8 <HAL_ADC_MspInit+0x90>)
 80017b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	60fb      	str	r3, [r7, #12]
 80017c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80017c2:	2310      	movs	r3, #16
 80017c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017c6:	2303      	movs	r3, #3
 80017c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ca:	2300      	movs	r3, #0
 80017cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ce:	f107 0314 	add.w	r3, r7, #20
 80017d2:	4619      	mov	r1, r3
 80017d4:	4809      	ldr	r0, [pc, #36]	@ (80017fc <HAL_ADC_MspInit+0x94>)
 80017d6:	f001 f899 	bl	800290c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80017da:	2200      	movs	r2, #0
 80017dc:	2100      	movs	r1, #0
 80017de:	2012      	movs	r0, #18
 80017e0:	f000 ffcb 	bl	800277a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80017e4:	2012      	movs	r0, #18
 80017e6:	f000 ffe4 	bl	80027b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80017ea:	bf00      	nop
 80017ec:	3728      	adds	r7, #40	@ 0x28
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40012000 	.word	0x40012000
 80017f8:	40023800 	.word	0x40023800
 80017fc:	40020000 	.word	0x40020000

08001800 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08a      	sub	sp, #40	@ 0x28
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 0314 	add.w	r3, r7, #20
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a19      	ldr	r2, [pc, #100]	@ (8001884 <HAL_SPI_MspInit+0x84>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d12b      	bne.n	800187a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	613b      	str	r3, [r7, #16]
 8001826:	4b18      	ldr	r3, [pc, #96]	@ (8001888 <HAL_SPI_MspInit+0x88>)
 8001828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800182a:	4a17      	ldr	r2, [pc, #92]	@ (8001888 <HAL_SPI_MspInit+0x88>)
 800182c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001830:	6453      	str	r3, [r2, #68]	@ 0x44
 8001832:	4b15      	ldr	r3, [pc, #84]	@ (8001888 <HAL_SPI_MspInit+0x88>)
 8001834:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001836:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800183a:	613b      	str	r3, [r7, #16]
 800183c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
 8001842:	4b11      	ldr	r3, [pc, #68]	@ (8001888 <HAL_SPI_MspInit+0x88>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001846:	4a10      	ldr	r2, [pc, #64]	@ (8001888 <HAL_SPI_MspInit+0x88>)
 8001848:	f043 0301 	orr.w	r3, r3, #1
 800184c:	6313      	str	r3, [r2, #48]	@ 0x30
 800184e:	4b0e      	ldr	r3, [pc, #56]	@ (8001888 <HAL_SPI_MspInit+0x88>)
 8001850:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001852:	f003 0301 	and.w	r3, r3, #1
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800185a:	23e0      	movs	r3, #224	@ 0xe0
 800185c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001866:	2303      	movs	r3, #3
 8001868:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800186a:	2305      	movs	r3, #5
 800186c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 0314 	add.w	r3, r7, #20
 8001872:	4619      	mov	r1, r3
 8001874:	4805      	ldr	r0, [pc, #20]	@ (800188c <HAL_SPI_MspInit+0x8c>)
 8001876:	f001 f849 	bl	800290c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800187a:	bf00      	nop
 800187c:	3728      	adds	r7, #40	@ 0x28
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40013000 	.word	0x40013000
 8001888:	40023800 	.word	0x40023800
 800188c:	40020000 	.word	0x40020000

08001890 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001890:	b480      	push	{r7}
 8001892:	b085      	sub	sp, #20
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018a0:	d10d      	bne.n	80018be <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80018a2:	2300      	movs	r3, #0
 80018a4:	60fb      	str	r3, [r7, #12]
 80018a6:	4b09      	ldr	r3, [pc, #36]	@ (80018cc <HAL_TIM_PWM_MspInit+0x3c>)
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	4a08      	ldr	r2, [pc, #32]	@ (80018cc <HAL_TIM_PWM_MspInit+0x3c>)
 80018ac:	f043 0301 	orr.w	r3, r3, #1
 80018b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018b2:	4b06      	ldr	r3, [pc, #24]	@ (80018cc <HAL_TIM_PWM_MspInit+0x3c>)
 80018b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b6:	f003 0301 	and.w	r3, r3, #1
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80018be:	bf00      	nop
 80018c0:	3714      	adds	r7, #20
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	40023800 	.word	0x40023800

080018d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a0b      	ldr	r2, [pc, #44]	@ (800190c <HAL_TIM_Base_MspInit+0x3c>)
 80018de:	4293      	cmp	r3, r2
 80018e0:	d10d      	bne.n	80018fe <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001910 <HAL_TIM_Base_MspInit+0x40>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	4a09      	ldr	r2, [pc, #36]	@ (8001910 <HAL_TIM_Base_MspInit+0x40>)
 80018ec:	f043 0302 	orr.w	r3, r3, #2
 80018f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018f2:	4b07      	ldr	r3, [pc, #28]	@ (8001910 <HAL_TIM_Base_MspInit+0x40>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	60fb      	str	r3, [r7, #12]
 80018fc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80018fe:	bf00      	nop
 8001900:	3714      	adds	r7, #20
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	40000400 	.word	0x40000400
 8001910:	40023800 	.word	0x40023800

08001914 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001934:	d11d      	bne.n	8001972 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
 800193a:	4b10      	ldr	r3, [pc, #64]	@ (800197c <HAL_TIM_MspPostInit+0x68>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193e:	4a0f      	ldr	r2, [pc, #60]	@ (800197c <HAL_TIM_MspPostInit+0x68>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6313      	str	r3, [r2, #48]	@ 0x30
 8001946:	4b0d      	ldr	r3, [pc, #52]	@ (800197c <HAL_TIM_MspPostInit+0x68>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	60bb      	str	r3, [r7, #8]
 8001950:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001952:	2301      	movs	r3, #1
 8001954:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2300      	movs	r3, #0
 8001960:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001962:	2301      	movs	r3, #1
 8001964:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f107 030c 	add.w	r3, r7, #12
 800196a:	4619      	mov	r1, r3
 800196c:	4804      	ldr	r0, [pc, #16]	@ (8001980 <HAL_TIM_MspPostInit+0x6c>)
 800196e:	f000 ffcd 	bl	800290c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001972:	bf00      	nop
 8001974:	3720      	adds	r7, #32
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40023800 	.word	0x40023800
 8001980:	40020000 	.word	0x40020000

08001984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b08a      	sub	sp, #40	@ 0x28
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198c:	f107 0314 	add.w	r3, r7, #20
 8001990:	2200      	movs	r2, #0
 8001992:	601a      	str	r2, [r3, #0]
 8001994:	605a      	str	r2, [r3, #4]
 8001996:	609a      	str	r2, [r3, #8]
 8001998:	60da      	str	r2, [r3, #12]
 800199a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a1d      	ldr	r2, [pc, #116]	@ (8001a18 <HAL_UART_MspInit+0x94>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d133      	bne.n	8001a0e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019a6:	2300      	movs	r3, #0
 80019a8:	613b      	str	r3, [r7, #16]
 80019aa:	4b1c      	ldr	r3, [pc, #112]	@ (8001a1c <HAL_UART_MspInit+0x98>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	4a1b      	ldr	r2, [pc, #108]	@ (8001a1c <HAL_UART_MspInit+0x98>)
 80019b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80019b6:	4b19      	ldr	r3, [pc, #100]	@ (8001a1c <HAL_UART_MspInit+0x98>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019be:	613b      	str	r3, [r7, #16]
 80019c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c2:	2300      	movs	r3, #0
 80019c4:	60fb      	str	r3, [r7, #12]
 80019c6:	4b15      	ldr	r3, [pc, #84]	@ (8001a1c <HAL_UART_MspInit+0x98>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	4a14      	ldr	r2, [pc, #80]	@ (8001a1c <HAL_UART_MspInit+0x98>)
 80019cc:	f043 0301 	orr.w	r3, r3, #1
 80019d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80019d2:	4b12      	ldr	r3, [pc, #72]	@ (8001a1c <HAL_UART_MspInit+0x98>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	f003 0301 	and.w	r3, r3, #1
 80019da:	60fb      	str	r3, [r7, #12]
 80019dc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019de:	230c      	movs	r3, #12
 80019e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ea:	2303      	movs	r3, #3
 80019ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ee:	2307      	movs	r3, #7
 80019f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f2:	f107 0314 	add.w	r3, r7, #20
 80019f6:	4619      	mov	r1, r3
 80019f8:	4809      	ldr	r0, [pc, #36]	@ (8001a20 <HAL_UART_MspInit+0x9c>)
 80019fa:	f000 ff87 	bl	800290c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	2026      	movs	r0, #38	@ 0x26
 8001a04:	f000 feb9 	bl	800277a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a08:	2026      	movs	r0, #38	@ 0x26
 8001a0a:	f000 fed2 	bl	80027b2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001a0e:	bf00      	nop
 8001a10:	3728      	adds	r7, #40	@ 0x28
 8001a12:	46bd      	mov	sp, r7
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	40004400 	.word	0x40004400
 8001a1c:	40023800 	.word	0x40023800
 8001a20:	40020000 	.word	0x40020000

08001a24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a24:	b480      	push	{r7}
 8001a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a28:	bf00      	nop
 8001a2a:	e7fd      	b.n	8001a28 <NMI_Handler+0x4>

08001a2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <HardFault_Handler+0x4>

08001a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <MemManage_Handler+0x4>

08001a3c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <BusFault_Handler+0x4>

08001a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <UsageFault_Handler+0x4>

08001a4c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a50:	bf00      	nop
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5e:	bf00      	nop
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a6c:	bf00      	nop
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
	...

08001a78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	if(Timer1 > 0)
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001aac <SysTick_Handler+0x34>)
 8001a7e:	881b      	ldrh	r3, [r3, #0]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d005      	beq.n	8001a90 <SysTick_Handler+0x18>
	{
	  Timer1--;
 8001a84:	4b09      	ldr	r3, [pc, #36]	@ (8001aac <SysTick_Handler+0x34>)
 8001a86:	881b      	ldrh	r3, [r3, #0]
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	4b07      	ldr	r3, [pc, #28]	@ (8001aac <SysTick_Handler+0x34>)
 8001a8e:	801a      	strh	r2, [r3, #0]
	}
	if(Timer2 > 0)
 8001a90:	4b07      	ldr	r3, [pc, #28]	@ (8001ab0 <SysTick_Handler+0x38>)
 8001a92:	881b      	ldrh	r3, [r3, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d005      	beq.n	8001aa4 <SysTick_Handler+0x2c>
	{
	  Timer2--;
 8001a98:	4b05      	ldr	r3, [pc, #20]	@ (8001ab0 <SysTick_Handler+0x38>)
 8001a9a:	881b      	ldrh	r3, [r3, #0]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	4b03      	ldr	r3, [pc, #12]	@ (8001ab0 <SysTick_Handler+0x38>)
 8001aa2:	801a      	strh	r2, [r3, #0]
	}
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001aa4:	f000 f8de 	bl	8001c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001aa8:	bf00      	nop
 8001aaa:	bd80      	pop	{r7, pc}
 8001aac:	20000090 	.word	0x20000090
 8001ab0:	20000092 	.word	0x20000092

08001ab4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001ab8:	4802      	ldr	r0, [pc, #8]	@ (8001ac4 <ADC_IRQHandler+0x10>)
 8001aba:	f000 fa19 	bl	8001ef0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	20000098 	.word	0x20000098

08001ac8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001acc:	4802      	ldr	r0, [pc, #8]	@ (8001ad8 <USART2_IRQHandler+0x10>)
 8001ace:	f003 f8e5 	bl	8004c9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	200001c8 	.word	0x200001c8

08001adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ae4:	4a14      	ldr	r2, [pc, #80]	@ (8001b38 <_sbrk+0x5c>)
 8001ae6:	4b15      	ldr	r3, [pc, #84]	@ (8001b3c <_sbrk+0x60>)
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001af0:	4b13      	ldr	r3, [pc, #76]	@ (8001b40 <_sbrk+0x64>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d102      	bne.n	8001afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001af8:	4b11      	ldr	r3, [pc, #68]	@ (8001b40 <_sbrk+0x64>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	@ (8001b44 <_sbrk+0x68>)
 8001afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001afe:	4b10      	ldr	r3, [pc, #64]	@ (8001b40 <_sbrk+0x64>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4413      	add	r3, r2
 8001b06:	693a      	ldr	r2, [r7, #16]
 8001b08:	429a      	cmp	r2, r3
 8001b0a:	d207      	bcs.n	8001b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b0c:	f007 f97c 	bl	8008e08 <__errno>
 8001b10:	4603      	mov	r3, r0
 8001b12:	220c      	movs	r2, #12
 8001b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b16:	f04f 33ff 	mov.w	r3, #4294967295
 8001b1a:	e009      	b.n	8001b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b1c:	4b08      	ldr	r3, [pc, #32]	@ (8001b40 <_sbrk+0x64>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b22:	4b07      	ldr	r3, [pc, #28]	@ (8001b40 <_sbrk+0x64>)
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	4413      	add	r3, r2
 8001b2a:	4a05      	ldr	r2, [pc, #20]	@ (8001b40 <_sbrk+0x64>)
 8001b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
}
 8001b30:	4618      	mov	r0, r3
 8001b32:	3718      	adds	r7, #24
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	20020000 	.word	0x20020000
 8001b3c:	00000400 	.word	0x00000400
 8001b40:	200022cc 	.word	0x200022cc
 8001b44:	20002658 	.word	0x20002658

08001b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b4c:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <SystemInit+0x20>)
 8001b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b52:	4a05      	ldr	r2, [pc, #20]	@ (8001b68 <SystemInit+0x20>)
 8001b54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b6c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001ba4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b70:	480d      	ldr	r0, [pc, #52]	@ (8001ba8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b72:	490e      	ldr	r1, [pc, #56]	@ (8001bac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b74:	4a0e      	ldr	r2, [pc, #56]	@ (8001bb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b78:	e002      	b.n	8001b80 <LoopCopyDataInit>

08001b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7e:	3304      	adds	r3, #4

08001b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b84:	d3f9      	bcc.n	8001b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b86:	4a0b      	ldr	r2, [pc, #44]	@ (8001bb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b88:	4c0b      	ldr	r4, [pc, #44]	@ (8001bb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b8c:	e001      	b.n	8001b92 <LoopFillZerobss>

08001b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b90:	3204      	adds	r2, #4

08001b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b94:	d3fb      	bcc.n	8001b8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b96:	f7ff ffd7 	bl	8001b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b9a:	f007 f93b 	bl	8008e14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9e:	f7ff fad7 	bl	8001150 <main>
  bx  lr    
 8001ba2:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ba4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bac:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001bb0:	08009c14 	.word	0x08009c14
  ldr r2, =_sbss
 8001bb4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001bb8:	20002658 	.word	0x20002658

08001bbc <DMA1_Stream0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <DMA1_Stream0_IRQHandler>
	...

08001bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c00 <HAL_Init+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c00 <HAL_Init+0x40>)
 8001bca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c00 <HAL_Init+0x40>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c00 <HAL_Init+0x40>)
 8001bd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bdc:	4b08      	ldr	r3, [pc, #32]	@ (8001c00 <HAL_Init+0x40>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a07      	ldr	r2, [pc, #28]	@ (8001c00 <HAL_Init+0x40>)
 8001be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be8:	2003      	movs	r0, #3
 8001bea:	f000 fdbb 	bl	8002764 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bee:	200f      	movs	r0, #15
 8001bf0:	f000 f808 	bl	8001c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf4:	f7ff fd90 	bl	8001718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023c00 	.word	0x40023c00

08001c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c0c:	4b12      	ldr	r3, [pc, #72]	@ (8001c58 <HAL_InitTick+0x54>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b12      	ldr	r3, [pc, #72]	@ (8001c5c <HAL_InitTick+0x58>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	4619      	mov	r1, r3
 8001c16:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 fdd3 	bl	80027ce <HAL_SYSTICK_Config>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00e      	b.n	8001c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b0f      	cmp	r3, #15
 8001c36:	d80a      	bhi.n	8001c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f000 fd9b 	bl	800277a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c44:	4a06      	ldr	r2, [pc, #24]	@ (8001c60 <HAL_InitTick+0x5c>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e000      	b.n	8001c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000004 	.word	0x20000004
 8001c5c:	2000000c 	.word	0x2000000c
 8001c60:	20000008 	.word	0x20000008

08001c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c68:	4b06      	ldr	r3, [pc, #24]	@ (8001c84 <HAL_IncTick+0x20>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b06      	ldr	r3, [pc, #24]	@ (8001c88 <HAL_IncTick+0x24>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	4a04      	ldr	r2, [pc, #16]	@ (8001c88 <HAL_IncTick+0x24>)
 8001c76:	6013      	str	r3, [r2, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	2000000c 	.word	0x2000000c
 8001c88:	200022d0 	.word	0x200022d0

08001c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c90:	4b03      	ldr	r3, [pc, #12]	@ (8001ca0 <HAL_GetTick+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	200022d0 	.word	0x200022d0

08001ca4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001cac:	f7ff ffee 	bl	8001c8c <HAL_GetTick>
 8001cb0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cbc:	d005      	beq.n	8001cca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <HAL_Delay+0x44>)
 8001cc0:	781b      	ldrb	r3, [r3, #0]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001cca:	bf00      	nop
 8001ccc:	f7ff ffde 	bl	8001c8c <HAL_GetTick>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	68bb      	ldr	r3, [r7, #8]
 8001cd4:	1ad3      	subs	r3, r2, r3
 8001cd6:	68fa      	ldr	r2, [r7, #12]
 8001cd8:	429a      	cmp	r2, r3
 8001cda:	d8f7      	bhi.n	8001ccc <HAL_Delay+0x28>
  {
  }
}
 8001cdc:	bf00      	nop
 8001cde:	bf00      	nop
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	2000000c 	.word	0x2000000c

08001cec <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b084      	sub	sp, #16
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d101      	bne.n	8001d02 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e033      	b.n	8001d6a <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d109      	bne.n	8001d1e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff fd2c 	bl	8001768 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	2200      	movs	r2, #0
 8001d1a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d22:	f003 0310 	and.w	r3, r3, #16
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d118      	bne.n	8001d5c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001d32:	f023 0302 	bic.w	r3, r3, #2
 8001d36:	f043 0202 	orr.w	r2, r3, #2
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001d3e:	6878      	ldr	r0, [r7, #4]
 8001d40:	f000 fb3a 	bl	80023b8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2200      	movs	r2, #0
 8001d48:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d4e:	f023 0303 	bic.w	r3, r3, #3
 8001d52:	f043 0201 	orr.w	r2, r3, #1
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	641a      	str	r2, [r3, #64]	@ 0x40
 8001d5a:	e001      	b.n	8001d60 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2200      	movs	r2, #0
 8001d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3710      	adds	r7, #16
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_ADC_Start_IT+0x1a>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e0a1      	b.n	8001ed2 <HAL_ADC_Start_IT+0x15e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 0301 	and.w	r3, r3, #1
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d018      	beq.n	8001dd6 <HAL_ADC_Start_IT+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	689a      	ldr	r2, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f042 0201 	orr.w	r2, r2, #1
 8001db2:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001db4:	4b4a      	ldr	r3, [pc, #296]	@ (8001ee0 <HAL_ADC_Start_IT+0x16c>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a4a      	ldr	r2, [pc, #296]	@ (8001ee4 <HAL_ADC_Start_IT+0x170>)
 8001dba:	fba2 2303 	umull	r2, r3, r2, r3
 8001dbe:	0c9a      	lsrs	r2, r3, #18
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	005b      	lsls	r3, r3, #1
 8001dc4:	4413      	add	r3, r2
 8001dc6:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001dc8:	e002      	b.n	8001dd0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 8001dca:	68bb      	ldr	r3, [r7, #8]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8001dd0:	68bb      	ldr	r3, [r7, #8]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f9      	bne.n	8001dca <HAL_ADC_Start_IT+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	f003 0301 	and.w	r3, r3, #1
 8001de0:	2b01      	cmp	r3, #1
 8001de2:	d169      	bne.n	8001eb8 <HAL_ADC_Start_IT+0x144>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de8:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8001dec:	f023 0301 	bic.w	r3, r3, #1
 8001df0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	685b      	ldr	r3, [r3, #4]
 8001dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d007      	beq.n	8001e16 <HAL_ADC_Start_IT+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001e0e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e1e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e22:	d106      	bne.n	8001e32 <HAL_ADC_Start_IT+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e28:	f023 0206 	bic.w	r2, r3, #6
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	645a      	str	r2, [r3, #68]	@ 0x44
 8001e30:	e002      	b.n	8001e38 <HAL_ADC_Start_IT+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e40:	4b29      	ldr	r3, [pc, #164]	@ (8001ee8 <HAL_ADC_Start_IT+0x174>)
 8001e42:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8001e4c:	601a      	str	r2, [r3, #0]

    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	6812      	ldr	r2, [r2, #0]
 8001e58:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001e5c:	f043 0320 	orr.w	r3, r3, #32
 8001e60:	6053      	str	r3, [r2, #4]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d10f      	bne.n	8001e8e <HAL_ADC_Start_IT+0x11a>
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d129      	bne.n	8001ed0 <HAL_ADC_Start_IT+0x15c>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	689a      	ldr	r2, [r3, #8]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	e020      	b.n	8001ed0 <HAL_ADC_Start_IT+0x15c>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a16      	ldr	r2, [pc, #88]	@ (8001eec <HAL_ADC_Start_IT+0x178>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d11b      	bne.n	8001ed0 <HAL_ADC_Start_IT+0x15c>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d114      	bne.n	8001ed0 <HAL_ADC_Start_IT+0x15c>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	689a      	ldr	r2, [r3, #8]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001eb4:	609a      	str	r2, [r3, #8]
 8001eb6:	e00b      	b.n	8001ed0 <HAL_ADC_Start_IT+0x15c>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ebc:	f043 0210 	orr.w	r2, r3, #16
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ec8:	f043 0201 	orr.w	r2, r3, #1
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3714      	adds	r7, #20
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001edc:	4770      	bx	lr
 8001ede:	bf00      	nop
 8001ee0:	20000004 	.word	0x20000004
 8001ee4:	431bde83 	.word	0x431bde83
 8001ee8:	40012300 	.word	0x40012300
 8001eec:	40012000 	.word	0x40012000

08001ef0 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	617b      	str	r3, [r7, #20]
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	f003 0302 	and.w	r3, r3, #2
 8001f16:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001f18:	68bb      	ldr	r3, [r7, #8]
 8001f1a:	f003 0320 	and.w	r3, r3, #32
 8001f1e:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8001f20:	697b      	ldr	r3, [r7, #20]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d049      	beq.n	8001fba <HAL_ADC_IRQHandler+0xca>
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d046      	beq.n	8001fba <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f30:	f003 0310 	and.w	r3, r3, #16
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d105      	bne.n	8001f44 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	641a      	str	r2, [r3, #64]	@ 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	689b      	ldr	r3, [r3, #8]
 8001f4a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d12b      	bne.n	8001faa <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d127      	bne.n	8001faa <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f60:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d006      	beq.n	8001f76 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	689b      	ldr	r3, [r3, #8]
 8001f6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d119      	bne.n	8001faa <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	685a      	ldr	r2, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f022 0220 	bic.w	r2, r2, #32
 8001f84:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f8a:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d105      	bne.n	8001faa <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	f043 0201 	orr.w	r2, r3, #1
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f7ff fb7a 	bl	80016a4 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f06f 0212 	mvn.w	r2, #18
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	f003 0304 	and.w	r3, r3, #4
 8001fc0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fc8:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d057      	beq.n	8002080 <HAL_ADC_IRQHandler+0x190>
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d054      	beq.n	8002080 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fda:	f003 0310 	and.w	r3, r3, #16
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d105      	bne.n	8001fee <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe6:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d139      	bne.n	8002070 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002002:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8002006:	2b00      	cmp	r3, #0
 8002008:	d006      	beq.n	8002018 <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8002014:	2b00      	cmp	r3, #0
 8002016:	d12b      	bne.n	8002070 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8002022:	2b00      	cmp	r3, #0
 8002024:	d124      	bne.n	8002070 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	689b      	ldr	r3, [r3, #8]
 800202c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8002030:	2b00      	cmp	r3, #0
 8002032:	d11d      	bne.n	8002070 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8002038:	2b00      	cmp	r3, #0
 800203a:	d119      	bne.n	8002070 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	685a      	ldr	r2, [r3, #4]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800204a:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002050:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	641a      	str	r2, [r3, #64]	@ 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800205c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002060:	2b00      	cmp	r3, #0
 8002062:	d105      	bne.n	8002070 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002068:	f043 0201 	orr.w	r2, r3, #1
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f000 fa9d 	bl	80025b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f06f 020c 	mvn.w	r2, #12
 800207e:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	f003 0301 	and.w	r3, r3, #1
 8002086:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800208e:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 8002090:	697b      	ldr	r3, [r7, #20]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d017      	beq.n	80020c6 <HAL_ADC_IRQHandler+0x1d6>
 8002096:	693b      	ldr	r3, [r7, #16]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d014      	beq.n	80020c6 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	2b01      	cmp	r3, #1
 80020a8:	d10d      	bne.n	80020c6 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ae:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 f837 	bl	800212a <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f06f 0201 	mvn.w	r2, #1
 80020c4:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	f003 0320 	and.w	r3, r3, #32
 80020cc:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020d4:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d015      	beq.n	8002108 <HAL_ADC_IRQHandler+0x218>
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d012      	beq.n	8002108 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e6:	f043 0202 	orr.w	r2, r3, #2
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f06f 0220 	mvn.w	r2, #32
 80020f6:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f000 f820 	bl	800213e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f06f 0220 	mvn.w	r2, #32
 8002106:	601a      	str	r2, [r3, #0]
  }
}
 8002108:	bf00      	nop
 800210a:	3718      	adds	r7, #24
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}

08002110 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002110:	b480      	push	{r7}
 8002112:	b083      	sub	sp, #12
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800211e:	4618      	mov	r0, r3
 8002120:	370c      	adds	r7, #12
 8002122:	46bd      	mov	sp, r7
 8002124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002128:	4770      	bx	lr

0800212a <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800212a:	b480      	push	{r7}
 800212c:	b083      	sub	sp, #12
 800212e:	af00      	add	r7, sp, #0
 8002130:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002146:	bf00      	nop
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800215e:	2300      	movs	r3, #0
 8002160:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002168:	2b01      	cmp	r3, #1
 800216a:	d101      	bne.n	8002170 <HAL_ADC_ConfigChannel+0x1c>
 800216c:	2302      	movs	r3, #2
 800216e:	e113      	b.n	8002398 <HAL_ADC_ConfigChannel+0x244>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	2201      	movs	r2, #1
 8002174:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b09      	cmp	r3, #9
 800217e:	d925      	bls.n	80021cc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	68d9      	ldr	r1, [r3, #12]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	b29b      	uxth	r3, r3
 800218c:	461a      	mov	r2, r3
 800218e:	4613      	mov	r3, r2
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	4413      	add	r3, r2
 8002194:	3b1e      	subs	r3, #30
 8002196:	2207      	movs	r2, #7
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43da      	mvns	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	400a      	ands	r2, r1
 80021a4:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	68d9      	ldr	r1, [r3, #12]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	689a      	ldr	r2, [r3, #8]
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	b29b      	uxth	r3, r3
 80021b6:	4618      	mov	r0, r3
 80021b8:	4603      	mov	r3, r0
 80021ba:	005b      	lsls	r3, r3, #1
 80021bc:	4403      	add	r3, r0
 80021be:	3b1e      	subs	r3, #30
 80021c0:	409a      	lsls	r2, r3
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	60da      	str	r2, [r3, #12]
 80021ca:	e022      	b.n	8002212 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6919      	ldr	r1, [r3, #16]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	461a      	mov	r2, r3
 80021da:	4613      	mov	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	4413      	add	r3, r2
 80021e0:	2207      	movs	r2, #7
 80021e2:	fa02 f303 	lsl.w	r3, r2, r3
 80021e6:	43da      	mvns	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	400a      	ands	r2, r1
 80021ee:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	6919      	ldr	r1, [r3, #16]
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	689a      	ldr	r2, [r3, #8]
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	b29b      	uxth	r3, r3
 8002200:	4618      	mov	r0, r3
 8002202:	4603      	mov	r3, r0
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4403      	add	r3, r0
 8002208:	409a      	lsls	r2, r3
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	430a      	orrs	r2, r1
 8002210:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b06      	cmp	r3, #6
 8002218:	d824      	bhi.n	8002264 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685a      	ldr	r2, [r3, #4]
 8002224:	4613      	mov	r3, r2
 8002226:	009b      	lsls	r3, r3, #2
 8002228:	4413      	add	r3, r2
 800222a:	3b05      	subs	r3, #5
 800222c:	221f      	movs	r2, #31
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43da      	mvns	r2, r3
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	400a      	ands	r2, r1
 800223a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	b29b      	uxth	r3, r3
 8002248:	4618      	mov	r0, r3
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685a      	ldr	r2, [r3, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	3b05      	subs	r3, #5
 8002256:	fa00 f203 	lsl.w	r2, r0, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	430a      	orrs	r2, r1
 8002260:	635a      	str	r2, [r3, #52]	@ 0x34
 8002262:	e04c      	b.n	80022fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	2b0c      	cmp	r3, #12
 800226a:	d824      	bhi.n	80022b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685a      	ldr	r2, [r3, #4]
 8002276:	4613      	mov	r3, r2
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	4413      	add	r3, r2
 800227c:	3b23      	subs	r3, #35	@ 0x23
 800227e:	221f      	movs	r2, #31
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	43da      	mvns	r2, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	400a      	ands	r2, r1
 800228c:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002294:	683b      	ldr	r3, [r7, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	b29b      	uxth	r3, r3
 800229a:	4618      	mov	r0, r3
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685a      	ldr	r2, [r3, #4]
 80022a0:	4613      	mov	r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	4413      	add	r3, r2
 80022a6:	3b23      	subs	r3, #35	@ 0x23
 80022a8:	fa00 f203 	lsl.w	r2, r0, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80022b4:	e023      	b.n	80022fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685a      	ldr	r2, [r3, #4]
 80022c0:	4613      	mov	r3, r2
 80022c2:	009b      	lsls	r3, r3, #2
 80022c4:	4413      	add	r3, r2
 80022c6:	3b41      	subs	r3, #65	@ 0x41
 80022c8:	221f      	movs	r2, #31
 80022ca:	fa02 f303 	lsl.w	r3, r2, r3
 80022ce:	43da      	mvns	r2, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	400a      	ands	r2, r1
 80022d6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80022de:	683b      	ldr	r3, [r7, #0]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	4618      	mov	r0, r3
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	685a      	ldr	r2, [r3, #4]
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	3b41      	subs	r3, #65	@ 0x41
 80022f2:	fa00 f203 	lsl.w	r2, r0, r3
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80022fe:	4b29      	ldr	r3, [pc, #164]	@ (80023a4 <HAL_ADC_ConfigChannel+0x250>)
 8002300:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a28      	ldr	r2, [pc, #160]	@ (80023a8 <HAL_ADC_ConfigChannel+0x254>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d10f      	bne.n	800232c <HAL_ADC_ConfigChannel+0x1d8>
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	2b12      	cmp	r3, #18
 8002312:	d10b      	bne.n	800232c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	685b      	ldr	r3, [r3, #4]
 8002318:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a1d      	ldr	r2, [pc, #116]	@ (80023a8 <HAL_ADC_ConfigChannel+0x254>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d12b      	bne.n	800238e <HAL_ADC_ConfigChannel+0x23a>
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4a1c      	ldr	r2, [pc, #112]	@ (80023ac <HAL_ADC_ConfigChannel+0x258>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d003      	beq.n	8002348 <HAL_ADC_ConfigChannel+0x1f4>
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	2b11      	cmp	r3, #17
 8002346:	d122      	bne.n	800238e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a11      	ldr	r2, [pc, #68]	@ (80023ac <HAL_ADC_ConfigChannel+0x258>)
 8002366:	4293      	cmp	r3, r2
 8002368:	d111      	bne.n	800238e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800236a:	4b11      	ldr	r3, [pc, #68]	@ (80023b0 <HAL_ADC_ConfigChannel+0x25c>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a11      	ldr	r2, [pc, #68]	@ (80023b4 <HAL_ADC_ConfigChannel+0x260>)
 8002370:	fba2 2303 	umull	r2, r3, r2, r3
 8002374:	0c9a      	lsrs	r2, r3, #18
 8002376:	4613      	mov	r3, r2
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	4413      	add	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002380:	e002      	b.n	8002388 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002382:	68bb      	ldr	r3, [r7, #8]
 8002384:	3b01      	subs	r3, #1
 8002386:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d1f9      	bne.n	8002382 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002396:	2300      	movs	r3, #0
}
 8002398:	4618      	mov	r0, r3
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	40012300 	.word	0x40012300
 80023a8:	40012000 	.word	0x40012000
 80023ac:	10000012 	.word	0x10000012
 80023b0:	20000004 	.word	0x20000004
 80023b4:	431bde83 	.word	0x431bde83

080023b8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b085      	sub	sp, #20
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80023c0:	4b79      	ldr	r3, [pc, #484]	@ (80025a8 <ADC_Init+0x1f0>)
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	685a      	ldr	r2, [r3, #4]
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	431a      	orrs	r2, r3
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	685a      	ldr	r2, [r3, #4]
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80023ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	6859      	ldr	r1, [r3, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	021a      	lsls	r2, r3, #8
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	685a      	ldr	r2, [r3, #4]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002410:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	6859      	ldr	r1, [r3, #4]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	689a      	ldr	r2, [r3, #8]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	430a      	orrs	r2, r1
 8002422:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689a      	ldr	r2, [r3, #8]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002432:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	6899      	ldr	r1, [r3, #8]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	68da      	ldr	r2, [r3, #12]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	430a      	orrs	r2, r1
 8002444:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800244a:	4a58      	ldr	r2, [pc, #352]	@ (80025ac <ADC_Init+0x1f4>)
 800244c:	4293      	cmp	r3, r2
 800244e:	d022      	beq.n	8002496 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	689a      	ldr	r2, [r3, #8]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800245e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	6899      	ldr	r1, [r3, #8]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	430a      	orrs	r2, r1
 8002470:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	689a      	ldr	r2, [r3, #8]
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002480:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	6899      	ldr	r1, [r3, #8]
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	430a      	orrs	r2, r1
 8002492:	609a      	str	r2, [r3, #8]
 8002494:	e00f      	b.n	80024b6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80024a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80024b4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f022 0202 	bic.w	r2, r2, #2
 80024c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	6899      	ldr	r1, [r3, #8]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	7e1b      	ldrb	r3, [r3, #24]
 80024d0:	005a      	lsls	r2, r3, #1
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	430a      	orrs	r2, r1
 80024d8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d01b      	beq.n	800251c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80024f2:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	685a      	ldr	r2, [r3, #4]
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002502:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	6859      	ldr	r1, [r3, #4]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800250e:	3b01      	subs	r3, #1
 8002510:	035a      	lsls	r2, r3, #13
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	605a      	str	r2, [r3, #4]
 800251a:	e007      	b.n	800252c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	685a      	ldr	r2, [r3, #4]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800252a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800253a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	69db      	ldr	r3, [r3, #28]
 8002546:	3b01      	subs	r3, #1
 8002548:	051a      	lsls	r2, r3, #20
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	430a      	orrs	r2, r1
 8002550:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	689a      	ldr	r2, [r3, #8]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002560:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	6899      	ldr	r1, [r3, #8]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800256e:	025a      	lsls	r2, r3, #9
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	430a      	orrs	r2, r1
 8002576:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	689a      	ldr	r2, [r3, #8]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002586:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6899      	ldr	r1, [r3, #8]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	695b      	ldr	r3, [r3, #20]
 8002592:	029a      	lsls	r2, r3, #10
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	430a      	orrs	r2, r1
 800259a:	609a      	str	r2, [r3, #8]
}
 800259c:	bf00      	nop
 800259e:	3714      	adds	r7, #20
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	40012300 	.word	0x40012300
 80025ac:	0f000001 	.word	0x0f000001

080025b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80025b8:	bf00      	nop
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80025d4:	4b0c      	ldr	r3, [pc, #48]	@ (8002608 <__NVIC_SetPriorityGrouping+0x44>)
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80025da:	68ba      	ldr	r2, [r7, #8]
 80025dc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80025e0:	4013      	ands	r3, r2
 80025e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80025ec:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80025f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025f6:	4a04      	ldr	r2, [pc, #16]	@ (8002608 <__NVIC_SetPriorityGrouping+0x44>)
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	60d3      	str	r3, [r2, #12]
}
 80025fc:	bf00      	nop
 80025fe:	3714      	adds	r7, #20
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr
 8002608:	e000ed00 	.word	0xe000ed00

0800260c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002610:	4b04      	ldr	r3, [pc, #16]	@ (8002624 <__NVIC_GetPriorityGrouping+0x18>)
 8002612:	68db      	ldr	r3, [r3, #12]
 8002614:	0a1b      	lsrs	r3, r3, #8
 8002616:	f003 0307 	and.w	r3, r3, #7
}
 800261a:	4618      	mov	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002622:	4770      	bx	lr
 8002624:	e000ed00 	.word	0xe000ed00

08002628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	4603      	mov	r3, r0
 8002630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002636:	2b00      	cmp	r3, #0
 8002638:	db0b      	blt.n	8002652 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	f003 021f 	and.w	r2, r3, #31
 8002640:	4907      	ldr	r1, [pc, #28]	@ (8002660 <__NVIC_EnableIRQ+0x38>)
 8002642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002646:	095b      	lsrs	r3, r3, #5
 8002648:	2001      	movs	r0, #1
 800264a:	fa00 f202 	lsl.w	r2, r0, r2
 800264e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002652:	bf00      	nop
 8002654:	370c      	adds	r7, #12
 8002656:	46bd      	mov	sp, r7
 8002658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265c:	4770      	bx	lr
 800265e:	bf00      	nop
 8002660:	e000e100 	.word	0xe000e100

08002664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	4603      	mov	r3, r0
 800266c:	6039      	str	r1, [r7, #0]
 800266e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002674:	2b00      	cmp	r3, #0
 8002676:	db0a      	blt.n	800268e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	b2da      	uxtb	r2, r3
 800267c:	490c      	ldr	r1, [pc, #48]	@ (80026b0 <__NVIC_SetPriority+0x4c>)
 800267e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002682:	0112      	lsls	r2, r2, #4
 8002684:	b2d2      	uxtb	r2, r2
 8002686:	440b      	add	r3, r1
 8002688:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800268c:	e00a      	b.n	80026a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	b2da      	uxtb	r2, r3
 8002692:	4908      	ldr	r1, [pc, #32]	@ (80026b4 <__NVIC_SetPriority+0x50>)
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	f003 030f 	and.w	r3, r3, #15
 800269a:	3b04      	subs	r3, #4
 800269c:	0112      	lsls	r2, r2, #4
 800269e:	b2d2      	uxtb	r2, r2
 80026a0:	440b      	add	r3, r1
 80026a2:	761a      	strb	r2, [r3, #24]
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr
 80026b0:	e000e100 	.word	0xe000e100
 80026b4:	e000ed00 	.word	0xe000ed00

080026b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b089      	sub	sp, #36	@ 0x24
 80026bc:	af00      	add	r7, sp, #0
 80026be:	60f8      	str	r0, [r7, #12]
 80026c0:	60b9      	str	r1, [r7, #8]
 80026c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f003 0307 	and.w	r3, r3, #7
 80026ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	f1c3 0307 	rsb	r3, r3, #7
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	bf28      	it	cs
 80026d6:	2304      	movcs	r3, #4
 80026d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80026da:	69fb      	ldr	r3, [r7, #28]
 80026dc:	3304      	adds	r3, #4
 80026de:	2b06      	cmp	r3, #6
 80026e0:	d902      	bls.n	80026e8 <NVIC_EncodePriority+0x30>
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	3b03      	subs	r3, #3
 80026e6:	e000      	b.n	80026ea <NVIC_EncodePriority+0x32>
 80026e8:	2300      	movs	r3, #0
 80026ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026ec:	f04f 32ff 	mov.w	r2, #4294967295
 80026f0:	69bb      	ldr	r3, [r7, #24]
 80026f2:	fa02 f303 	lsl.w	r3, r2, r3
 80026f6:	43da      	mvns	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	401a      	ands	r2, r3
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002700:	f04f 31ff 	mov.w	r1, #4294967295
 8002704:	697b      	ldr	r3, [r7, #20]
 8002706:	fa01 f303 	lsl.w	r3, r1, r3
 800270a:	43d9      	mvns	r1, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002710:	4313      	orrs	r3, r2
         );
}
 8002712:	4618      	mov	r0, r3
 8002714:	3724      	adds	r7, #36	@ 0x24
 8002716:	46bd      	mov	sp, r7
 8002718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271c:	4770      	bx	lr
	...

08002720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	b082      	sub	sp, #8
 8002724:	af00      	add	r7, sp, #0
 8002726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	3b01      	subs	r3, #1
 800272c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002730:	d301      	bcc.n	8002736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002732:	2301      	movs	r3, #1
 8002734:	e00f      	b.n	8002756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002736:	4a0a      	ldr	r2, [pc, #40]	@ (8002760 <SysTick_Config+0x40>)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	3b01      	subs	r3, #1
 800273c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800273e:	210f      	movs	r1, #15
 8002740:	f04f 30ff 	mov.w	r0, #4294967295
 8002744:	f7ff ff8e 	bl	8002664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002748:	4b05      	ldr	r3, [pc, #20]	@ (8002760 <SysTick_Config+0x40>)
 800274a:	2200      	movs	r2, #0
 800274c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800274e:	4b04      	ldr	r3, [pc, #16]	@ (8002760 <SysTick_Config+0x40>)
 8002750:	2207      	movs	r2, #7
 8002752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002754:	2300      	movs	r3, #0
}
 8002756:	4618      	mov	r0, r3
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	e000e010 	.word	0xe000e010

08002764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b082      	sub	sp, #8
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800276c:	6878      	ldr	r0, [r7, #4]
 800276e:	f7ff ff29 	bl	80025c4 <__NVIC_SetPriorityGrouping>
}
 8002772:	bf00      	nop
 8002774:	3708      	adds	r7, #8
 8002776:	46bd      	mov	sp, r7
 8002778:	bd80      	pop	{r7, pc}

0800277a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800277a:	b580      	push	{r7, lr}
 800277c:	b086      	sub	sp, #24
 800277e:	af00      	add	r7, sp, #0
 8002780:	4603      	mov	r3, r0
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	607a      	str	r2, [r7, #4]
 8002786:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002788:	2300      	movs	r3, #0
 800278a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800278c:	f7ff ff3e 	bl	800260c <__NVIC_GetPriorityGrouping>
 8002790:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002792:	687a      	ldr	r2, [r7, #4]
 8002794:	68b9      	ldr	r1, [r7, #8]
 8002796:	6978      	ldr	r0, [r7, #20]
 8002798:	f7ff ff8e 	bl	80026b8 <NVIC_EncodePriority>
 800279c:	4602      	mov	r2, r0
 800279e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7ff ff5d 	bl	8002664 <__NVIC_SetPriority>
}
 80027aa:	bf00      	nop
 80027ac:	3718      	adds	r7, #24
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}

080027b2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027b2:	b580      	push	{r7, lr}
 80027b4:	b082      	sub	sp, #8
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	4603      	mov	r3, r0
 80027ba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80027bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff ff31 	bl	8002628 <__NVIC_EnableIRQ>
}
 80027c6:	bf00      	nop
 80027c8:	3708      	adds	r7, #8
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}

080027ce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80027ce:	b580      	push	{r7, lr}
 80027d0:	b082      	sub	sp, #8
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f7ff ffa2 	bl	8002720 <SysTick_Config>
 80027dc:	4603      	mov	r3, r0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b084      	sub	sp, #16
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80027f4:	f7ff fa4a 	bl	8001c8c <HAL_GetTick>
 80027f8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b02      	cmp	r3, #2
 8002804:	d008      	beq.n	8002818 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2280      	movs	r2, #128	@ 0x80
 800280a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e052      	b.n	80028be <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f022 0216 	bic.w	r2, r2, #22
 8002826:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	695a      	ldr	r2, [r3, #20]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002836:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283c:	2b00      	cmp	r3, #0
 800283e:	d103      	bne.n	8002848 <HAL_DMA_Abort+0x62>
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002844:	2b00      	cmp	r3, #0
 8002846:	d007      	beq.n	8002858 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0208 	bic.w	r2, r2, #8
 8002856:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f022 0201 	bic.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002868:	e013      	b.n	8002892 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800286a:	f7ff fa0f 	bl	8001c8c <HAL_GetTick>
 800286e:	4602      	mov	r2, r0
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	1ad3      	subs	r3, r2, r3
 8002874:	2b05      	cmp	r3, #5
 8002876:	d90c      	bls.n	8002892 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2220      	movs	r2, #32
 800287c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2203      	movs	r2, #3
 8002882:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e015      	b.n	80028be <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0301 	and.w	r3, r3, #1
 800289c:	2b00      	cmp	r3, #0
 800289e:	d1e4      	bne.n	800286a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a4:	223f      	movs	r2, #63	@ 0x3f
 80028a6:	409a      	lsls	r2, r3
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}

080028c6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028c6:	b480      	push	{r7}
 80028c8:	b083      	sub	sp, #12
 80028ca:	af00      	add	r7, sp, #0
 80028cc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b02      	cmp	r3, #2
 80028d8:	d004      	beq.n	80028e4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2280      	movs	r2, #128	@ 0x80
 80028de:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80028e0:	2301      	movs	r3, #1
 80028e2:	e00c      	b.n	80028fe <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2205      	movs	r2, #5
 80028e8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f022 0201 	bic.w	r2, r2, #1
 80028fa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80028fc:	2300      	movs	r3, #0
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
	...

0800290c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800290c:	b480      	push	{r7}
 800290e:	b089      	sub	sp, #36	@ 0x24
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
 8002914:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800291a:	2300      	movs	r3, #0
 800291c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800291e:	2300      	movs	r3, #0
 8002920:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002922:	2300      	movs	r3, #0
 8002924:	61fb      	str	r3, [r7, #28]
 8002926:	e159      	b.n	8002bdc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002928:	2201      	movs	r2, #1
 800292a:	69fb      	ldr	r3, [r7, #28]
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	4013      	ands	r3, r2
 800293a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800293c:	693a      	ldr	r2, [r7, #16]
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	429a      	cmp	r2, r3
 8002942:	f040 8148 	bne.w	8002bd6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685b      	ldr	r3, [r3, #4]
 800294a:	f003 0303 	and.w	r3, r3, #3
 800294e:	2b01      	cmp	r3, #1
 8002950:	d005      	beq.n	800295e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800295a:	2b02      	cmp	r3, #2
 800295c:	d130      	bne.n	80029c0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689b      	ldr	r3, [r3, #8]
 8002962:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	005b      	lsls	r3, r3, #1
 8002968:	2203      	movs	r2, #3
 800296a:	fa02 f303 	lsl.w	r3, r2, r3
 800296e:	43db      	mvns	r3, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4013      	ands	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	68da      	ldr	r2, [r3, #12]
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	005b      	lsls	r3, r3, #1
 800297e:	fa02 f303 	lsl.w	r3, r2, r3
 8002982:	69ba      	ldr	r2, [r7, #24]
 8002984:	4313      	orrs	r3, r2
 8002986:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002994:	2201      	movs	r2, #1
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	fa02 f303 	lsl.w	r3, r2, r3
 800299c:	43db      	mvns	r3, r3
 800299e:	69ba      	ldr	r2, [r7, #24]
 80029a0:	4013      	ands	r3, r2
 80029a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	091b      	lsrs	r3, r3, #4
 80029aa:	f003 0201 	and.w	r2, r3, #1
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	69ba      	ldr	r2, [r7, #24]
 80029b6:	4313      	orrs	r3, r2
 80029b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	f003 0303 	and.w	r3, r3, #3
 80029c8:	2b03      	cmp	r3, #3
 80029ca:	d017      	beq.n	80029fc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	68db      	ldr	r3, [r3, #12]
 80029d0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	2203      	movs	r2, #3
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	69ba      	ldr	r2, [r7, #24]
 80029e0:	4013      	ands	r3, r2
 80029e2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	689a      	ldr	r2, [r3, #8]
 80029e8:	69fb      	ldr	r3, [r7, #28]
 80029ea:	005b      	lsls	r3, r3, #1
 80029ec:	fa02 f303 	lsl.w	r3, r2, r3
 80029f0:	69ba      	ldr	r2, [r7, #24]
 80029f2:	4313      	orrs	r3, r2
 80029f4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f003 0303 	and.w	r3, r3, #3
 8002a04:	2b02      	cmp	r3, #2
 8002a06:	d123      	bne.n	8002a50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a08:	69fb      	ldr	r3, [r7, #28]
 8002a0a:	08da      	lsrs	r2, r3, #3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	3208      	adds	r2, #8
 8002a10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	f003 0307 	and.w	r3, r3, #7
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	220f      	movs	r2, #15
 8002a20:	fa02 f303 	lsl.w	r3, r2, r3
 8002a24:	43db      	mvns	r3, r3
 8002a26:	69ba      	ldr	r2, [r7, #24]
 8002a28:	4013      	ands	r3, r2
 8002a2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	691a      	ldr	r2, [r3, #16]
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	f003 0307 	and.w	r3, r3, #7
 8002a36:	009b      	lsls	r3, r3, #2
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	69ba      	ldr	r2, [r7, #24]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	08da      	lsrs	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	3208      	adds	r2, #8
 8002a4a:	69b9      	ldr	r1, [r7, #24]
 8002a4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	2203      	movs	r2, #3
 8002a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a60:	43db      	mvns	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	4013      	ands	r3, r2
 8002a66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f003 0203 	and.w	r2, r3, #3
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	fa02 f303 	lsl.w	r3, r2, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4313      	orrs	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	69ba      	ldr	r2, [r7, #24]
 8002a82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	f000 80a2 	beq.w	8002bd6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	60fb      	str	r3, [r7, #12]
 8002a96:	4b57      	ldr	r3, [pc, #348]	@ (8002bf4 <HAL_GPIO_Init+0x2e8>)
 8002a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a9a:	4a56      	ldr	r2, [pc, #344]	@ (8002bf4 <HAL_GPIO_Init+0x2e8>)
 8002a9c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002aa0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002aa2:	4b54      	ldr	r3, [pc, #336]	@ (8002bf4 <HAL_GPIO_Init+0x2e8>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002aa6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002aae:	4a52      	ldr	r2, [pc, #328]	@ (8002bf8 <HAL_GPIO_Init+0x2ec>)
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	089b      	lsrs	r3, r3, #2
 8002ab4:	3302      	adds	r3, #2
 8002ab6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002abc:	69fb      	ldr	r3, [r7, #28]
 8002abe:	f003 0303 	and.w	r3, r3, #3
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	220f      	movs	r2, #15
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69ba      	ldr	r2, [r7, #24]
 8002ace:	4013      	ands	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a49      	ldr	r2, [pc, #292]	@ (8002bfc <HAL_GPIO_Init+0x2f0>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d019      	beq.n	8002b0e <HAL_GPIO_Init+0x202>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a48      	ldr	r2, [pc, #288]	@ (8002c00 <HAL_GPIO_Init+0x2f4>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d013      	beq.n	8002b0a <HAL_GPIO_Init+0x1fe>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a47      	ldr	r2, [pc, #284]	@ (8002c04 <HAL_GPIO_Init+0x2f8>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d00d      	beq.n	8002b06 <HAL_GPIO_Init+0x1fa>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a46      	ldr	r2, [pc, #280]	@ (8002c08 <HAL_GPIO_Init+0x2fc>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d007      	beq.n	8002b02 <HAL_GPIO_Init+0x1f6>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a45      	ldr	r2, [pc, #276]	@ (8002c0c <HAL_GPIO_Init+0x300>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d101      	bne.n	8002afe <HAL_GPIO_Init+0x1f2>
 8002afa:	2304      	movs	r3, #4
 8002afc:	e008      	b.n	8002b10 <HAL_GPIO_Init+0x204>
 8002afe:	2307      	movs	r3, #7
 8002b00:	e006      	b.n	8002b10 <HAL_GPIO_Init+0x204>
 8002b02:	2303      	movs	r3, #3
 8002b04:	e004      	b.n	8002b10 <HAL_GPIO_Init+0x204>
 8002b06:	2302      	movs	r3, #2
 8002b08:	e002      	b.n	8002b10 <HAL_GPIO_Init+0x204>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <HAL_GPIO_Init+0x204>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	69fa      	ldr	r2, [r7, #28]
 8002b12:	f002 0203 	and.w	r2, r2, #3
 8002b16:	0092      	lsls	r2, r2, #2
 8002b18:	4093      	lsls	r3, r2
 8002b1a:	69ba      	ldr	r2, [r7, #24]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002b20:	4935      	ldr	r1, [pc, #212]	@ (8002bf8 <HAL_GPIO_Init+0x2ec>)
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	089b      	lsrs	r3, r3, #2
 8002b26:	3302      	adds	r3, #2
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002b2e:	4b38      	ldr	r3, [pc, #224]	@ (8002c10 <HAL_GPIO_Init+0x304>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	43db      	mvns	r3, r3
 8002b38:	69ba      	ldr	r2, [r7, #24]
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d003      	beq.n	8002b52 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	4313      	orrs	r3, r2
 8002b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002b52:	4a2f      	ldr	r2, [pc, #188]	@ (8002c10 <HAL_GPIO_Init+0x304>)
 8002b54:	69bb      	ldr	r3, [r7, #24]
 8002b56:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002b58:	4b2d      	ldr	r3, [pc, #180]	@ (8002c10 <HAL_GPIO_Init+0x304>)
 8002b5a:	68db      	ldr	r3, [r3, #12]
 8002b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	43db      	mvns	r3, r3
 8002b62:	69ba      	ldr	r2, [r7, #24]
 8002b64:	4013      	ands	r3, r2
 8002b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d003      	beq.n	8002b7c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002b74:	69ba      	ldr	r2, [r7, #24]
 8002b76:	693b      	ldr	r3, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b7c:	4a24      	ldr	r2, [pc, #144]	@ (8002c10 <HAL_GPIO_Init+0x304>)
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b82:	4b23      	ldr	r3, [pc, #140]	@ (8002c10 <HAL_GPIO_Init+0x304>)
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	43db      	mvns	r3, r3
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	4013      	ands	r3, r2
 8002b90:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d003      	beq.n	8002ba6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	4313      	orrs	r3, r2
 8002ba4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ba6:	4a1a      	ldr	r2, [pc, #104]	@ (8002c10 <HAL_GPIO_Init+0x304>)
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002bac:	4b18      	ldr	r3, [pc, #96]	@ (8002c10 <HAL_GPIO_Init+0x304>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	43db      	mvns	r3, r3
 8002bb6:	69ba      	ldr	r2, [r7, #24]
 8002bb8:	4013      	ands	r3, r2
 8002bba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d003      	beq.n	8002bd0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002bc8:	69ba      	ldr	r2, [r7, #24]
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	4313      	orrs	r3, r2
 8002bce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002bd0:	4a0f      	ldr	r2, [pc, #60]	@ (8002c10 <HAL_GPIO_Init+0x304>)
 8002bd2:	69bb      	ldr	r3, [r7, #24]
 8002bd4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	61fb      	str	r3, [r7, #28]
 8002bdc:	69fb      	ldr	r3, [r7, #28]
 8002bde:	2b0f      	cmp	r3, #15
 8002be0:	f67f aea2 	bls.w	8002928 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002be4:	bf00      	nop
 8002be6:	bf00      	nop
 8002be8:	3724      	adds	r7, #36	@ 0x24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf0:	4770      	bx	lr
 8002bf2:	bf00      	nop
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40013800 	.word	0x40013800
 8002bfc:	40020000 	.word	0x40020000
 8002c00:	40020400 	.word	0x40020400
 8002c04:	40020800 	.word	0x40020800
 8002c08:	40020c00 	.word	0x40020c00
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40013c00 	.word	0x40013c00

08002c14 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	807b      	strh	r3, [r7, #2]
 8002c20:	4613      	mov	r3, r2
 8002c22:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002c24:	787b      	ldrb	r3, [r7, #1]
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d003      	beq.n	8002c32 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002c2a:	887a      	ldrh	r2, [r7, #2]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002c30:	e003      	b.n	8002c3a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002c32:	887b      	ldrh	r3, [r7, #2]
 8002c34:	041a      	lsls	r2, r3, #16
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	619a      	str	r2, [r3, #24]
}
 8002c3a:	bf00      	nop
 8002c3c:	370c      	adds	r7, #12
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c44:	4770      	bx	lr
	...

08002c48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d101      	bne.n	8002c5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c56:	2301      	movs	r3, #1
 8002c58:	e267      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0301 	and.w	r3, r3, #1
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d075      	beq.n	8002d52 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c66:	4b88      	ldr	r3, [pc, #544]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d00c      	beq.n	8002c8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c72:	4b85      	ldr	r3, [pc, #532]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d112      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002c7e:	4b82      	ldr	r3, [pc, #520]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c86:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c8a:	d10b      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c8c:	4b7e      	ldr	r3, [pc, #504]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d05b      	beq.n	8002d50 <HAL_RCC_OscConfig+0x108>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d157      	bne.n	8002d50 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e242      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002cac:	d106      	bne.n	8002cbc <HAL_RCC_OscConfig+0x74>
 8002cae:	4b76      	ldr	r3, [pc, #472]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a75      	ldr	r2, [pc, #468]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cb8:	6013      	str	r3, [r2, #0]
 8002cba:	e01d      	b.n	8002cf8 <HAL_RCC_OscConfig+0xb0>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002cc4:	d10c      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x98>
 8002cc6:	4b70      	ldr	r3, [pc, #448]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4a6f      	ldr	r2, [pc, #444]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002ccc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002cd0:	6013      	str	r3, [r2, #0]
 8002cd2:	4b6d      	ldr	r3, [pc, #436]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a6c      	ldr	r2, [pc, #432]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002cd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002cdc:	6013      	str	r3, [r2, #0]
 8002cde:	e00b      	b.n	8002cf8 <HAL_RCC_OscConfig+0xb0>
 8002ce0:	4b69      	ldr	r3, [pc, #420]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a68      	ldr	r2, [pc, #416]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002ce6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cea:	6013      	str	r3, [r2, #0]
 8002cec:	4b66      	ldr	r3, [pc, #408]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a65      	ldr	r2, [pc, #404]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002cf2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002cf6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	685b      	ldr	r3, [r3, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d013      	beq.n	8002d28 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d00:	f7fe ffc4 	bl	8001c8c <HAL_GetTick>
 8002d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d06:	e008      	b.n	8002d1a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d08:	f7fe ffc0 	bl	8001c8c <HAL_GetTick>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	1ad3      	subs	r3, r2, r3
 8002d12:	2b64      	cmp	r3, #100	@ 0x64
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e207      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d1a:	4b5b      	ldr	r3, [pc, #364]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d0f0      	beq.n	8002d08 <HAL_RCC_OscConfig+0xc0>
 8002d26:	e014      	b.n	8002d52 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d28:	f7fe ffb0 	bl	8001c8c <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d30:	f7fe ffac 	bl	8001c8c <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b64      	cmp	r3, #100	@ 0x64
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e1f3      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d42:	4b51      	ldr	r3, [pc, #324]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1f0      	bne.n	8002d30 <HAL_RCC_OscConfig+0xe8>
 8002d4e:	e000      	b.n	8002d52 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0302 	and.w	r3, r3, #2
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d063      	beq.n	8002e26 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d5e:	4b4a      	ldr	r3, [pc, #296]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	f003 030c 	and.w	r3, r3, #12
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d00b      	beq.n	8002d82 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d6a:	4b47      	ldr	r3, [pc, #284]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002d6c:	689b      	ldr	r3, [r3, #8]
 8002d6e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d72:	2b08      	cmp	r3, #8
 8002d74:	d11c      	bne.n	8002db0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002d76:	4b44      	ldr	r3, [pc, #272]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d116      	bne.n	8002db0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d82:	4b41      	ldr	r3, [pc, #260]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d005      	beq.n	8002d9a <HAL_RCC_OscConfig+0x152>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	68db      	ldr	r3, [r3, #12]
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d001      	beq.n	8002d9a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e1c7      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d9a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	691b      	ldr	r3, [r3, #16]
 8002da6:	00db      	lsls	r3, r3, #3
 8002da8:	4937      	ldr	r1, [pc, #220]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dae:	e03a      	b.n	8002e26 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	68db      	ldr	r3, [r3, #12]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d020      	beq.n	8002dfa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002db8:	4b34      	ldr	r3, [pc, #208]	@ (8002e8c <HAL_RCC_OscConfig+0x244>)
 8002dba:	2201      	movs	r2, #1
 8002dbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbe:	f7fe ff65 	bl	8001c8c <HAL_GetTick>
 8002dc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dc4:	e008      	b.n	8002dd8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002dc6:	f7fe ff61 	bl	8001c8c <HAL_GetTick>
 8002dca:	4602      	mov	r2, r0
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	1ad3      	subs	r3, r2, r3
 8002dd0:	2b02      	cmp	r3, #2
 8002dd2:	d901      	bls.n	8002dd8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002dd4:	2303      	movs	r3, #3
 8002dd6:	e1a8      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002dd8:	4b2b      	ldr	r3, [pc, #172]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d0f0      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002de4:	4b28      	ldr	r3, [pc, #160]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	691b      	ldr	r3, [r3, #16]
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	4925      	ldr	r1, [pc, #148]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002df4:	4313      	orrs	r3, r2
 8002df6:	600b      	str	r3, [r1, #0]
 8002df8:	e015      	b.n	8002e26 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002dfa:	4b24      	ldr	r3, [pc, #144]	@ (8002e8c <HAL_RCC_OscConfig+0x244>)
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e00:	f7fe ff44 	bl	8001c8c <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e06:	e008      	b.n	8002e1a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e08:	f7fe ff40 	bl	8001c8c <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d901      	bls.n	8002e1a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e16:	2303      	movs	r3, #3
 8002e18:	e187      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e1a:	4b1b      	ldr	r3, [pc, #108]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f003 0302 	and.w	r3, r3, #2
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d1f0      	bne.n	8002e08 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d036      	beq.n	8002ea0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d016      	beq.n	8002e68 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e3a:	4b15      	ldr	r3, [pc, #84]	@ (8002e90 <HAL_RCC_OscConfig+0x248>)
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e40:	f7fe ff24 	bl	8001c8c <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e48:	f7fe ff20 	bl	8001c8c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e167      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e88 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d0f0      	beq.n	8002e48 <HAL_RCC_OscConfig+0x200>
 8002e66:	e01b      	b.n	8002ea0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e68:	4b09      	ldr	r3, [pc, #36]	@ (8002e90 <HAL_RCC_OscConfig+0x248>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e6e:	f7fe ff0d 	bl	8001c8c <HAL_GetTick>
 8002e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e74:	e00e      	b.n	8002e94 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e76:	f7fe ff09 	bl	8001c8c <HAL_GetTick>
 8002e7a:	4602      	mov	r2, r0
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	2b02      	cmp	r3, #2
 8002e82:	d907      	bls.n	8002e94 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e84:	2303      	movs	r3, #3
 8002e86:	e150      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
 8002e88:	40023800 	.word	0x40023800
 8002e8c:	42470000 	.word	0x42470000
 8002e90:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e94:	4b88      	ldr	r3, [pc, #544]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002e96:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e98:	f003 0302 	and.w	r3, r3, #2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d1ea      	bne.n	8002e76 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 0304 	and.w	r3, r3, #4
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	f000 8097 	beq.w	8002fdc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eae:	2300      	movs	r3, #0
 8002eb0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002eb2:	4b81      	ldr	r3, [pc, #516]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d10f      	bne.n	8002ede <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60bb      	str	r3, [r7, #8]
 8002ec2:	4b7d      	ldr	r3, [pc, #500]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ec6:	4a7c      	ldr	r2, [pc, #496]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ece:	4b7a      	ldr	r3, [pc, #488]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ed6:	60bb      	str	r3, [r7, #8]
 8002ed8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002eda:	2301      	movs	r3, #1
 8002edc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ede:	4b77      	ldr	r3, [pc, #476]	@ (80030bc <HAL_RCC_OscConfig+0x474>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d118      	bne.n	8002f1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002eea:	4b74      	ldr	r3, [pc, #464]	@ (80030bc <HAL_RCC_OscConfig+0x474>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4a73      	ldr	r2, [pc, #460]	@ (80030bc <HAL_RCC_OscConfig+0x474>)
 8002ef0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ef4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ef6:	f7fe fec9 	bl	8001c8c <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002efe:	f7fe fec5 	bl	8001c8c <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e10c      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f10:	4b6a      	ldr	r3, [pc, #424]	@ (80030bc <HAL_RCC_OscConfig+0x474>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d106      	bne.n	8002f32 <HAL_RCC_OscConfig+0x2ea>
 8002f24:	4b64      	ldr	r3, [pc, #400]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f28:	4a63      	ldr	r2, [pc, #396]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f2a:	f043 0301 	orr.w	r3, r3, #1
 8002f2e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f30:	e01c      	b.n	8002f6c <HAL_RCC_OscConfig+0x324>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	2b05      	cmp	r3, #5
 8002f38:	d10c      	bne.n	8002f54 <HAL_RCC_OscConfig+0x30c>
 8002f3a:	4b5f      	ldr	r3, [pc, #380]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f3e:	4a5e      	ldr	r2, [pc, #376]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f40:	f043 0304 	orr.w	r3, r3, #4
 8002f44:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f46:	4b5c      	ldr	r3, [pc, #368]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f48:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f4a:	4a5b      	ldr	r2, [pc, #364]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f4c:	f043 0301 	orr.w	r3, r3, #1
 8002f50:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f52:	e00b      	b.n	8002f6c <HAL_RCC_OscConfig+0x324>
 8002f54:	4b58      	ldr	r3, [pc, #352]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f58:	4a57      	ldr	r2, [pc, #348]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f5a:	f023 0301 	bic.w	r3, r3, #1
 8002f5e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f60:	4b55      	ldr	r3, [pc, #340]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f62:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f64:	4a54      	ldr	r2, [pc, #336]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f66:	f023 0304 	bic.w	r3, r3, #4
 8002f6a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d015      	beq.n	8002fa0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f74:	f7fe fe8a 	bl	8001c8c <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f7a:	e00a      	b.n	8002f92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002f7c:	f7fe fe86 	bl	8001c8c <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d901      	bls.n	8002f92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f8e:	2303      	movs	r3, #3
 8002f90:	e0cb      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f92:	4b49      	ldr	r3, [pc, #292]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002f94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f96:	f003 0302 	and.w	r3, r3, #2
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0ee      	beq.n	8002f7c <HAL_RCC_OscConfig+0x334>
 8002f9e:	e014      	b.n	8002fca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fa0:	f7fe fe74 	bl	8001c8c <HAL_GetTick>
 8002fa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fa6:	e00a      	b.n	8002fbe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fa8:	f7fe fe70 	bl	8001c8c <HAL_GetTick>
 8002fac:	4602      	mov	r2, r0
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e0b5      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fbe:	4b3e      	ldr	r3, [pc, #248]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002fc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002fc2:	f003 0302 	and.w	r3, r3, #2
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1ee      	bne.n	8002fa8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002fca:	7dfb      	ldrb	r3, [r7, #23]
 8002fcc:	2b01      	cmp	r3, #1
 8002fce:	d105      	bne.n	8002fdc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fd0:	4b39      	ldr	r3, [pc, #228]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd4:	4a38      	ldr	r2, [pc, #224]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002fd6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fda:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	699b      	ldr	r3, [r3, #24]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 80a1 	beq.w	8003128 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002fe6:	4b34      	ldr	r3, [pc, #208]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f003 030c 	and.w	r3, r3, #12
 8002fee:	2b08      	cmp	r3, #8
 8002ff0:	d05c      	beq.n	80030ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d141      	bne.n	800307e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffa:	4b31      	ldr	r3, [pc, #196]	@ (80030c0 <HAL_RCC_OscConfig+0x478>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003000:	f7fe fe44 	bl	8001c8c <HAL_GetTick>
 8003004:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003006:	e008      	b.n	800301a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003008:	f7fe fe40 	bl	8001c8c <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	2b02      	cmp	r3, #2
 8003014:	d901      	bls.n	800301a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003016:	2303      	movs	r3, #3
 8003018:	e087      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301a:	4b27      	ldr	r3, [pc, #156]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d1f0      	bne.n	8003008 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	69da      	ldr	r2, [r3, #28]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	431a      	orrs	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	019b      	lsls	r3, r3, #6
 8003036:	431a      	orrs	r2, r3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800303c:	085b      	lsrs	r3, r3, #1
 800303e:	3b01      	subs	r3, #1
 8003040:	041b      	lsls	r3, r3, #16
 8003042:	431a      	orrs	r2, r3
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003048:	061b      	lsls	r3, r3, #24
 800304a:	491b      	ldr	r1, [pc, #108]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 800304c:	4313      	orrs	r3, r2
 800304e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003050:	4b1b      	ldr	r3, [pc, #108]	@ (80030c0 <HAL_RCC_OscConfig+0x478>)
 8003052:	2201      	movs	r2, #1
 8003054:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003056:	f7fe fe19 	bl	8001c8c <HAL_GetTick>
 800305a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800305c:	e008      	b.n	8003070 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800305e:	f7fe fe15 	bl	8001c8c <HAL_GetTick>
 8003062:	4602      	mov	r2, r0
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	1ad3      	subs	r3, r2, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e05c      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003070:	4b11      	ldr	r3, [pc, #68]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d0f0      	beq.n	800305e <HAL_RCC_OscConfig+0x416>
 800307c:	e054      	b.n	8003128 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800307e:	4b10      	ldr	r3, [pc, #64]	@ (80030c0 <HAL_RCC_OscConfig+0x478>)
 8003080:	2200      	movs	r2, #0
 8003082:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003084:	f7fe fe02 	bl	8001c8c <HAL_GetTick>
 8003088:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800308c:	f7fe fdfe 	bl	8001c8c <HAL_GetTick>
 8003090:	4602      	mov	r2, r0
 8003092:	693b      	ldr	r3, [r7, #16]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e045      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800309e:	4b06      	ldr	r3, [pc, #24]	@ (80030b8 <HAL_RCC_OscConfig+0x470>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d1f0      	bne.n	800308c <HAL_RCC_OscConfig+0x444>
 80030aa:	e03d      	b.n	8003128 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	699b      	ldr	r3, [r3, #24]
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d107      	bne.n	80030c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	e038      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
 80030b8:	40023800 	.word	0x40023800
 80030bc:	40007000 	.word	0x40007000
 80030c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80030c4:	4b1b      	ldr	r3, [pc, #108]	@ (8003134 <HAL_RCC_OscConfig+0x4ec>)
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	699b      	ldr	r3, [r3, #24]
 80030ce:	2b01      	cmp	r3, #1
 80030d0:	d028      	beq.n	8003124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80030dc:	429a      	cmp	r2, r3
 80030de:	d121      	bne.n	8003124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ea:	429a      	cmp	r2, r3
 80030ec:	d11a      	bne.n	8003124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80030ee:	68fa      	ldr	r2, [r7, #12]
 80030f0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80030f4:	4013      	ands	r3, r2
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80030fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80030fc:	4293      	cmp	r3, r2
 80030fe:	d111      	bne.n	8003124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800310a:	085b      	lsrs	r3, r3, #1
 800310c:	3b01      	subs	r3, #1
 800310e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003110:	429a      	cmp	r2, r3
 8003112:	d107      	bne.n	8003124 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800311e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003120:	429a      	cmp	r2, r3
 8003122:	d001      	beq.n	8003128 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	e000      	b.n	800312a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3718      	adds	r7, #24
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
 8003132:	bf00      	nop
 8003134:	40023800 	.word	0x40023800

08003138 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003138:	b580      	push	{r7, lr}
 800313a:	b084      	sub	sp, #16
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
 8003140:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d101      	bne.n	800314c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003148:	2301      	movs	r3, #1
 800314a:	e0cc      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800314c:	4b68      	ldr	r3, [pc, #416]	@ (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f003 0307 	and.w	r3, r3, #7
 8003154:	683a      	ldr	r2, [r7, #0]
 8003156:	429a      	cmp	r2, r3
 8003158:	d90c      	bls.n	8003174 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800315a:	4b65      	ldr	r3, [pc, #404]	@ (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	b2d2      	uxtb	r2, r2
 8003160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003162:	4b63      	ldr	r3, [pc, #396]	@ (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	683a      	ldr	r2, [r7, #0]
 800316c:	429a      	cmp	r2, r3
 800316e:	d001      	beq.n	8003174 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0b8      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d020      	beq.n	80031c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	d005      	beq.n	8003198 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800318c:	4b59      	ldr	r3, [pc, #356]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	4a58      	ldr	r2, [pc, #352]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003192:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003196:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d005      	beq.n	80031b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031a4:	4b53      	ldr	r3, [pc, #332]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031a6:	689b      	ldr	r3, [r3, #8]
 80031a8:	4a52      	ldr	r2, [pc, #328]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031aa:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80031ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031b0:	4b50      	ldr	r3, [pc, #320]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	494d      	ldr	r1, [pc, #308]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031be:	4313      	orrs	r3, r2
 80031c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0301 	and.w	r3, r3, #1
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d044      	beq.n	8003258 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d107      	bne.n	80031e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031d6:	4b47      	ldr	r3, [pc, #284]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d119      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e07f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d003      	beq.n	80031f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80031f2:	2b03      	cmp	r3, #3
 80031f4:	d107      	bne.n	8003206 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f6:	4b3f      	ldr	r3, [pc, #252]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d109      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e06f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003206:	4b3b      	ldr	r3, [pc, #236]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e067      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003216:	4b37      	ldr	r3, [pc, #220]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	689b      	ldr	r3, [r3, #8]
 800321a:	f023 0203 	bic.w	r2, r3, #3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4934      	ldr	r1, [pc, #208]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003224:	4313      	orrs	r3, r2
 8003226:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003228:	f7fe fd30 	bl	8001c8c <HAL_GetTick>
 800322c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800322e:	e00a      	b.n	8003246 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003230:	f7fe fd2c 	bl	8001c8c <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800323e:	4293      	cmp	r3, r2
 8003240:	d901      	bls.n	8003246 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e04f      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003246:	4b2b      	ldr	r3, [pc, #172]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f003 020c 	and.w	r2, r3, #12
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	685b      	ldr	r3, [r3, #4]
 8003252:	009b      	lsls	r3, r3, #2
 8003254:	429a      	cmp	r2, r3
 8003256:	d1eb      	bne.n	8003230 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003258:	4b25      	ldr	r3, [pc, #148]	@ (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	683a      	ldr	r2, [r7, #0]
 8003262:	429a      	cmp	r2, r3
 8003264:	d20c      	bcs.n	8003280 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003266:	4b22      	ldr	r3, [pc, #136]	@ (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	b2d2      	uxtb	r2, r2
 800326c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800326e:	4b20      	ldr	r3, [pc, #128]	@ (80032f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 0307 	and.w	r3, r3, #7
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e032      	b.n	80032e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0304 	and.w	r3, r3, #4
 8003288:	2b00      	cmp	r3, #0
 800328a:	d008      	beq.n	800329e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800328c:	4b19      	ldr	r3, [pc, #100]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 800328e:	689b      	ldr	r3, [r3, #8]
 8003290:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	4916      	ldr	r1, [pc, #88]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 800329a:	4313      	orrs	r3, r2
 800329c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0308 	and.w	r3, r3, #8
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d009      	beq.n	80032be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032aa:	4b12      	ldr	r3, [pc, #72]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	691b      	ldr	r3, [r3, #16]
 80032b6:	00db      	lsls	r3, r3, #3
 80032b8:	490e      	ldr	r1, [pc, #56]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	4313      	orrs	r3, r2
 80032bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032be:	f000 f821 	bl	8003304 <HAL_RCC_GetSysClockFreq>
 80032c2:	4602      	mov	r2, r0
 80032c4:	4b0b      	ldr	r3, [pc, #44]	@ (80032f4 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	091b      	lsrs	r3, r3, #4
 80032ca:	f003 030f 	and.w	r3, r3, #15
 80032ce:	490a      	ldr	r1, [pc, #40]	@ (80032f8 <HAL_RCC_ClockConfig+0x1c0>)
 80032d0:	5ccb      	ldrb	r3, [r1, r3]
 80032d2:	fa22 f303 	lsr.w	r3, r2, r3
 80032d6:	4a09      	ldr	r2, [pc, #36]	@ (80032fc <HAL_RCC_ClockConfig+0x1c4>)
 80032d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80032da:	4b09      	ldr	r3, [pc, #36]	@ (8003300 <HAL_RCC_ClockConfig+0x1c8>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	4618      	mov	r0, r3
 80032e0:	f7fe fc90 	bl	8001c04 <HAL_InitTick>

  return HAL_OK;
 80032e4:	2300      	movs	r3, #0
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	3710      	adds	r7, #16
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	40023c00 	.word	0x40023c00
 80032f4:	40023800 	.word	0x40023800
 80032f8:	08009778 	.word	0x08009778
 80032fc:	20000004 	.word	0x20000004
 8003300:	20000008 	.word	0x20000008

08003304 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003308:	b090      	sub	sp, #64	@ 0x40
 800330a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800330c:	2300      	movs	r3, #0
 800330e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003310:	2300      	movs	r3, #0
 8003312:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003314:	2300      	movs	r3, #0
 8003316:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003318:	2300      	movs	r3, #0
 800331a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800331c:	4b59      	ldr	r3, [pc, #356]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x180>)
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	f003 030c 	and.w	r3, r3, #12
 8003324:	2b08      	cmp	r3, #8
 8003326:	d00d      	beq.n	8003344 <HAL_RCC_GetSysClockFreq+0x40>
 8003328:	2b08      	cmp	r3, #8
 800332a:	f200 80a1 	bhi.w	8003470 <HAL_RCC_GetSysClockFreq+0x16c>
 800332e:	2b00      	cmp	r3, #0
 8003330:	d002      	beq.n	8003338 <HAL_RCC_GetSysClockFreq+0x34>
 8003332:	2b04      	cmp	r3, #4
 8003334:	d003      	beq.n	800333e <HAL_RCC_GetSysClockFreq+0x3a>
 8003336:	e09b      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003338:	4b53      	ldr	r3, [pc, #332]	@ (8003488 <HAL_RCC_GetSysClockFreq+0x184>)
 800333a:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 800333c:	e09b      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800333e:	4b53      	ldr	r3, [pc, #332]	@ (800348c <HAL_RCC_GetSysClockFreq+0x188>)
 8003340:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003342:	e098      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003344:	4b4f      	ldr	r3, [pc, #316]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x180>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800334c:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800334e:	4b4d      	ldr	r3, [pc, #308]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x180>)
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d028      	beq.n	80033ac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800335a:	4b4a      	ldr	r3, [pc, #296]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x180>)
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	099b      	lsrs	r3, r3, #6
 8003360:	2200      	movs	r2, #0
 8003362:	623b      	str	r3, [r7, #32]
 8003364:	627a      	str	r2, [r7, #36]	@ 0x24
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800336c:	2100      	movs	r1, #0
 800336e:	4b47      	ldr	r3, [pc, #284]	@ (800348c <HAL_RCC_GetSysClockFreq+0x188>)
 8003370:	fb03 f201 	mul.w	r2, r3, r1
 8003374:	2300      	movs	r3, #0
 8003376:	fb00 f303 	mul.w	r3, r0, r3
 800337a:	4413      	add	r3, r2
 800337c:	4a43      	ldr	r2, [pc, #268]	@ (800348c <HAL_RCC_GetSysClockFreq+0x188>)
 800337e:	fba0 1202 	umull	r1, r2, r0, r2
 8003382:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003384:	460a      	mov	r2, r1
 8003386:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003388:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800338a:	4413      	add	r3, r2
 800338c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800338e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003390:	2200      	movs	r2, #0
 8003392:	61bb      	str	r3, [r7, #24]
 8003394:	61fa      	str	r2, [r7, #28]
 8003396:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800339a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800339e:	f7fc ff77 	bl	8000290 <__aeabi_uldivmod>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4613      	mov	r3, r2
 80033a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80033aa:	e053      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ac:	4b35      	ldr	r3, [pc, #212]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	099b      	lsrs	r3, r3, #6
 80033b2:	2200      	movs	r2, #0
 80033b4:	613b      	str	r3, [r7, #16]
 80033b6:	617a      	str	r2, [r7, #20]
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80033be:	f04f 0b00 	mov.w	fp, #0
 80033c2:	4652      	mov	r2, sl
 80033c4:	465b      	mov	r3, fp
 80033c6:	f04f 0000 	mov.w	r0, #0
 80033ca:	f04f 0100 	mov.w	r1, #0
 80033ce:	0159      	lsls	r1, r3, #5
 80033d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033d4:	0150      	lsls	r0, r2, #5
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	ebb2 080a 	subs.w	r8, r2, sl
 80033de:	eb63 090b 	sbc.w	r9, r3, fp
 80033e2:	f04f 0200 	mov.w	r2, #0
 80033e6:	f04f 0300 	mov.w	r3, #0
 80033ea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80033ee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80033f2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80033f6:	ebb2 0408 	subs.w	r4, r2, r8
 80033fa:	eb63 0509 	sbc.w	r5, r3, r9
 80033fe:	f04f 0200 	mov.w	r2, #0
 8003402:	f04f 0300 	mov.w	r3, #0
 8003406:	00eb      	lsls	r3, r5, #3
 8003408:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800340c:	00e2      	lsls	r2, r4, #3
 800340e:	4614      	mov	r4, r2
 8003410:	461d      	mov	r5, r3
 8003412:	eb14 030a 	adds.w	r3, r4, sl
 8003416:	603b      	str	r3, [r7, #0]
 8003418:	eb45 030b 	adc.w	r3, r5, fp
 800341c:	607b      	str	r3, [r7, #4]
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800342a:	4629      	mov	r1, r5
 800342c:	028b      	lsls	r3, r1, #10
 800342e:	4621      	mov	r1, r4
 8003430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003434:	4621      	mov	r1, r4
 8003436:	028a      	lsls	r2, r1, #10
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800343e:	2200      	movs	r2, #0
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	60fa      	str	r2, [r7, #12]
 8003444:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003448:	f7fc ff22 	bl	8000290 <__aeabi_uldivmod>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4613      	mov	r3, r2
 8003452:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003454:	4b0b      	ldr	r3, [pc, #44]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x180>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	0c1b      	lsrs	r3, r3, #16
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	3301      	adds	r3, #1
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8003464:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003468:	fbb2 f3f3 	udiv	r3, r2, r3
 800346c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800346e:	e002      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003470:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <HAL_RCC_GetSysClockFreq+0x184>)
 8003472:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003476:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003478:	4618      	mov	r0, r3
 800347a:	3740      	adds	r7, #64	@ 0x40
 800347c:	46bd      	mov	sp, r7
 800347e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003482:	bf00      	nop
 8003484:	40023800 	.word	0x40023800
 8003488:	00f42400 	.word	0x00f42400
 800348c:	017d7840 	.word	0x017d7840

08003490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003494:	4b03      	ldr	r3, [pc, #12]	@ (80034a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003496:	681b      	ldr	r3, [r3, #0]
}
 8003498:	4618      	mov	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	20000004 	.word	0x20000004

080034a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80034ac:	f7ff fff0 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b05      	ldr	r3, [pc, #20]	@ (80034c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	0a9b      	lsrs	r3, r3, #10
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	4903      	ldr	r1, [pc, #12]	@ (80034cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034be:	5ccb      	ldrb	r3, [r1, r3]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40023800 	.word	0x40023800
 80034cc:	08009788 	.word	0x08009788

080034d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80034d4:	f7ff ffdc 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034d8:	4602      	mov	r2, r0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	0b5b      	lsrs	r3, r3, #13
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	4903      	ldr	r1, [pc, #12]	@ (80034f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034e6:	5ccb      	ldrb	r3, [r1, r3]
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40023800 	.word	0x40023800
 80034f4:	08009788 	.word	0x08009788

080034f8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e07b      	b.n	8003602 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350e:	2b00      	cmp	r3, #0
 8003510:	d108      	bne.n	8003524 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	685b      	ldr	r3, [r3, #4]
 8003516:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800351a:	d009      	beq.n	8003530 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	61da      	str	r2, [r3, #28]
 8003522:	e005      	b.n	8003530 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2200      	movs	r2, #0
 800352e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d106      	bne.n	8003550 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f7fe f958 	bl	8001800 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2202      	movs	r2, #2
 8003554:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003566:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003578:	431a      	orrs	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68db      	ldr	r3, [r3, #12]
 800357e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003582:	431a      	orrs	r2, r3
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	f003 0302 	and.w	r3, r3, #2
 800358c:	431a      	orrs	r2, r3
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	f003 0301 	and.w	r3, r3, #1
 8003596:	431a      	orrs	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035a0:	431a      	orrs	r2, r3
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	69db      	ldr	r3, [r3, #28]
 80035a6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a1b      	ldr	r3, [r3, #32]
 80035b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b4:	ea42 0103 	orr.w	r1, r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035bc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	430a      	orrs	r2, r1
 80035c6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	0c1b      	lsrs	r3, r3, #16
 80035ce:	f003 0104 	and.w	r1, r3, #4
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d6:	f003 0210 	and.w	r2, r3, #16
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	430a      	orrs	r2, r1
 80035e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	69da      	ldr	r2, [r3, #28]
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2200      	movs	r2, #0
 80035f6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2201      	movs	r2, #1
 80035fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800360a:	b580      	push	{r7, lr}
 800360c:	b088      	sub	sp, #32
 800360e:	af00      	add	r7, sp, #0
 8003610:	60f8      	str	r0, [r7, #12]
 8003612:	60b9      	str	r1, [r7, #8]
 8003614:	603b      	str	r3, [r7, #0]
 8003616:	4613      	mov	r3, r2
 8003618:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003624:	2b01      	cmp	r3, #1
 8003626:	d101      	bne.n	800362c <HAL_SPI_Transmit+0x22>
 8003628:	2302      	movs	r3, #2
 800362a:	e12d      	b.n	8003888 <HAL_SPI_Transmit+0x27e>
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003634:	f7fe fb2a 	bl	8001c8c <HAL_GetTick>
 8003638:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800363a:	88fb      	ldrh	r3, [r7, #6]
 800363c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003644:	b2db      	uxtb	r3, r3
 8003646:	2b01      	cmp	r3, #1
 8003648:	d002      	beq.n	8003650 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800364a:	2302      	movs	r3, #2
 800364c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800364e:	e116      	b.n	800387e <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d002      	beq.n	800365c <HAL_SPI_Transmit+0x52>
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d102      	bne.n	8003662 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003660:	e10d      	b.n	800387e <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	2203      	movs	r2, #3
 8003666:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2200      	movs	r2, #0
 800366e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	68ba      	ldr	r2, [r7, #8]
 8003674:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	88fa      	ldrh	r2, [r7, #6]
 800367a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	88fa      	ldrh	r2, [r7, #6]
 8003680:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	2200      	movs	r2, #0
 8003686:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036a8:	d10f      	bne.n	80036ca <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	681a      	ldr	r2, [r3, #0]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d4:	2b40      	cmp	r3, #64	@ 0x40
 80036d6:	d007      	beq.n	80036e8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	68db      	ldr	r3, [r3, #12]
 80036ec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80036f0:	d14f      	bne.n	8003792 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d002      	beq.n	8003700 <HAL_SPI_Transmit+0xf6>
 80036fa:	8afb      	ldrh	r3, [r7, #22]
 80036fc:	2b01      	cmp	r3, #1
 80036fe:	d142      	bne.n	8003786 <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003704:	881a      	ldrh	r2, [r3, #0]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003710:	1c9a      	adds	r2, r3, #2
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800371a:	b29b      	uxth	r3, r3
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003724:	e02f      	b.n	8003786 <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b02      	cmp	r3, #2
 8003732:	d112      	bne.n	800375a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003738:	881a      	ldrh	r2, [r3, #0]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003744:	1c9a      	adds	r2, r3, #2
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800374e:	b29b      	uxth	r3, r3
 8003750:	3b01      	subs	r3, #1
 8003752:	b29a      	uxth	r2, r3
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003758:	e015      	b.n	8003786 <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800375a:	f7fe fa97 	bl	8001c8c <HAL_GetTick>
 800375e:	4602      	mov	r2, r0
 8003760:	69bb      	ldr	r3, [r7, #24]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d803      	bhi.n	8003772 <HAL_SPI_Transmit+0x168>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003770:	d102      	bne.n	8003778 <HAL_SPI_Transmit+0x16e>
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d106      	bne.n	8003786 <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003784:	e07b      	b.n	800387e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800378a:	b29b      	uxth	r3, r3
 800378c:	2b00      	cmp	r3, #0
 800378e:	d1ca      	bne.n	8003726 <HAL_SPI_Transmit+0x11c>
 8003790:	e050      	b.n	8003834 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d002      	beq.n	80037a0 <HAL_SPI_Transmit+0x196>
 800379a:	8afb      	ldrh	r3, [r7, #22]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d144      	bne.n	800382a <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	330c      	adds	r3, #12
 80037aa:	7812      	ldrb	r2, [r2, #0]
 80037ac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037b2:	1c5a      	adds	r2, r3, #1
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80037c6:	e030      	b.n	800382a <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d113      	bne.n	80037fe <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	330c      	adds	r3, #12
 80037e0:	7812      	ldrb	r2, [r2, #0]
 80037e2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037e8:	1c5a      	adds	r2, r3, #1
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	3b01      	subs	r3, #1
 80037f6:	b29a      	uxth	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80037fc:	e015      	b.n	800382a <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80037fe:	f7fe fa45 	bl	8001c8c <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	683a      	ldr	r2, [r7, #0]
 800380a:	429a      	cmp	r2, r3
 800380c:	d803      	bhi.n	8003816 <HAL_SPI_Transmit+0x20c>
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003814:	d102      	bne.n	800381c <HAL_SPI_Transmit+0x212>
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d106      	bne.n	800382a <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 800381c:	2303      	movs	r3, #3
 800381e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8003828:	e029      	b.n	800387e <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800382e:	b29b      	uxth	r3, r3
 8003830:	2b00      	cmp	r3, #0
 8003832:	d1c9      	bne.n	80037c8 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003834:	69ba      	ldr	r2, [r7, #24]
 8003836:	6839      	ldr	r1, [r7, #0]
 8003838:	68f8      	ldr	r0, [r7, #12]
 800383a:	f000 fa61 	bl	8003d00 <SPI_EndRxTxTransaction>
 800383e:	4603      	mov	r3, r0
 8003840:	2b00      	cmp	r3, #0
 8003842:	d002      	beq.n	800384a <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2220      	movs	r2, #32
 8003848:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d10a      	bne.n	8003868 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003852:	2300      	movs	r3, #0
 8003854:	613b      	str	r3, [r7, #16]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	68db      	ldr	r3, [r3, #12]
 800385c:	613b      	str	r3, [r7, #16]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	613b      	str	r3, [r7, #16]
 8003866:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800386c:	2b00      	cmp	r3, #0
 800386e:	d002      	beq.n	8003876 <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	77fb      	strb	r3, [r7, #31]
 8003874:	e003      	b.n	800387e <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003886:	7ffb      	ldrb	r3, [r7, #31]
}
 8003888:	4618      	mov	r0, r3
 800388a:	3720      	adds	r7, #32
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b08c      	sub	sp, #48	@ 0x30
 8003894:	af00      	add	r7, sp, #0
 8003896:	60f8      	str	r0, [r7, #12]
 8003898:	60b9      	str	r1, [r7, #8]
 800389a:	607a      	str	r2, [r7, #4]
 800389c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800389e:	2301      	movs	r3, #1
 80038a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80038a2:	2300      	movs	r3, #0
 80038a4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_SPI_TransmitReceive+0x26>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e198      	b.n	8003be8 <HAL_SPI_TransmitReceive+0x358>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038be:	f7fe f9e5 	bl	8001c8c <HAL_GetTick>
 80038c2:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80038d4:	887b      	ldrh	r3, [r7, #2]
 80038d6:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038d8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d00f      	beq.n	8003900 <HAL_SPI_TransmitReceive+0x70>
 80038e0:	69fb      	ldr	r3, [r7, #28]
 80038e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038e6:	d107      	bne.n	80038f8 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	689b      	ldr	r3, [r3, #8]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d103      	bne.n	80038f8 <HAL_SPI_TransmitReceive+0x68>
 80038f0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80038f4:	2b04      	cmp	r3, #4
 80038f6:	d003      	beq.n	8003900 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80038f8:	2302      	movs	r3, #2
 80038fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 80038fe:	e16d      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d005      	beq.n	8003912 <HAL_SPI_TransmitReceive+0x82>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2b00      	cmp	r3, #0
 800390a:	d002      	beq.n	8003912 <HAL_SPI_TransmitReceive+0x82>
 800390c:	887b      	ldrh	r3, [r7, #2]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d103      	bne.n	800391a <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8003912:	2301      	movs	r3, #1
 8003914:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8003918:	e160      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003920:	b2db      	uxtb	r3, r3
 8003922:	2b04      	cmp	r3, #4
 8003924:	d003      	beq.n	800392e <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2205      	movs	r2, #5
 800392a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	687a      	ldr	r2, [r7, #4]
 8003938:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	887a      	ldrh	r2, [r7, #2]
 800393e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	887a      	ldrh	r2, [r7, #2]
 8003944:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	68ba      	ldr	r2, [r7, #8]
 800394a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	887a      	ldrh	r2, [r7, #2]
 8003950:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	887a      	ldrh	r2, [r7, #2]
 8003956:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2200      	movs	r2, #0
 8003962:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800396e:	2b40      	cmp	r3, #64	@ 0x40
 8003970:	d007      	beq.n	8003982 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003980:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800398a:	d17c      	bne.n	8003a86 <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d002      	beq.n	800399a <HAL_SPI_TransmitReceive+0x10a>
 8003994:	8b7b      	ldrh	r3, [r7, #26]
 8003996:	2b01      	cmp	r3, #1
 8003998:	d16a      	bne.n	8003a70 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800399e:	881a      	ldrh	r2, [r3, #0]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039aa:	1c9a      	adds	r2, r3, #2
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039b4:	b29b      	uxth	r3, r3
 80039b6:	3b01      	subs	r3, #1
 80039b8:	b29a      	uxth	r2, r3
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039be:	e057      	b.n	8003a70 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d11b      	bne.n	8003a06 <HAL_SPI_TransmitReceive+0x176>
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d016      	beq.n	8003a06 <HAL_SPI_TransmitReceive+0x176>
 80039d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80039da:	2b01      	cmp	r3, #1
 80039dc:	d113      	bne.n	8003a06 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e2:	881a      	ldrh	r2, [r3, #0]
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ee:	1c9a      	adds	r2, r3, #2
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039f8:	b29b      	uxth	r3, r3
 80039fa:	3b01      	subs	r3, #1
 80039fc:	b29a      	uxth	r2, r3
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a02:	2300      	movs	r3, #0
 8003a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	f003 0301 	and.w	r3, r3, #1
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d119      	bne.n	8003a48 <HAL_SPI_TransmitReceive+0x1b8>
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d014      	beq.n	8003a48 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	68da      	ldr	r2, [r3, #12]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a28:	b292      	uxth	r2, r2
 8003a2a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a30:	1c9a      	adds	r2, r3, #2
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	3b01      	subs	r3, #1
 8003a3e:	b29a      	uxth	r2, r3
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a44:	2301      	movs	r3, #1
 8003a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a48:	f7fe f920 	bl	8001c8c <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d80b      	bhi.n	8003a70 <HAL_SPI_TransmitReceive+0x1e0>
 8003a58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a5e:	d007      	beq.n	8003a70 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003a60:	2303      	movs	r3, #3
 8003a62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2201      	movs	r2, #1
 8003a6a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003a6e:	e0b5      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a74:	b29b      	uxth	r3, r3
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1a2      	bne.n	80039c0 <HAL_SPI_TransmitReceive+0x130>
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a7e:	b29b      	uxth	r3, r3
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d19d      	bne.n	80039c0 <HAL_SPI_TransmitReceive+0x130>
 8003a84:	e080      	b.n	8003b88 <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d002      	beq.n	8003a94 <HAL_SPI_TransmitReceive+0x204>
 8003a8e:	8b7b      	ldrh	r3, [r7, #26]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d16f      	bne.n	8003b74 <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	330c      	adds	r3, #12
 8003a9e:	7812      	ldrb	r2, [r2, #0]
 8003aa0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ab0:	b29b      	uxth	r3, r3
 8003ab2:	3b01      	subs	r3, #1
 8003ab4:	b29a      	uxth	r2, r3
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003aba:	e05b      	b.n	8003b74 <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b02      	cmp	r3, #2
 8003ac8:	d11c      	bne.n	8003b04 <HAL_SPI_TransmitReceive+0x274>
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ace:	b29b      	uxth	r3, r3
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d017      	beq.n	8003b04 <HAL_SPI_TransmitReceive+0x274>
 8003ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ad6:	2b01      	cmp	r3, #1
 8003ad8:	d114      	bne.n	8003b04 <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	330c      	adds	r3, #12
 8003ae4:	7812      	ldrb	r2, [r2, #0]
 8003ae6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aec:	1c5a      	adds	r2, r3, #1
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003af6:	b29b      	uxth	r3, r3
 8003af8:	3b01      	subs	r3, #1
 8003afa:	b29a      	uxth	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	f003 0301 	and.w	r3, r3, #1
 8003b0e:	2b01      	cmp	r3, #1
 8003b10:	d119      	bne.n	8003b46 <HAL_SPI_TransmitReceive+0x2b6>
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d014      	beq.n	8003b46 <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	68da      	ldr	r2, [r3, #12]
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b2e:	1c5a      	adds	r2, r3, #1
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b38:	b29b      	uxth	r3, r3
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	b29a      	uxth	r2, r3
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b42:	2301      	movs	r3, #1
 8003b44:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b46:	f7fe f8a1 	bl	8001c8c <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003b52:	429a      	cmp	r2, r3
 8003b54:	d803      	bhi.n	8003b5e <HAL_SPI_TransmitReceive+0x2ce>
 8003b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b5c:	d102      	bne.n	8003b64 <HAL_SPI_TransmitReceive+0x2d4>
 8003b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d107      	bne.n	8003b74 <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 8003b64:	2303      	movs	r3, #3
 8003b66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	2201      	movs	r2, #1
 8003b6e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003b72:	e033      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d19e      	bne.n	8003abc <HAL_SPI_TransmitReceive+0x22c>
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d199      	bne.n	8003abc <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b88:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b8a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b8c:	68f8      	ldr	r0, [r7, #12]
 8003b8e:	f000 f8b7 	bl	8003d00 <SPI_EndRxTxTransaction>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d006      	beq.n	8003ba6 <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 8003b98:	2301      	movs	r3, #1
 8003b9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 8003ba4:	e01a      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d10a      	bne.n	8003bc4 <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	617b      	str	r3, [r7, #20]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	689b      	ldr	r3, [r3, #8]
 8003bc0:	617b      	str	r3, [r7, #20]
 8003bc2:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d003      	beq.n	8003bd4 <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003bd2:	e003      	b.n	8003bdc <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8003be4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3730      	adds	r7, #48	@ 0x30
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b088      	sub	sp, #32
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	60f8      	str	r0, [r7, #12]
 8003bf8:	60b9      	str	r1, [r7, #8]
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c00:	f7fe f844 	bl	8001c8c <HAL_GetTick>
 8003c04:	4602      	mov	r2, r0
 8003c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	683a      	ldr	r2, [r7, #0]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c10:	f7fe f83c 	bl	8001c8c <HAL_GetTick>
 8003c14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c16:	4b39      	ldr	r3, [pc, #228]	@ (8003cfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	015b      	lsls	r3, r3, #5
 8003c1c:	0d1b      	lsrs	r3, r3, #20
 8003c1e:	69fa      	ldr	r2, [r7, #28]
 8003c20:	fb02 f303 	mul.w	r3, r2, r3
 8003c24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c26:	e054      	b.n	8003cd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2e:	d050      	beq.n	8003cd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c30:	f7fe f82c 	bl	8001c8c <HAL_GetTick>
 8003c34:	4602      	mov	r2, r0
 8003c36:	69bb      	ldr	r3, [r7, #24]
 8003c38:	1ad3      	subs	r3, r2, r3
 8003c3a:	69fa      	ldr	r2, [r7, #28]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	d902      	bls.n	8003c46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c40:	69fb      	ldr	r3, [r7, #28]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d13d      	bne.n	8003cc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	685a      	ldr	r2, [r3, #4]
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	685b      	ldr	r3, [r3, #4]
 8003c5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c5e:	d111      	bne.n	8003c84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	689b      	ldr	r3, [r3, #8]
 8003c64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c68:	d004      	beq.n	8003c74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	689b      	ldr	r3, [r3, #8]
 8003c6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c72:	d107      	bne.n	8003c84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c8c:	d10f      	bne.n	8003cae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	681a      	ldr	r2, [r3, #0]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003c9c:	601a      	str	r2, [r3, #0]
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e017      	b.n	8003cf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	d101      	bne.n	8003ccc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	689a      	ldr	r2, [r3, #8]
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4013      	ands	r3, r2
 8003cdc:	68ba      	ldr	r2, [r7, #8]
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	bf0c      	ite	eq
 8003ce2:	2301      	moveq	r3, #1
 8003ce4:	2300      	movne	r3, #0
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	461a      	mov	r2, r3
 8003cea:	79fb      	ldrb	r3, [r7, #7]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	d19b      	bne.n	8003c28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3720      	adds	r7, #32
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}
 8003cfa:	bf00      	nop
 8003cfc:	20000004 	.word	0x20000004

08003d00 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b088      	sub	sp, #32
 8003d04:	af02      	add	r7, sp, #8
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	2201      	movs	r2, #1
 8003d14:	2102      	movs	r1, #2
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f7ff ff6a 	bl	8003bf0 <SPI_WaitFlagStateUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d007      	beq.n	8003d32 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d26:	f043 0220 	orr.w	r2, r3, #32
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e032      	b.n	8003d98 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d32:	4b1b      	ldr	r3, [pc, #108]	@ (8003da0 <SPI_EndRxTxTransaction+0xa0>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a1b      	ldr	r2, [pc, #108]	@ (8003da4 <SPI_EndRxTxTransaction+0xa4>)
 8003d38:	fba2 2303 	umull	r2, r3, r2, r3
 8003d3c:	0d5b      	lsrs	r3, r3, #21
 8003d3e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d42:	fb02 f303 	mul.w	r3, r2, r3
 8003d46:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d50:	d112      	bne.n	8003d78 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	9300      	str	r3, [sp, #0]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	2180      	movs	r1, #128	@ 0x80
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f7ff ff47 	bl	8003bf0 <SPI_WaitFlagStateUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d016      	beq.n	8003d96 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d6c:	f043 0220 	orr.w	r2, r3, #32
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e00f      	b.n	8003d98 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d00a      	beq.n	8003d94 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	3b01      	subs	r3, #1
 8003d82:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	689b      	ldr	r3, [r3, #8]
 8003d8a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d8e:	2b80      	cmp	r3, #128	@ 0x80
 8003d90:	d0f2      	beq.n	8003d78 <SPI_EndRxTxTransaction+0x78>
 8003d92:	e000      	b.n	8003d96 <SPI_EndRxTxTransaction+0x96>
        break;
 8003d94:	bf00      	nop
  }

  return HAL_OK;
 8003d96:	2300      	movs	r3, #0
}
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3718      	adds	r7, #24
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}
 8003da0:	20000004 	.word	0x20000004
 8003da4:	165e9f81 	.word	0x165e9f81

08003da8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e041      	b.n	8003e3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7fd fd7e 	bl	80018d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3304      	adds	r3, #4
 8003de4:	4619      	mov	r1, r3
 8003de6:	4610      	mov	r0, r2
 8003de8:	f000 fb12 	bl	8004410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	3708      	adds	r7, #8
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
	...

08003e48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b085      	sub	sp, #20
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	2b01      	cmp	r3, #1
 8003e5a:	d001      	beq.n	8003e60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	e03c      	b.n	8003eda <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	4a1e      	ldr	r2, [pc, #120]	@ (8003ee8 <HAL_TIM_Base_Start+0xa0>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d018      	beq.n	8003ea4 <HAL_TIM_Base_Start+0x5c>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e7a:	d013      	beq.n	8003ea4 <HAL_TIM_Base_Start+0x5c>
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	4a1a      	ldr	r2, [pc, #104]	@ (8003eec <HAL_TIM_Base_Start+0xa4>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d00e      	beq.n	8003ea4 <HAL_TIM_Base_Start+0x5c>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a19      	ldr	r2, [pc, #100]	@ (8003ef0 <HAL_TIM_Base_Start+0xa8>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d009      	beq.n	8003ea4 <HAL_TIM_Base_Start+0x5c>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	4a17      	ldr	r2, [pc, #92]	@ (8003ef4 <HAL_TIM_Base_Start+0xac>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d004      	beq.n	8003ea4 <HAL_TIM_Base_Start+0x5c>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	4a16      	ldr	r2, [pc, #88]	@ (8003ef8 <HAL_TIM_Base_Start+0xb0>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d111      	bne.n	8003ec8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f003 0307 	and.w	r3, r3, #7
 8003eae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	2b06      	cmp	r3, #6
 8003eb4:	d010      	beq.n	8003ed8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	681a      	ldr	r2, [r3, #0]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f042 0201 	orr.w	r2, r2, #1
 8003ec4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ec6:	e007      	b.n	8003ed8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0201 	orr.w	r2, r2, #1
 8003ed6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ed8:	2300      	movs	r3, #0
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3714      	adds	r7, #20
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40010000 	.word	0x40010000
 8003eec:	40000400 	.word	0x40000400
 8003ef0:	40000800 	.word	0x40000800
 8003ef4:	40000c00 	.word	0x40000c00
 8003ef8:	40014000 	.word	0x40014000

08003efc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d101      	bne.n	8003f0e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e041      	b.n	8003f92 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f14:	b2db      	uxtb	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7fd fcb4 	bl	8001890 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	2202      	movs	r2, #2
 8003f2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	3304      	adds	r3, #4
 8003f38:	4619      	mov	r1, r3
 8003f3a:	4610      	mov	r0, r2
 8003f3c:	f000 fa68 	bl	8004410 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2201      	movs	r2, #1
 8003f44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2201      	movs	r2, #1
 8003f64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2201      	movs	r2, #1
 8003f6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2201      	movs	r2, #1
 8003f74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f90:	2300      	movs	r3, #0
}
 8003f92:	4618      	mov	r0, r3
 8003f94:	3708      	adds	r7, #8
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
	...

08003f9c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d109      	bne.n	8003fc0 <HAL_TIM_PWM_Start+0x24>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	2b01      	cmp	r3, #1
 8003fb6:	bf14      	ite	ne
 8003fb8:	2301      	movne	r3, #1
 8003fba:	2300      	moveq	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	e022      	b.n	8004006 <HAL_TIM_PWM_Start+0x6a>
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2b04      	cmp	r3, #4
 8003fc4:	d109      	bne.n	8003fda <HAL_TIM_PWM_Start+0x3e>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003fcc:	b2db      	uxtb	r3, r3
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	bf14      	ite	ne
 8003fd2:	2301      	movne	r3, #1
 8003fd4:	2300      	moveq	r3, #0
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	e015      	b.n	8004006 <HAL_TIM_PWM_Start+0x6a>
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d109      	bne.n	8003ff4 <HAL_TIM_PWM_Start+0x58>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003fe6:	b2db      	uxtb	r3, r3
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	bf14      	ite	ne
 8003fec:	2301      	movne	r3, #1
 8003fee:	2300      	moveq	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	e008      	b.n	8004006 <HAL_TIM_PWM_Start+0x6a>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	2b01      	cmp	r3, #1
 8003ffe:	bf14      	ite	ne
 8004000:	2301      	movne	r3, #1
 8004002:	2300      	moveq	r3, #0
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b00      	cmp	r3, #0
 8004008:	d001      	beq.n	800400e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800400a:	2301      	movs	r3, #1
 800400c:	e068      	b.n	80040e0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d104      	bne.n	800401e <HAL_TIM_PWM_Start+0x82>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800401c:	e013      	b.n	8004046 <HAL_TIM_PWM_Start+0xaa>
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	2b04      	cmp	r3, #4
 8004022:	d104      	bne.n	800402e <HAL_TIM_PWM_Start+0x92>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800402c:	e00b      	b.n	8004046 <HAL_TIM_PWM_Start+0xaa>
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	2b08      	cmp	r3, #8
 8004032:	d104      	bne.n	800403e <HAL_TIM_PWM_Start+0xa2>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800403c:	e003      	b.n	8004046 <HAL_TIM_PWM_Start+0xaa>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2202      	movs	r2, #2
 8004042:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	2201      	movs	r2, #1
 800404c:	6839      	ldr	r1, [r7, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fc90 	bl	8004974 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a23      	ldr	r2, [pc, #140]	@ (80040e8 <HAL_TIM_PWM_Start+0x14c>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d107      	bne.n	800406e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800406c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	4a1d      	ldr	r2, [pc, #116]	@ (80040e8 <HAL_TIM_PWM_Start+0x14c>)
 8004074:	4293      	cmp	r3, r2
 8004076:	d018      	beq.n	80040aa <HAL_TIM_PWM_Start+0x10e>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004080:	d013      	beq.n	80040aa <HAL_TIM_PWM_Start+0x10e>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4a19      	ldr	r2, [pc, #100]	@ (80040ec <HAL_TIM_PWM_Start+0x150>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d00e      	beq.n	80040aa <HAL_TIM_PWM_Start+0x10e>
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4a17      	ldr	r2, [pc, #92]	@ (80040f0 <HAL_TIM_PWM_Start+0x154>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d009      	beq.n	80040aa <HAL_TIM_PWM_Start+0x10e>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	4a16      	ldr	r2, [pc, #88]	@ (80040f4 <HAL_TIM_PWM_Start+0x158>)
 800409c:	4293      	cmp	r3, r2
 800409e:	d004      	beq.n	80040aa <HAL_TIM_PWM_Start+0x10e>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a14      	ldr	r2, [pc, #80]	@ (80040f8 <HAL_TIM_PWM_Start+0x15c>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d111      	bne.n	80040ce <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 0307 	and.w	r3, r3, #7
 80040b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	2b06      	cmp	r3, #6
 80040ba:	d010      	beq.n	80040de <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	681a      	ldr	r2, [r3, #0]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f042 0201 	orr.w	r2, r2, #1
 80040ca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040cc:	e007      	b.n	80040de <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f042 0201 	orr.w	r2, r2, #1
 80040dc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040de:	2300      	movs	r3, #0
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3710      	adds	r7, #16
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	40010000 	.word	0x40010000
 80040ec:	40000400 	.word	0x40000400
 80040f0:	40000800 	.word	0x40000800
 80040f4:	40000c00 	.word	0x40000c00
 80040f8:	40014000 	.word	0x40014000

080040fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b086      	sub	sp, #24
 8004100:	af00      	add	r7, sp, #0
 8004102:	60f8      	str	r0, [r7, #12]
 8004104:	60b9      	str	r1, [r7, #8]
 8004106:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004108:	2300      	movs	r3, #0
 800410a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004112:	2b01      	cmp	r3, #1
 8004114:	d101      	bne.n	800411a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004116:	2302      	movs	r3, #2
 8004118:	e0ae      	b.n	8004278 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	2201      	movs	r2, #1
 800411e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2b0c      	cmp	r3, #12
 8004126:	f200 809f 	bhi.w	8004268 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800412a:	a201      	add	r2, pc, #4	@ (adr r2, 8004130 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800412c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004130:	08004165 	.word	0x08004165
 8004134:	08004269 	.word	0x08004269
 8004138:	08004269 	.word	0x08004269
 800413c:	08004269 	.word	0x08004269
 8004140:	080041a5 	.word	0x080041a5
 8004144:	08004269 	.word	0x08004269
 8004148:	08004269 	.word	0x08004269
 800414c:	08004269 	.word	0x08004269
 8004150:	080041e7 	.word	0x080041e7
 8004154:	08004269 	.word	0x08004269
 8004158:	08004269 	.word	0x08004269
 800415c:	08004269 	.word	0x08004269
 8004160:	08004227 	.word	0x08004227
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	68b9      	ldr	r1, [r7, #8]
 800416a:	4618      	mov	r0, r3
 800416c:	f000 f9dc 	bl	8004528 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0208 	orr.w	r2, r2, #8
 800417e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	699a      	ldr	r2, [r3, #24]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f022 0204 	bic.w	r2, r2, #4
 800418e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	6999      	ldr	r1, [r3, #24]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	430a      	orrs	r2, r1
 80041a0:	619a      	str	r2, [r3, #24]
      break;
 80041a2:	e064      	b.n	800426e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 fa22 	bl	80045f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6999      	ldr	r1, [r3, #24]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	691b      	ldr	r3, [r3, #16]
 80041da:	021a      	lsls	r2, r3, #8
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	430a      	orrs	r2, r1
 80041e2:	619a      	str	r2, [r3, #24]
      break;
 80041e4:	e043      	b.n	800426e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68b9      	ldr	r1, [r7, #8]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f000 fa6d 	bl	80046cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f042 0208 	orr.w	r2, r2, #8
 8004200:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69da      	ldr	r2, [r3, #28]
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f022 0204 	bic.w	r2, r2, #4
 8004210:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69d9      	ldr	r1, [r3, #28]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	61da      	str	r2, [r3, #28]
      break;
 8004224:	e023      	b.n	800426e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fab7 	bl	80047a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69da      	ldr	r2, [r3, #28]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69d9      	ldr	r1, [r3, #28]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	691b      	ldr	r3, [r3, #16]
 800425c:	021a      	lsls	r2, r3, #8
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	430a      	orrs	r2, r1
 8004264:	61da      	str	r2, [r3, #28]
      break;
 8004266:	e002      	b.n	800426e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	75fb      	strb	r3, [r7, #23]
      break;
 800426c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004276:	7dfb      	ldrb	r3, [r7, #23]
}
 8004278:	4618      	mov	r0, r3
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004280:	b580      	push	{r7, lr}
 8004282:	b084      	sub	sp, #16
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800428a:	2300      	movs	r3, #0
 800428c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004294:	2b01      	cmp	r3, #1
 8004296:	d101      	bne.n	800429c <HAL_TIM_ConfigClockSource+0x1c>
 8004298:	2302      	movs	r3, #2
 800429a:	e0b4      	b.n	8004406 <HAL_TIM_ConfigClockSource+0x186>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2202      	movs	r2, #2
 80042a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042b4:	68bb      	ldr	r3, [r7, #8]
 80042b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	68ba      	ldr	r2, [r7, #8]
 80042ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042d4:	d03e      	beq.n	8004354 <HAL_TIM_ConfigClockSource+0xd4>
 80042d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042da:	f200 8087 	bhi.w	80043ec <HAL_TIM_ConfigClockSource+0x16c>
 80042de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042e2:	f000 8086 	beq.w	80043f2 <HAL_TIM_ConfigClockSource+0x172>
 80042e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ea:	d87f      	bhi.n	80043ec <HAL_TIM_ConfigClockSource+0x16c>
 80042ec:	2b70      	cmp	r3, #112	@ 0x70
 80042ee:	d01a      	beq.n	8004326 <HAL_TIM_ConfigClockSource+0xa6>
 80042f0:	2b70      	cmp	r3, #112	@ 0x70
 80042f2:	d87b      	bhi.n	80043ec <HAL_TIM_ConfigClockSource+0x16c>
 80042f4:	2b60      	cmp	r3, #96	@ 0x60
 80042f6:	d050      	beq.n	800439a <HAL_TIM_ConfigClockSource+0x11a>
 80042f8:	2b60      	cmp	r3, #96	@ 0x60
 80042fa:	d877      	bhi.n	80043ec <HAL_TIM_ConfigClockSource+0x16c>
 80042fc:	2b50      	cmp	r3, #80	@ 0x50
 80042fe:	d03c      	beq.n	800437a <HAL_TIM_ConfigClockSource+0xfa>
 8004300:	2b50      	cmp	r3, #80	@ 0x50
 8004302:	d873      	bhi.n	80043ec <HAL_TIM_ConfigClockSource+0x16c>
 8004304:	2b40      	cmp	r3, #64	@ 0x40
 8004306:	d058      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x13a>
 8004308:	2b40      	cmp	r3, #64	@ 0x40
 800430a:	d86f      	bhi.n	80043ec <HAL_TIM_ConfigClockSource+0x16c>
 800430c:	2b30      	cmp	r3, #48	@ 0x30
 800430e:	d064      	beq.n	80043da <HAL_TIM_ConfigClockSource+0x15a>
 8004310:	2b30      	cmp	r3, #48	@ 0x30
 8004312:	d86b      	bhi.n	80043ec <HAL_TIM_ConfigClockSource+0x16c>
 8004314:	2b20      	cmp	r3, #32
 8004316:	d060      	beq.n	80043da <HAL_TIM_ConfigClockSource+0x15a>
 8004318:	2b20      	cmp	r3, #32
 800431a:	d867      	bhi.n	80043ec <HAL_TIM_ConfigClockSource+0x16c>
 800431c:	2b00      	cmp	r3, #0
 800431e:	d05c      	beq.n	80043da <HAL_TIM_ConfigClockSource+0x15a>
 8004320:	2b10      	cmp	r3, #16
 8004322:	d05a      	beq.n	80043da <HAL_TIM_ConfigClockSource+0x15a>
 8004324:	e062      	b.n	80043ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004336:	f000 fafd 	bl	8004934 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004348:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	609a      	str	r2, [r3, #8]
      break;
 8004352:	e04f      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004360:	683b      	ldr	r3, [r7, #0]
 8004362:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004364:	f000 fae6 	bl	8004934 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004376:	609a      	str	r2, [r3, #8]
      break;
 8004378:	e03c      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004386:	461a      	mov	r2, r3
 8004388:	f000 fa5a 	bl	8004840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2150      	movs	r1, #80	@ 0x50
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fab3 	bl	80048fe <TIM_ITRx_SetConfig>
      break;
 8004398:	e02c      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043a6:	461a      	mov	r2, r3
 80043a8:	f000 fa79 	bl	800489e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2160      	movs	r1, #96	@ 0x60
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 faa3 	bl	80048fe <TIM_ITRx_SetConfig>
      break;
 80043b8:	e01c      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043c6:	461a      	mov	r2, r3
 80043c8:	f000 fa3a 	bl	8004840 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2140      	movs	r1, #64	@ 0x40
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 fa93 	bl	80048fe <TIM_ITRx_SetConfig>
      break;
 80043d8:	e00c      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681a      	ldr	r2, [r3, #0]
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4619      	mov	r1, r3
 80043e4:	4610      	mov	r0, r2
 80043e6:	f000 fa8a 	bl	80048fe <TIM_ITRx_SetConfig>
      break;
 80043ea:	e003      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	73fb      	strb	r3, [r7, #15]
      break;
 80043f0:	e000      	b.n	80043f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004404:	7bfb      	ldrb	r3, [r7, #15]
}
 8004406:	4618      	mov	r0, r3
 8004408:	3710      	adds	r7, #16
 800440a:	46bd      	mov	sp, r7
 800440c:	bd80      	pop	{r7, pc}
	...

08004410 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004410:	b480      	push	{r7}
 8004412:	b085      	sub	sp, #20
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a3a      	ldr	r2, [pc, #232]	@ (800450c <TIM_Base_SetConfig+0xfc>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d00f      	beq.n	8004448 <TIM_Base_SetConfig+0x38>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800442e:	d00b      	beq.n	8004448 <TIM_Base_SetConfig+0x38>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a37      	ldr	r2, [pc, #220]	@ (8004510 <TIM_Base_SetConfig+0x100>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d007      	beq.n	8004448 <TIM_Base_SetConfig+0x38>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a36      	ldr	r2, [pc, #216]	@ (8004514 <TIM_Base_SetConfig+0x104>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d003      	beq.n	8004448 <TIM_Base_SetConfig+0x38>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a35      	ldr	r2, [pc, #212]	@ (8004518 <TIM_Base_SetConfig+0x108>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d108      	bne.n	800445a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800444e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	68fa      	ldr	r2, [r7, #12]
 8004456:	4313      	orrs	r3, r2
 8004458:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4a2b      	ldr	r2, [pc, #172]	@ (800450c <TIM_Base_SetConfig+0xfc>)
 800445e:	4293      	cmp	r3, r2
 8004460:	d01b      	beq.n	800449a <TIM_Base_SetConfig+0x8a>
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004468:	d017      	beq.n	800449a <TIM_Base_SetConfig+0x8a>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	4a28      	ldr	r2, [pc, #160]	@ (8004510 <TIM_Base_SetConfig+0x100>)
 800446e:	4293      	cmp	r3, r2
 8004470:	d013      	beq.n	800449a <TIM_Base_SetConfig+0x8a>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	4a27      	ldr	r2, [pc, #156]	@ (8004514 <TIM_Base_SetConfig+0x104>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d00f      	beq.n	800449a <TIM_Base_SetConfig+0x8a>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	4a26      	ldr	r2, [pc, #152]	@ (8004518 <TIM_Base_SetConfig+0x108>)
 800447e:	4293      	cmp	r3, r2
 8004480:	d00b      	beq.n	800449a <TIM_Base_SetConfig+0x8a>
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	4a25      	ldr	r2, [pc, #148]	@ (800451c <TIM_Base_SetConfig+0x10c>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d007      	beq.n	800449a <TIM_Base_SetConfig+0x8a>
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a24      	ldr	r2, [pc, #144]	@ (8004520 <TIM_Base_SetConfig+0x110>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d003      	beq.n	800449a <TIM_Base_SetConfig+0x8a>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a23      	ldr	r2, [pc, #140]	@ (8004524 <TIM_Base_SetConfig+0x114>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d108      	bne.n	80044ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	68fa      	ldr	r2, [r7, #12]
 80044a8:	4313      	orrs	r3, r2
 80044aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	695b      	ldr	r3, [r3, #20]
 80044b6:	4313      	orrs	r3, r2
 80044b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	68fa      	ldr	r2, [r7, #12]
 80044be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	689a      	ldr	r2, [r3, #8]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681a      	ldr	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a0e      	ldr	r2, [pc, #56]	@ (800450c <TIM_Base_SetConfig+0xfc>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d103      	bne.n	80044e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	691a      	ldr	r2, [r3, #16]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	691b      	ldr	r3, [r3, #16]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b01      	cmp	r3, #1
 80044f0:	d105      	bne.n	80044fe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	691b      	ldr	r3, [r3, #16]
 80044f6:	f023 0201 	bic.w	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	611a      	str	r2, [r3, #16]
  }
}
 80044fe:	bf00      	nop
 8004500:	3714      	adds	r7, #20
 8004502:	46bd      	mov	sp, r7
 8004504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004508:	4770      	bx	lr
 800450a:	bf00      	nop
 800450c:	40010000 	.word	0x40010000
 8004510:	40000400 	.word	0x40000400
 8004514:	40000800 	.word	0x40000800
 8004518:	40000c00 	.word	0x40000c00
 800451c:	40014000 	.word	0x40014000
 8004520:	40014400 	.word	0x40014400
 8004524:	40014800 	.word	0x40014800

08004528 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6a1b      	ldr	r3, [r3, #32]
 8004536:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	f023 0201 	bic.w	r2, r3, #1
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	685b      	ldr	r3, [r3, #4]
 8004548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	699b      	ldr	r3, [r3, #24]
 800454e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004556:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f023 0303 	bic.w	r3, r3, #3
 800455e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	68fa      	ldr	r2, [r7, #12]
 8004566:	4313      	orrs	r3, r2
 8004568:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	f023 0302 	bic.w	r3, r3, #2
 8004570:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	697a      	ldr	r2, [r7, #20]
 8004578:	4313      	orrs	r3, r2
 800457a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	4a1c      	ldr	r2, [pc, #112]	@ (80045f0 <TIM_OC1_SetConfig+0xc8>)
 8004580:	4293      	cmp	r3, r2
 8004582:	d10c      	bne.n	800459e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004584:	697b      	ldr	r3, [r7, #20]
 8004586:	f023 0308 	bic.w	r3, r3, #8
 800458a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	68db      	ldr	r3, [r3, #12]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	4313      	orrs	r3, r2
 8004594:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f023 0304 	bic.w	r3, r3, #4
 800459c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	4a13      	ldr	r2, [pc, #76]	@ (80045f0 <TIM_OC1_SetConfig+0xc8>)
 80045a2:	4293      	cmp	r3, r2
 80045a4:	d111      	bne.n	80045ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045ae:	693b      	ldr	r3, [r7, #16]
 80045b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	695b      	ldr	r3, [r3, #20]
 80045ba:	693a      	ldr	r2, [r7, #16]
 80045bc:	4313      	orrs	r3, r2
 80045be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	699b      	ldr	r3, [r3, #24]
 80045c4:	693a      	ldr	r2, [r7, #16]
 80045c6:	4313      	orrs	r3, r2
 80045c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	693a      	ldr	r2, [r7, #16]
 80045ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	685a      	ldr	r2, [r3, #4]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	621a      	str	r2, [r3, #32]
}
 80045e4:	bf00      	nop
 80045e6:	371c      	adds	r7, #28
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	40010000 	.word	0x40010000

080045f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b087      	sub	sp, #28
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
 80045fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a1b      	ldr	r3, [r3, #32]
 8004608:	f023 0210 	bic.w	r2, r3, #16
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	699b      	ldr	r3, [r3, #24]
 800461a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004622:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800462a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	021b      	lsls	r3, r3, #8
 8004632:	68fa      	ldr	r2, [r7, #12]
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f023 0320 	bic.w	r3, r3, #32
 800463e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	689b      	ldr	r3, [r3, #8]
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a1e      	ldr	r2, [pc, #120]	@ (80046c8 <TIM_OC2_SetConfig+0xd4>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d10d      	bne.n	8004670 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800465a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800466e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	4a15      	ldr	r2, [pc, #84]	@ (80046c8 <TIM_OC2_SetConfig+0xd4>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d113      	bne.n	80046a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004678:	693b      	ldr	r3, [r7, #16]
 800467a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800467e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004686:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	695b      	ldr	r3, [r3, #20]
 800468c:	009b      	lsls	r3, r3, #2
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	4313      	orrs	r3, r2
 8004692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	009b      	lsls	r3, r3, #2
 800469a:	693a      	ldr	r2, [r7, #16]
 800469c:	4313      	orrs	r3, r2
 800469e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685a      	ldr	r2, [r3, #4]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	697a      	ldr	r2, [r7, #20]
 80046b8:	621a      	str	r2, [r3, #32]
}
 80046ba:	bf00      	nop
 80046bc:	371c      	adds	r7, #28
 80046be:	46bd      	mov	sp, r7
 80046c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c4:	4770      	bx	lr
 80046c6:	bf00      	nop
 80046c8:	40010000 	.word	0x40010000

080046cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b087      	sub	sp, #28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6a1b      	ldr	r3, [r3, #32]
 80046e0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f023 0303 	bic.w	r3, r3, #3
 8004702:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004714:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	021b      	lsls	r3, r3, #8
 800471c:	697a      	ldr	r2, [r7, #20]
 800471e:	4313      	orrs	r3, r2
 8004720:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a1d      	ldr	r2, [pc, #116]	@ (800479c <TIM_OC3_SetConfig+0xd0>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d10d      	bne.n	8004746 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800472a:	697b      	ldr	r3, [r7, #20]
 800472c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004730:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	68db      	ldr	r3, [r3, #12]
 8004736:	021b      	lsls	r3, r3, #8
 8004738:	697a      	ldr	r2, [r7, #20]
 800473a:	4313      	orrs	r3, r2
 800473c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004744:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a14      	ldr	r2, [pc, #80]	@ (800479c <TIM_OC3_SetConfig+0xd0>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d113      	bne.n	8004776 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004754:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800475c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	695b      	ldr	r3, [r3, #20]
 8004762:	011b      	lsls	r3, r3, #4
 8004764:	693a      	ldr	r2, [r7, #16]
 8004766:	4313      	orrs	r3, r2
 8004768:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	699b      	ldr	r3, [r3, #24]
 800476e:	011b      	lsls	r3, r3, #4
 8004770:	693a      	ldr	r2, [r7, #16]
 8004772:	4313      	orrs	r3, r2
 8004774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	693a      	ldr	r2, [r7, #16]
 800477a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	685a      	ldr	r2, [r3, #4]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	621a      	str	r2, [r3, #32]
}
 8004790:	bf00      	nop
 8004792:	371c      	adds	r7, #28
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr
 800479c:	40010000 	.word	0x40010000

080047a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047a0:	b480      	push	{r7}
 80047a2:	b087      	sub	sp, #28
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
 80047a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	685b      	ldr	r3, [r3, #4]
 80047c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	69db      	ldr	r3, [r3, #28]
 80047c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	68fa      	ldr	r2, [r7, #12]
 80047e0:	4313      	orrs	r3, r2
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	031b      	lsls	r3, r3, #12
 80047f2:	693a      	ldr	r2, [r7, #16]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	4a10      	ldr	r2, [pc, #64]	@ (800483c <TIM_OC4_SetConfig+0x9c>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d109      	bne.n	8004814 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004800:	697b      	ldr	r3, [r7, #20]
 8004802:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004806:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	695b      	ldr	r3, [r3, #20]
 800480c:	019b      	lsls	r3, r3, #6
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4313      	orrs	r3, r2
 8004812:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	685a      	ldr	r2, [r3, #4]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	693a      	ldr	r2, [r7, #16]
 800482c:	621a      	str	r2, [r3, #32]
}
 800482e:	bf00      	nop
 8004830:	371c      	adds	r7, #28
 8004832:	46bd      	mov	sp, r7
 8004834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004838:	4770      	bx	lr
 800483a:	bf00      	nop
 800483c:	40010000 	.word	0x40010000

08004840 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004840:	b480      	push	{r7}
 8004842:	b087      	sub	sp, #28
 8004844:	af00      	add	r7, sp, #0
 8004846:	60f8      	str	r0, [r7, #12]
 8004848:	60b9      	str	r1, [r7, #8]
 800484a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6a1b      	ldr	r3, [r3, #32]
 8004856:	f023 0201 	bic.w	r2, r3, #1
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	699b      	ldr	r3, [r3, #24]
 8004862:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800486a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	f023 030a 	bic.w	r3, r3, #10
 800487c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800487e:	697a      	ldr	r2, [r7, #20]
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	4313      	orrs	r3, r2
 8004884:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	693a      	ldr	r2, [r7, #16]
 800488a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	697a      	ldr	r2, [r7, #20]
 8004890:	621a      	str	r2, [r3, #32]
}
 8004892:	bf00      	nop
 8004894:	371c      	adds	r7, #28
 8004896:	46bd      	mov	sp, r7
 8004898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489c:	4770      	bx	lr

0800489e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800489e:	b480      	push	{r7}
 80048a0:	b087      	sub	sp, #28
 80048a2:	af00      	add	r7, sp, #0
 80048a4:	60f8      	str	r0, [r7, #12]
 80048a6:	60b9      	str	r1, [r7, #8]
 80048a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6a1b      	ldr	r3, [r3, #32]
 80048ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	6a1b      	ldr	r3, [r3, #32]
 80048b4:	f023 0210 	bic.w	r2, r3, #16
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	031b      	lsls	r3, r3, #12
 80048ce:	693a      	ldr	r2, [r7, #16]
 80048d0:	4313      	orrs	r3, r2
 80048d2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048d4:	697b      	ldr	r3, [r7, #20]
 80048d6:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048da:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	011b      	lsls	r3, r3, #4
 80048e0:	697a      	ldr	r2, [r7, #20]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	693a      	ldr	r2, [r7, #16]
 80048ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	621a      	str	r2, [r3, #32]
}
 80048f2:	bf00      	nop
 80048f4:	371c      	adds	r7, #28
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr

080048fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048fe:	b480      	push	{r7}
 8004900:	b085      	sub	sp, #20
 8004902:	af00      	add	r7, sp, #0
 8004904:	6078      	str	r0, [r7, #4]
 8004906:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004914:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004916:	683a      	ldr	r2, [r7, #0]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	4313      	orrs	r3, r2
 800491c:	f043 0307 	orr.w	r3, r3, #7
 8004920:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	68fa      	ldr	r2, [r7, #12]
 8004926:	609a      	str	r2, [r3, #8]
}
 8004928:	bf00      	nop
 800492a:	3714      	adds	r7, #20
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004934:	b480      	push	{r7}
 8004936:	b087      	sub	sp, #28
 8004938:	af00      	add	r7, sp, #0
 800493a:	60f8      	str	r0, [r7, #12]
 800493c:	60b9      	str	r1, [r7, #8]
 800493e:	607a      	str	r2, [r7, #4]
 8004940:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	689b      	ldr	r3, [r3, #8]
 8004946:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004948:	697b      	ldr	r3, [r7, #20]
 800494a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800494e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	021a      	lsls	r2, r3, #8
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	431a      	orrs	r2, r3
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	4313      	orrs	r3, r2
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	697a      	ldr	r2, [r7, #20]
 8004966:	609a      	str	r2, [r3, #8]
}
 8004968:	bf00      	nop
 800496a:	371c      	adds	r7, #28
 800496c:	46bd      	mov	sp, r7
 800496e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004972:	4770      	bx	lr

08004974 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004974:	b480      	push	{r7}
 8004976:	b087      	sub	sp, #28
 8004978:	af00      	add	r7, sp, #0
 800497a:	60f8      	str	r0, [r7, #12]
 800497c:	60b9      	str	r1, [r7, #8]
 800497e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	f003 031f 	and.w	r3, r3, #31
 8004986:	2201      	movs	r2, #1
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a1a      	ldr	r2, [r3, #32]
 8004992:	697b      	ldr	r3, [r7, #20]
 8004994:	43db      	mvns	r3, r3
 8004996:	401a      	ands	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	6a1a      	ldr	r2, [r3, #32]
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f003 031f 	and.w	r3, r3, #31
 80049a6:	6879      	ldr	r1, [r7, #4]
 80049a8:	fa01 f303 	lsl.w	r3, r1, r3
 80049ac:	431a      	orrs	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	621a      	str	r2, [r3, #32]
}
 80049b2:	bf00      	nop
 80049b4:	371c      	adds	r7, #28
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
	...

080049c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b085      	sub	sp, #20
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049d0:	2b01      	cmp	r3, #1
 80049d2:	d101      	bne.n	80049d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e050      	b.n	8004a7a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2201      	movs	r2, #1
 80049dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2202      	movs	r2, #2
 80049e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68fa      	ldr	r2, [r7, #12]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a1c      	ldr	r2, [pc, #112]	@ (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	d018      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a24:	d013      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a18      	ldr	r2, [pc, #96]	@ (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a2c:	4293      	cmp	r3, r2
 8004a2e:	d00e      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	4a16      	ldr	r2, [pc, #88]	@ (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d009      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	4a15      	ldr	r2, [pc, #84]	@ (8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d004      	beq.n	8004a4e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a13      	ldr	r2, [pc, #76]	@ (8004a98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	d10c      	bne.n	8004a68 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a4e:	68bb      	ldr	r3, [r7, #8]
 8004a50:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a54:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	685b      	ldr	r3, [r3, #4]
 8004a5a:	68ba      	ldr	r2, [r7, #8]
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	68ba      	ldr	r2, [r7, #8]
 8004a66:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2200      	movs	r2, #0
 8004a74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3714      	adds	r7, #20
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr
 8004a86:	bf00      	nop
 8004a88:	40010000 	.word	0x40010000
 8004a8c:	40000400 	.word	0x40000400
 8004a90:	40000800 	.word	0x40000800
 8004a94:	40000c00 	.word	0x40000c00
 8004a98:	40014000 	.word	0x40014000

08004a9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d101      	bne.n	8004aae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e042      	b.n	8004b34 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ab4:	b2db      	uxtb	r3, r3
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d106      	bne.n	8004ac8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2200      	movs	r2, #0
 8004abe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f7fc ff5e 	bl	8001984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2224      	movs	r2, #36	@ 0x24
 8004acc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	68da      	ldr	r2, [r3, #12]
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ade:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ae0:	6878      	ldr	r0, [r7, #4]
 8004ae2:	f000 fdbd 	bl	8005660 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	691a      	ldr	r2, [r3, #16]
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004af4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	695a      	ldr	r2, [r3, #20]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	68da      	ldr	r2, [r3, #12]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2220      	movs	r2, #32
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2220      	movs	r2, #32
 8004b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b32:	2300      	movs	r3, #0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3708      	adds	r7, #8
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd80      	pop	{r7, pc}

08004b3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b08a      	sub	sp, #40	@ 0x28
 8004b40:	af02      	add	r7, sp, #8
 8004b42:	60f8      	str	r0, [r7, #12]
 8004b44:	60b9      	str	r1, [r7, #8]
 8004b46:	603b      	str	r3, [r7, #0]
 8004b48:	4613      	mov	r3, r2
 8004b4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b4c:	2300      	movs	r3, #0
 8004b4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b56:	b2db      	uxtb	r3, r3
 8004b58:	2b20      	cmp	r3, #32
 8004b5a:	d175      	bne.n	8004c48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d002      	beq.n	8004b68 <HAL_UART_Transmit+0x2c>
 8004b62:	88fb      	ldrh	r3, [r7, #6]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b68:	2301      	movs	r3, #1
 8004b6a:	e06e      	b.n	8004c4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	2221      	movs	r2, #33	@ 0x21
 8004b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b7a:	f7fd f887 	bl	8001c8c <HAL_GetTick>
 8004b7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	88fa      	ldrh	r2, [r7, #6]
 8004b84:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	88fa      	ldrh	r2, [r7, #6]
 8004b8a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b94:	d108      	bne.n	8004ba8 <HAL_UART_Transmit+0x6c>
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d104      	bne.n	8004ba8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	61bb      	str	r3, [r7, #24]
 8004ba6:	e003      	b.n	8004bb0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bac:	2300      	movs	r3, #0
 8004bae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bb0:	e02e      	b.n	8004c10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	9300      	str	r3, [sp, #0]
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2180      	movs	r1, #128	@ 0x80
 8004bbc:	68f8      	ldr	r0, [r7, #12]
 8004bbe:	f000 fb1f 	bl	8005200 <UART_WaitOnFlagUntilTimeout>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d005      	beq.n	8004bd4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e03a      	b.n	8004c4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d10b      	bne.n	8004bf2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bda:	69bb      	ldr	r3, [r7, #24]
 8004bdc:	881b      	ldrh	r3, [r3, #0]
 8004bde:	461a      	mov	r2, r3
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004be8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bea:	69bb      	ldr	r3, [r7, #24]
 8004bec:	3302      	adds	r3, #2
 8004bee:	61bb      	str	r3, [r7, #24]
 8004bf0:	e007      	b.n	8004c02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	781a      	ldrb	r2, [r3, #0]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	3301      	adds	r3, #1
 8004c00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c06:	b29b      	uxth	r3, r3
 8004c08:	3b01      	subs	r3, #1
 8004c0a:	b29a      	uxth	r2, r3
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c14:	b29b      	uxth	r3, r3
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1cb      	bne.n	8004bb2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	9300      	str	r3, [sp, #0]
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	2200      	movs	r2, #0
 8004c22:	2140      	movs	r1, #64	@ 0x40
 8004c24:	68f8      	ldr	r0, [r7, #12]
 8004c26:	f000 faeb 	bl	8005200 <UART_WaitOnFlagUntilTimeout>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d005      	beq.n	8004c3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c38:	2303      	movs	r3, #3
 8004c3a:	e006      	b.n	8004c4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2220      	movs	r2, #32
 8004c40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c44:	2300      	movs	r3, #0
 8004c46:	e000      	b.n	8004c4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c48:	2302      	movs	r3, #2
  }
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3720      	adds	r7, #32
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}

08004c52 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c52:	b580      	push	{r7, lr}
 8004c54:	b084      	sub	sp, #16
 8004c56:	af00      	add	r7, sp, #0
 8004c58:	60f8      	str	r0, [r7, #12]
 8004c5a:	60b9      	str	r1, [r7, #8]
 8004c5c:	4613      	mov	r3, r2
 8004c5e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c66:	b2db      	uxtb	r3, r3
 8004c68:	2b20      	cmp	r3, #32
 8004c6a:	d112      	bne.n	8004c92 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <HAL_UART_Receive_IT+0x26>
 8004c72:	88fb      	ldrh	r3, [r7, #6]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d101      	bne.n	8004c7c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	e00b      	b.n	8004c94 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c82:	88fb      	ldrh	r3, [r7, #6]
 8004c84:	461a      	mov	r2, r3
 8004c86:	68b9      	ldr	r1, [r7, #8]
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f000 fb12 	bl	80052b2 <UART_Start_Receive_IT>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	e000      	b.n	8004c94 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c92:	2302      	movs	r3, #2
  }
}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3710      	adds	r7, #16
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b0ba      	sub	sp, #232	@ 0xe8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	68db      	ldr	r3, [r3, #12]
 8004cb4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	695b      	ldr	r3, [r3, #20]
 8004cbe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cd2:	f003 030f 	and.w	r3, r3, #15
 8004cd6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004cda:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d10f      	bne.n	8004d02 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ce2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ce6:	f003 0320 	and.w	r3, r3, #32
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d009      	beq.n	8004d02 <HAL_UART_IRQHandler+0x66>
 8004cee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cf2:	f003 0320 	and.w	r3, r3, #32
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 fbf2 	bl	80054e4 <UART_Receive_IT>
      return;
 8004d00:	e25b      	b.n	80051ba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004d02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 80de 	beq.w	8004ec8 <HAL_UART_IRQHandler+0x22c>
 8004d0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d106      	bne.n	8004d26 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d1c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	f000 80d1 	beq.w	8004ec8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d2a:	f003 0301 	and.w	r3, r3, #1
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00b      	beq.n	8004d4a <HAL_UART_IRQHandler+0xae>
 8004d32:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d005      	beq.n	8004d4a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d42:	f043 0201 	orr.w	r2, r3, #1
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d4e:	f003 0304 	and.w	r3, r3, #4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d00b      	beq.n	8004d6e <HAL_UART_IRQHandler+0xd2>
 8004d56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d5a:	f003 0301 	and.w	r3, r3, #1
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d005      	beq.n	8004d6e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d66:	f043 0202 	orr.w	r2, r3, #2
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d00b      	beq.n	8004d92 <HAL_UART_IRQHandler+0xf6>
 8004d7a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d7e:	f003 0301 	and.w	r3, r3, #1
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d005      	beq.n	8004d92 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d8a:	f043 0204 	orr.w	r2, r3, #4
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d96:	f003 0308 	and.w	r3, r3, #8
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d011      	beq.n	8004dc2 <HAL_UART_IRQHandler+0x126>
 8004d9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004da2:	f003 0320 	and.w	r3, r3, #32
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d105      	bne.n	8004db6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004daa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004dae:	f003 0301 	and.w	r3, r3, #1
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d005      	beq.n	8004dc2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dba:	f043 0208 	orr.w	r2, r3, #8
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	f000 81f2 	beq.w	80051b0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004dd0:	f003 0320 	and.w	r3, r3, #32
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d008      	beq.n	8004dea <HAL_UART_IRQHandler+0x14e>
 8004dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ddc:	f003 0320 	and.w	r3, r3, #32
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d002      	beq.n	8004dea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 fb7d 	bl	80054e4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	695b      	ldr	r3, [r3, #20]
 8004df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004df4:	2b40      	cmp	r3, #64	@ 0x40
 8004df6:	bf0c      	ite	eq
 8004df8:	2301      	moveq	r3, #1
 8004dfa:	2300      	movne	r3, #0
 8004dfc:	b2db      	uxtb	r3, r3
 8004dfe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e06:	f003 0308 	and.w	r3, r3, #8
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d103      	bne.n	8004e16 <HAL_UART_IRQHandler+0x17a>
 8004e0e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d04f      	beq.n	8004eb6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004e16:	6878      	ldr	r0, [r7, #4]
 8004e18:	f000 fa85 	bl	8005326 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	695b      	ldr	r3, [r3, #20]
 8004e22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e26:	2b40      	cmp	r3, #64	@ 0x40
 8004e28:	d141      	bne.n	8004eae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3314      	adds	r3, #20
 8004e30:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e34:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004e38:	e853 3f00 	ldrex	r3, [r3]
 8004e3c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004e40:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004e44:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e48:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3314      	adds	r3, #20
 8004e52:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e56:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e62:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e66:	e841 2300 	strex	r3, r2, [r1]
 8004e6a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e6e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1d9      	bne.n	8004e2a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d013      	beq.n	8004ea6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e82:	4a7e      	ldr	r2, [pc, #504]	@ (800507c <HAL_UART_IRQHandler+0x3e0>)
 8004e84:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e8a:	4618      	mov	r0, r3
 8004e8c:	f7fd fd1b 	bl	80028c6 <HAL_DMA_Abort_IT>
 8004e90:	4603      	mov	r3, r0
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d016      	beq.n	8004ec4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004ea0:	4610      	mov	r0, r2
 8004ea2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ea4:	e00e      	b.n	8004ec4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f000 f994 	bl	80051d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eac:	e00a      	b.n	8004ec4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f000 f990 	bl	80051d4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb4:	e006      	b.n	8004ec4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f000 f98c 	bl	80051d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004ec2:	e175      	b.n	80051b0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ec4:	bf00      	nop
    return;
 8004ec6:	e173      	b.n	80051b0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	f040 814f 	bne.w	8005170 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ed6:	f003 0310 	and.w	r3, r3, #16
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	f000 8148 	beq.w	8005170 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ee0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ee4:	f003 0310 	and.w	r3, r3, #16
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 8141 	beq.w	8005170 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60bb      	str	r3, [r7, #8]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	60bb      	str	r3, [r7, #8]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	60bb      	str	r3, [r7, #8]
 8004f02:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	695b      	ldr	r3, [r3, #20]
 8004f0a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f0e:	2b40      	cmp	r3, #64	@ 0x40
 8004f10:	f040 80b6 	bne.w	8005080 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004f20:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 8145 	beq.w	80051b4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f32:	429a      	cmp	r2, r3
 8004f34:	f080 813e 	bcs.w	80051b4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004f3e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004f4a:	f000 8088 	beq.w	800505e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	330c      	adds	r3, #12
 8004f54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f5c:	e853 3f00 	ldrex	r3, [r3]
 8004f60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f64:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f6c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	330c      	adds	r3, #12
 8004f76:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f82:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f86:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f8a:	e841 2300 	strex	r3, r2, [r1]
 8004f8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d1d9      	bne.n	8004f4e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	3314      	adds	r3, #20
 8004fa0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fa2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004fa4:	e853 3f00 	ldrex	r3, [r3]
 8004fa8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004faa:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004fac:	f023 0301 	bic.w	r3, r3, #1
 8004fb0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	3314      	adds	r3, #20
 8004fba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004fbe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004fc2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fc4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004fc6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004fca:	e841 2300 	strex	r3, r2, [r1]
 8004fce:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004fd0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d1e1      	bne.n	8004f9a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	3314      	adds	r3, #20
 8004fdc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fde:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004fe0:	e853 3f00 	ldrex	r3, [r3]
 8004fe4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004fe6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004fe8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	3314      	adds	r3, #20
 8004ff6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004ffa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004ffc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ffe:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005000:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005002:	e841 2300 	strex	r3, r2, [r1]
 8005006:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005008:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800500a:	2b00      	cmp	r3, #0
 800500c:	d1e3      	bne.n	8004fd6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2220      	movs	r2, #32
 8005012:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2200      	movs	r2, #0
 800501a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	330c      	adds	r3, #12
 8005022:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005024:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005026:	e853 3f00 	ldrex	r3, [r3]
 800502a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800502c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800502e:	f023 0310 	bic.w	r3, r3, #16
 8005032:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	330c      	adds	r3, #12
 800503c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005040:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005042:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005044:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005046:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005048:	e841 2300 	strex	r3, r2, [r1]
 800504c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800504e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005050:	2b00      	cmp	r3, #0
 8005052:	d1e3      	bne.n	800501c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005058:	4618      	mov	r0, r3
 800505a:	f7fd fbc4 	bl	80027e6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2202      	movs	r2, #2
 8005062:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800506c:	b29b      	uxth	r3, r3
 800506e:	1ad3      	subs	r3, r2, r3
 8005070:	b29b      	uxth	r3, r3
 8005072:	4619      	mov	r1, r3
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 f8b7 	bl	80051e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800507a:	e09b      	b.n	80051b4 <HAL_UART_IRQHandler+0x518>
 800507c:	080053ed 	.word	0x080053ed
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005088:	b29b      	uxth	r3, r3
 800508a:	1ad3      	subs	r3, r2, r3
 800508c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005094:	b29b      	uxth	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 808e 	beq.w	80051b8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800509c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f000 8089 	beq.w	80051b8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	330c      	adds	r3, #12
 80050ac:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b0:	e853 3f00 	ldrex	r3, [r3]
 80050b4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050bc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	330c      	adds	r3, #12
 80050c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80050ca:	647a      	str	r2, [r7, #68]	@ 0x44
 80050cc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ce:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050d0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050d2:	e841 2300 	strex	r3, r2, [r1]
 80050d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d1e3      	bne.n	80050a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3314      	adds	r3, #20
 80050e4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050e8:	e853 3f00 	ldrex	r3, [r3]
 80050ec:	623b      	str	r3, [r7, #32]
   return(result);
 80050ee:	6a3b      	ldr	r3, [r7, #32]
 80050f0:	f023 0301 	bic.w	r3, r3, #1
 80050f4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	3314      	adds	r3, #20
 80050fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005102:	633a      	str	r2, [r7, #48]	@ 0x30
 8005104:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005106:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800510a:	e841 2300 	strex	r3, r2, [r1]
 800510e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005112:	2b00      	cmp	r3, #0
 8005114:	d1e3      	bne.n	80050de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	2220      	movs	r2, #32
 800511a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2200      	movs	r2, #0
 8005122:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	330c      	adds	r3, #12
 800512a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	e853 3f00 	ldrex	r3, [r3]
 8005132:	60fb      	str	r3, [r7, #12]
   return(result);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	f023 0310 	bic.w	r3, r3, #16
 800513a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	330c      	adds	r3, #12
 8005144:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005148:	61fa      	str	r2, [r7, #28]
 800514a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514c:	69b9      	ldr	r1, [r7, #24]
 800514e:	69fa      	ldr	r2, [r7, #28]
 8005150:	e841 2300 	strex	r3, r2, [r1]
 8005154:	617b      	str	r3, [r7, #20]
   return(result);
 8005156:	697b      	ldr	r3, [r7, #20]
 8005158:	2b00      	cmp	r3, #0
 800515a:	d1e3      	bne.n	8005124 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2202      	movs	r2, #2
 8005160:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005162:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005166:	4619      	mov	r1, r3
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f83d 	bl	80051e8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800516e:	e023      	b.n	80051b8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005174:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005178:	2b00      	cmp	r3, #0
 800517a:	d009      	beq.n	8005190 <HAL_UART_IRQHandler+0x4f4>
 800517c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005184:	2b00      	cmp	r3, #0
 8005186:	d003      	beq.n	8005190 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f000 f943 	bl	8005414 <UART_Transmit_IT>
    return;
 800518e:	e014      	b.n	80051ba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005190:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00e      	beq.n	80051ba <HAL_UART_IRQHandler+0x51e>
 800519c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80051a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d008      	beq.n	80051ba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f983 	bl	80054b4 <UART_EndTransmit_IT>
    return;
 80051ae:	e004      	b.n	80051ba <HAL_UART_IRQHandler+0x51e>
    return;
 80051b0:	bf00      	nop
 80051b2:	e002      	b.n	80051ba <HAL_UART_IRQHandler+0x51e>
      return;
 80051b4:	bf00      	nop
 80051b6:	e000      	b.n	80051ba <HAL_UART_IRQHandler+0x51e>
      return;
 80051b8:	bf00      	nop
  }
}
 80051ba:	37e8      	adds	r7, #232	@ 0xe8
 80051bc:	46bd      	mov	sp, r7
 80051be:	bd80      	pop	{r7, pc}

080051c0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80051c0:	b480      	push	{r7}
 80051c2:	b083      	sub	sp, #12
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80051c8:	bf00      	nop
 80051ca:	370c      	adds	r7, #12
 80051cc:	46bd      	mov	sp, r7
 80051ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d2:	4770      	bx	lr

080051d4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b083      	sub	sp, #12
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80051dc:	bf00      	nop
 80051de:	370c      	adds	r7, #12
 80051e0:	46bd      	mov	sp, r7
 80051e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e6:	4770      	bx	lr

080051e8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80051e8:	b480      	push	{r7}
 80051ea:	b083      	sub	sp, #12
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
 80051f0:	460b      	mov	r3, r1
 80051f2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051f4:	bf00      	nop
 80051f6:	370c      	adds	r7, #12
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr

08005200 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	60b9      	str	r1, [r7, #8]
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	4613      	mov	r3, r2
 800520e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005210:	e03b      	b.n	800528a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005212:	6a3b      	ldr	r3, [r7, #32]
 8005214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005218:	d037      	beq.n	800528a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800521a:	f7fc fd37 	bl	8001c8c <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	6a3a      	ldr	r2, [r7, #32]
 8005226:	429a      	cmp	r2, r3
 8005228:	d302      	bcc.n	8005230 <UART_WaitOnFlagUntilTimeout+0x30>
 800522a:	6a3b      	ldr	r3, [r7, #32]
 800522c:	2b00      	cmp	r3, #0
 800522e:	d101      	bne.n	8005234 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005230:	2303      	movs	r3, #3
 8005232:	e03a      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	f003 0304 	and.w	r3, r3, #4
 800523e:	2b00      	cmp	r3, #0
 8005240:	d023      	beq.n	800528a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	2b80      	cmp	r3, #128	@ 0x80
 8005246:	d020      	beq.n	800528a <UART_WaitOnFlagUntilTimeout+0x8a>
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	2b40      	cmp	r3, #64	@ 0x40
 800524c:	d01d      	beq.n	800528a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b08      	cmp	r3, #8
 800525a:	d116      	bne.n	800528a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800525c:	2300      	movs	r3, #0
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	617b      	str	r3, [r7, #20]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	685b      	ldr	r3, [r3, #4]
 800526e:	617b      	str	r3, [r7, #20]
 8005270:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005272:	68f8      	ldr	r0, [r7, #12]
 8005274:	f000 f857 	bl	8005326 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	2208      	movs	r2, #8
 800527c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	2200      	movs	r2, #0
 8005282:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005286:	2301      	movs	r3, #1
 8005288:	e00f      	b.n	80052aa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	4013      	ands	r3, r2
 8005294:	68ba      	ldr	r2, [r7, #8]
 8005296:	429a      	cmp	r2, r3
 8005298:	bf0c      	ite	eq
 800529a:	2301      	moveq	r3, #1
 800529c:	2300      	movne	r3, #0
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	461a      	mov	r2, r3
 80052a2:	79fb      	ldrb	r3, [r7, #7]
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d0b4      	beq.n	8005212 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052a8:	2300      	movs	r3, #0
}
 80052aa:	4618      	mov	r0, r3
 80052ac:	3718      	adds	r7, #24
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80052b2:	b480      	push	{r7}
 80052b4:	b085      	sub	sp, #20
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	60f8      	str	r0, [r7, #12]
 80052ba:	60b9      	str	r1, [r7, #8]
 80052bc:	4613      	mov	r3, r2
 80052be:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	68ba      	ldr	r2, [r7, #8]
 80052c4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	88fa      	ldrh	r2, [r7, #6]
 80052ca:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	88fa      	ldrh	r2, [r7, #6]
 80052d0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	2200      	movs	r2, #0
 80052d6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2222      	movs	r2, #34	@ 0x22
 80052dc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	691b      	ldr	r3, [r3, #16]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d007      	beq.n	80052f8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	68da      	ldr	r2, [r3, #12]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052f6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	695a      	ldr	r2, [r3, #20]
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f042 0201 	orr.w	r2, r2, #1
 8005306:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	68da      	ldr	r2, [r3, #12]
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	f042 0220 	orr.w	r2, r2, #32
 8005316:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3714      	adds	r7, #20
 800531e:	46bd      	mov	sp, r7
 8005320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005324:	4770      	bx	lr

08005326 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005326:	b480      	push	{r7}
 8005328:	b095      	sub	sp, #84	@ 0x54
 800532a:	af00      	add	r7, sp, #0
 800532c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	330c      	adds	r3, #12
 8005334:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005336:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005338:	e853 3f00 	ldrex	r3, [r3]
 800533c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800533e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005340:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005344:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	330c      	adds	r3, #12
 800534c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800534e:	643a      	str	r2, [r7, #64]	@ 0x40
 8005350:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005352:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005354:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005356:	e841 2300 	strex	r3, r2, [r1]
 800535a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800535c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1e5      	bne.n	800532e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	3314      	adds	r3, #20
 8005368:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800536a:	6a3b      	ldr	r3, [r7, #32]
 800536c:	e853 3f00 	ldrex	r3, [r3]
 8005370:	61fb      	str	r3, [r7, #28]
   return(result);
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	f023 0301 	bic.w	r3, r3, #1
 8005378:	64bb      	str	r3, [r7, #72]	@ 0x48
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	3314      	adds	r3, #20
 8005380:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005382:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005384:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005386:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005388:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800538a:	e841 2300 	strex	r3, r2, [r1]
 800538e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005392:	2b00      	cmp	r3, #0
 8005394:	d1e5      	bne.n	8005362 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800539a:	2b01      	cmp	r3, #1
 800539c:	d119      	bne.n	80053d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	330c      	adds	r3, #12
 80053a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	e853 3f00 	ldrex	r3, [r3]
 80053ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80053ae:	68bb      	ldr	r3, [r7, #8]
 80053b0:	f023 0310 	bic.w	r3, r3, #16
 80053b4:	647b      	str	r3, [r7, #68]	@ 0x44
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	330c      	adds	r3, #12
 80053bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80053be:	61ba      	str	r2, [r7, #24]
 80053c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c2:	6979      	ldr	r1, [r7, #20]
 80053c4:	69ba      	ldr	r2, [r7, #24]
 80053c6:	e841 2300 	strex	r3, r2, [r1]
 80053ca:	613b      	str	r3, [r7, #16]
   return(result);
 80053cc:	693b      	ldr	r3, [r7, #16]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d1e5      	bne.n	800539e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2220      	movs	r2, #32
 80053d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	2200      	movs	r2, #0
 80053de:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80053e0:	bf00      	nop
 80053e2:	3754      	adds	r7, #84	@ 0x54
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr

080053ec <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053ec:	b580      	push	{r7, lr}
 80053ee:	b084      	sub	sp, #16
 80053f0:	af00      	add	r7, sp, #0
 80053f2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053f8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2200      	movs	r2, #0
 8005404:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005406:	68f8      	ldr	r0, [r7, #12]
 8005408:	f7ff fee4 	bl	80051d4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800540c:	bf00      	nop
 800540e:	3710      	adds	r7, #16
 8005410:	46bd      	mov	sp, r7
 8005412:	bd80      	pop	{r7, pc}

08005414 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005414:	b480      	push	{r7}
 8005416:	b085      	sub	sp, #20
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005422:	b2db      	uxtb	r3, r3
 8005424:	2b21      	cmp	r3, #33	@ 0x21
 8005426:	d13e      	bne.n	80054a6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005430:	d114      	bne.n	800545c <UART_Transmit_IT+0x48>
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	691b      	ldr	r3, [r3, #16]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d110      	bne.n	800545c <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6a1b      	ldr	r3, [r3, #32]
 800543e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	881b      	ldrh	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800544e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6a1b      	ldr	r3, [r3, #32]
 8005454:	1c9a      	adds	r2, r3, #2
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	621a      	str	r2, [r3, #32]
 800545a:	e008      	b.n	800546e <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	1c59      	adds	r1, r3, #1
 8005462:	687a      	ldr	r2, [r7, #4]
 8005464:	6211      	str	r1, [r2, #32]
 8005466:	781a      	ldrb	r2, [r3, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005472:	b29b      	uxth	r3, r3
 8005474:	3b01      	subs	r3, #1
 8005476:	b29b      	uxth	r3, r3
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	4619      	mov	r1, r3
 800547c:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10f      	bne.n	80054a2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68da      	ldr	r2, [r3, #12]
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005490:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68da      	ldr	r2, [r3, #12]
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80054a0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80054a2:	2300      	movs	r3, #0
 80054a4:	e000      	b.n	80054a8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80054a6:	2302      	movs	r3, #2
  }
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3714      	adds	r7, #20
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr

080054b4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b082      	sub	sp, #8
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68da      	ldr	r2, [r3, #12]
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054ca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff fe73 	bl	80051c0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80054da:	2300      	movs	r3, #0
}
 80054dc:	4618      	mov	r0, r3
 80054de:	3708      	adds	r7, #8
 80054e0:	46bd      	mov	sp, r7
 80054e2:	bd80      	pop	{r7, pc}

080054e4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b08c      	sub	sp, #48	@ 0x30
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	2b22      	cmp	r3, #34	@ 0x22
 80054f6:	f040 80ae 	bne.w	8005656 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	689b      	ldr	r3, [r3, #8]
 80054fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005502:	d117      	bne.n	8005534 <UART_Receive_IT+0x50>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d113      	bne.n	8005534 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800550c:	2300      	movs	r3, #0
 800550e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005514:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	b29b      	uxth	r3, r3
 800551e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005522:	b29a      	uxth	r2, r3
 8005524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005526:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800552c:	1c9a      	adds	r2, r3, #2
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	629a      	str	r2, [r3, #40]	@ 0x28
 8005532:	e026      	b.n	8005582 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005538:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800553a:	2300      	movs	r3, #0
 800553c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	689b      	ldr	r3, [r3, #8]
 8005542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005546:	d007      	beq.n	8005558 <UART_Receive_IT+0x74>
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	689b      	ldr	r3, [r3, #8]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d10a      	bne.n	8005566 <UART_Receive_IT+0x82>
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	691b      	ldr	r3, [r3, #16]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d106      	bne.n	8005566 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	b2da      	uxtb	r2, r3
 8005560:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005562:	701a      	strb	r2, [r3, #0]
 8005564:	e008      	b.n	8005578 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	685b      	ldr	r3, [r3, #4]
 800556c:	b2db      	uxtb	r3, r3
 800556e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005572:	b2da      	uxtb	r2, r3
 8005574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005576:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800557c:	1c5a      	adds	r2, r3, #1
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005586:	b29b      	uxth	r3, r3
 8005588:	3b01      	subs	r3, #1
 800558a:	b29b      	uxth	r3, r3
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	4619      	mov	r1, r3
 8005590:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005592:	2b00      	cmp	r3, #0
 8005594:	d15d      	bne.n	8005652 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	68da      	ldr	r2, [r3, #12]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f022 0220 	bic.w	r2, r2, #32
 80055a4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68da      	ldr	r2, [r3, #12]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80055b4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	695a      	ldr	r2, [r3, #20]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0201 	bic.w	r2, r2, #1
 80055c4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2220      	movs	r2, #32
 80055ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2200      	movs	r2, #0
 80055d2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d135      	bne.n	8005648 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	330c      	adds	r3, #12
 80055e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055ea:	697b      	ldr	r3, [r7, #20]
 80055ec:	e853 3f00 	ldrex	r3, [r3]
 80055f0:	613b      	str	r3, [r7, #16]
   return(result);
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	f023 0310 	bic.w	r3, r3, #16
 80055f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	330c      	adds	r3, #12
 8005600:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005602:	623a      	str	r2, [r7, #32]
 8005604:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005606:	69f9      	ldr	r1, [r7, #28]
 8005608:	6a3a      	ldr	r2, [r7, #32]
 800560a:	e841 2300 	strex	r3, r2, [r1]
 800560e:	61bb      	str	r3, [r7, #24]
   return(result);
 8005610:	69bb      	ldr	r3, [r7, #24]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d1e5      	bne.n	80055e2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f003 0310 	and.w	r3, r3, #16
 8005620:	2b10      	cmp	r3, #16
 8005622:	d10a      	bne.n	800563a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005624:	2300      	movs	r3, #0
 8005626:	60fb      	str	r3, [r7, #12]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	60fb      	str	r3, [r7, #12]
 8005638:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800563e:	4619      	mov	r1, r3
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f7ff fdd1 	bl	80051e8 <HAL_UARTEx_RxEventCallback>
 8005646:	e002      	b.n	800564e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7fc f849 	bl	80016e0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800564e:	2300      	movs	r3, #0
 8005650:	e002      	b.n	8005658 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005652:	2300      	movs	r3, #0
 8005654:	e000      	b.n	8005658 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005656:	2302      	movs	r3, #2
  }
}
 8005658:	4618      	mov	r0, r3
 800565a:	3730      	adds	r7, #48	@ 0x30
 800565c:	46bd      	mov	sp, r7
 800565e:	bd80      	pop	{r7, pc}

08005660 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005660:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005664:	b0c0      	sub	sp, #256	@ 0x100
 8005666:	af00      	add	r7, sp, #0
 8005668:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800566c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	691b      	ldr	r3, [r3, #16]
 8005674:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800567c:	68d9      	ldr	r1, [r3, #12]
 800567e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005682:	681a      	ldr	r2, [r3, #0]
 8005684:	ea40 0301 	orr.w	r3, r0, r1
 8005688:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800568a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800568e:	689a      	ldr	r2, [r3, #8]
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	431a      	orrs	r2, r3
 8005698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	431a      	orrs	r2, r3
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a4:	69db      	ldr	r3, [r3, #28]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80056ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80056b8:	f021 010c 	bic.w	r1, r1, #12
 80056bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80056c6:	430b      	orrs	r3, r1
 80056c8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80056ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	695b      	ldr	r3, [r3, #20]
 80056d2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80056d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056da:	6999      	ldr	r1, [r3, #24]
 80056dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	ea40 0301 	orr.w	r3, r0, r1
 80056e6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80056e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ec:	681a      	ldr	r2, [r3, #0]
 80056ee:	4b8f      	ldr	r3, [pc, #572]	@ (800592c <UART_SetConfig+0x2cc>)
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d005      	beq.n	8005700 <UART_SetConfig+0xa0>
 80056f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056f8:	681a      	ldr	r2, [r3, #0]
 80056fa:	4b8d      	ldr	r3, [pc, #564]	@ (8005930 <UART_SetConfig+0x2d0>)
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d104      	bne.n	800570a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005700:	f7fd fee6 	bl	80034d0 <HAL_RCC_GetPCLK2Freq>
 8005704:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005708:	e003      	b.n	8005712 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800570a:	f7fd fecd 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 800570e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005716:	69db      	ldr	r3, [r3, #28]
 8005718:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800571c:	f040 810c 	bne.w	8005938 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005720:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005724:	2200      	movs	r2, #0
 8005726:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800572a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800572e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005732:	4622      	mov	r2, r4
 8005734:	462b      	mov	r3, r5
 8005736:	1891      	adds	r1, r2, r2
 8005738:	65b9      	str	r1, [r7, #88]	@ 0x58
 800573a:	415b      	adcs	r3, r3
 800573c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800573e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005742:	4621      	mov	r1, r4
 8005744:	eb12 0801 	adds.w	r8, r2, r1
 8005748:	4629      	mov	r1, r5
 800574a:	eb43 0901 	adc.w	r9, r3, r1
 800574e:	f04f 0200 	mov.w	r2, #0
 8005752:	f04f 0300 	mov.w	r3, #0
 8005756:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800575a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800575e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005762:	4690      	mov	r8, r2
 8005764:	4699      	mov	r9, r3
 8005766:	4623      	mov	r3, r4
 8005768:	eb18 0303 	adds.w	r3, r8, r3
 800576c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005770:	462b      	mov	r3, r5
 8005772:	eb49 0303 	adc.w	r3, r9, r3
 8005776:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800577a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005786:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800578a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800578e:	460b      	mov	r3, r1
 8005790:	18db      	adds	r3, r3, r3
 8005792:	653b      	str	r3, [r7, #80]	@ 0x50
 8005794:	4613      	mov	r3, r2
 8005796:	eb42 0303 	adc.w	r3, r2, r3
 800579a:	657b      	str	r3, [r7, #84]	@ 0x54
 800579c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80057a0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80057a4:	f7fa fd74 	bl	8000290 <__aeabi_uldivmod>
 80057a8:	4602      	mov	r2, r0
 80057aa:	460b      	mov	r3, r1
 80057ac:	4b61      	ldr	r3, [pc, #388]	@ (8005934 <UART_SetConfig+0x2d4>)
 80057ae:	fba3 2302 	umull	r2, r3, r3, r2
 80057b2:	095b      	lsrs	r3, r3, #5
 80057b4:	011c      	lsls	r4, r3, #4
 80057b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057ba:	2200      	movs	r2, #0
 80057bc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80057c0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80057c4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80057c8:	4642      	mov	r2, r8
 80057ca:	464b      	mov	r3, r9
 80057cc:	1891      	adds	r1, r2, r2
 80057ce:	64b9      	str	r1, [r7, #72]	@ 0x48
 80057d0:	415b      	adcs	r3, r3
 80057d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057d4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80057d8:	4641      	mov	r1, r8
 80057da:	eb12 0a01 	adds.w	sl, r2, r1
 80057de:	4649      	mov	r1, r9
 80057e0:	eb43 0b01 	adc.w	fp, r3, r1
 80057e4:	f04f 0200 	mov.w	r2, #0
 80057e8:	f04f 0300 	mov.w	r3, #0
 80057ec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057f0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057f4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057f8:	4692      	mov	sl, r2
 80057fa:	469b      	mov	fp, r3
 80057fc:	4643      	mov	r3, r8
 80057fe:	eb1a 0303 	adds.w	r3, sl, r3
 8005802:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005806:	464b      	mov	r3, r9
 8005808:	eb4b 0303 	adc.w	r3, fp, r3
 800580c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800581c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005820:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005824:	460b      	mov	r3, r1
 8005826:	18db      	adds	r3, r3, r3
 8005828:	643b      	str	r3, [r7, #64]	@ 0x40
 800582a:	4613      	mov	r3, r2
 800582c:	eb42 0303 	adc.w	r3, r2, r3
 8005830:	647b      	str	r3, [r7, #68]	@ 0x44
 8005832:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005836:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800583a:	f7fa fd29 	bl	8000290 <__aeabi_uldivmod>
 800583e:	4602      	mov	r2, r0
 8005840:	460b      	mov	r3, r1
 8005842:	4611      	mov	r1, r2
 8005844:	4b3b      	ldr	r3, [pc, #236]	@ (8005934 <UART_SetConfig+0x2d4>)
 8005846:	fba3 2301 	umull	r2, r3, r3, r1
 800584a:	095b      	lsrs	r3, r3, #5
 800584c:	2264      	movs	r2, #100	@ 0x64
 800584e:	fb02 f303 	mul.w	r3, r2, r3
 8005852:	1acb      	subs	r3, r1, r3
 8005854:	00db      	lsls	r3, r3, #3
 8005856:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800585a:	4b36      	ldr	r3, [pc, #216]	@ (8005934 <UART_SetConfig+0x2d4>)
 800585c:	fba3 2302 	umull	r2, r3, r3, r2
 8005860:	095b      	lsrs	r3, r3, #5
 8005862:	005b      	lsls	r3, r3, #1
 8005864:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005868:	441c      	add	r4, r3
 800586a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800586e:	2200      	movs	r2, #0
 8005870:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005874:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005878:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800587c:	4642      	mov	r2, r8
 800587e:	464b      	mov	r3, r9
 8005880:	1891      	adds	r1, r2, r2
 8005882:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005884:	415b      	adcs	r3, r3
 8005886:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005888:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800588c:	4641      	mov	r1, r8
 800588e:	1851      	adds	r1, r2, r1
 8005890:	6339      	str	r1, [r7, #48]	@ 0x30
 8005892:	4649      	mov	r1, r9
 8005894:	414b      	adcs	r3, r1
 8005896:	637b      	str	r3, [r7, #52]	@ 0x34
 8005898:	f04f 0200 	mov.w	r2, #0
 800589c:	f04f 0300 	mov.w	r3, #0
 80058a0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80058a4:	4659      	mov	r1, fp
 80058a6:	00cb      	lsls	r3, r1, #3
 80058a8:	4651      	mov	r1, sl
 80058aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058ae:	4651      	mov	r1, sl
 80058b0:	00ca      	lsls	r2, r1, #3
 80058b2:	4610      	mov	r0, r2
 80058b4:	4619      	mov	r1, r3
 80058b6:	4603      	mov	r3, r0
 80058b8:	4642      	mov	r2, r8
 80058ba:	189b      	adds	r3, r3, r2
 80058bc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80058c0:	464b      	mov	r3, r9
 80058c2:	460a      	mov	r2, r1
 80058c4:	eb42 0303 	adc.w	r3, r2, r3
 80058c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80058cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d0:	685b      	ldr	r3, [r3, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80058d8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80058dc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80058e0:	460b      	mov	r3, r1
 80058e2:	18db      	adds	r3, r3, r3
 80058e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80058e6:	4613      	mov	r3, r2
 80058e8:	eb42 0303 	adc.w	r3, r2, r3
 80058ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058f2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80058f6:	f7fa fccb 	bl	8000290 <__aeabi_uldivmod>
 80058fa:	4602      	mov	r2, r0
 80058fc:	460b      	mov	r3, r1
 80058fe:	4b0d      	ldr	r3, [pc, #52]	@ (8005934 <UART_SetConfig+0x2d4>)
 8005900:	fba3 1302 	umull	r1, r3, r3, r2
 8005904:	095b      	lsrs	r3, r3, #5
 8005906:	2164      	movs	r1, #100	@ 0x64
 8005908:	fb01 f303 	mul.w	r3, r1, r3
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	00db      	lsls	r3, r3, #3
 8005910:	3332      	adds	r3, #50	@ 0x32
 8005912:	4a08      	ldr	r2, [pc, #32]	@ (8005934 <UART_SetConfig+0x2d4>)
 8005914:	fba2 2303 	umull	r2, r3, r2, r3
 8005918:	095b      	lsrs	r3, r3, #5
 800591a:	f003 0207 	and.w	r2, r3, #7
 800591e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	4422      	add	r2, r4
 8005926:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005928:	e106      	b.n	8005b38 <UART_SetConfig+0x4d8>
 800592a:	bf00      	nop
 800592c:	40011000 	.word	0x40011000
 8005930:	40011400 	.word	0x40011400
 8005934:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005938:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800593c:	2200      	movs	r2, #0
 800593e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005942:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005946:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800594a:	4642      	mov	r2, r8
 800594c:	464b      	mov	r3, r9
 800594e:	1891      	adds	r1, r2, r2
 8005950:	6239      	str	r1, [r7, #32]
 8005952:	415b      	adcs	r3, r3
 8005954:	627b      	str	r3, [r7, #36]	@ 0x24
 8005956:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800595a:	4641      	mov	r1, r8
 800595c:	1854      	adds	r4, r2, r1
 800595e:	4649      	mov	r1, r9
 8005960:	eb43 0501 	adc.w	r5, r3, r1
 8005964:	f04f 0200 	mov.w	r2, #0
 8005968:	f04f 0300 	mov.w	r3, #0
 800596c:	00eb      	lsls	r3, r5, #3
 800596e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005972:	00e2      	lsls	r2, r4, #3
 8005974:	4614      	mov	r4, r2
 8005976:	461d      	mov	r5, r3
 8005978:	4643      	mov	r3, r8
 800597a:	18e3      	adds	r3, r4, r3
 800597c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005980:	464b      	mov	r3, r9
 8005982:	eb45 0303 	adc.w	r3, r5, r3
 8005986:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800598a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800598e:	685b      	ldr	r3, [r3, #4]
 8005990:	2200      	movs	r2, #0
 8005992:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005996:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800599a:	f04f 0200 	mov.w	r2, #0
 800599e:	f04f 0300 	mov.w	r3, #0
 80059a2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80059a6:	4629      	mov	r1, r5
 80059a8:	008b      	lsls	r3, r1, #2
 80059aa:	4621      	mov	r1, r4
 80059ac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059b0:	4621      	mov	r1, r4
 80059b2:	008a      	lsls	r2, r1, #2
 80059b4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80059b8:	f7fa fc6a 	bl	8000290 <__aeabi_uldivmod>
 80059bc:	4602      	mov	r2, r0
 80059be:	460b      	mov	r3, r1
 80059c0:	4b60      	ldr	r3, [pc, #384]	@ (8005b44 <UART_SetConfig+0x4e4>)
 80059c2:	fba3 2302 	umull	r2, r3, r3, r2
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	011c      	lsls	r4, r3, #4
 80059ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80059ce:	2200      	movs	r2, #0
 80059d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80059d4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80059d8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80059dc:	4642      	mov	r2, r8
 80059de:	464b      	mov	r3, r9
 80059e0:	1891      	adds	r1, r2, r2
 80059e2:	61b9      	str	r1, [r7, #24]
 80059e4:	415b      	adcs	r3, r3
 80059e6:	61fb      	str	r3, [r7, #28]
 80059e8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059ec:	4641      	mov	r1, r8
 80059ee:	1851      	adds	r1, r2, r1
 80059f0:	6139      	str	r1, [r7, #16]
 80059f2:	4649      	mov	r1, r9
 80059f4:	414b      	adcs	r3, r1
 80059f6:	617b      	str	r3, [r7, #20]
 80059f8:	f04f 0200 	mov.w	r2, #0
 80059fc:	f04f 0300 	mov.w	r3, #0
 8005a00:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005a04:	4659      	mov	r1, fp
 8005a06:	00cb      	lsls	r3, r1, #3
 8005a08:	4651      	mov	r1, sl
 8005a0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a0e:	4651      	mov	r1, sl
 8005a10:	00ca      	lsls	r2, r1, #3
 8005a12:	4610      	mov	r0, r2
 8005a14:	4619      	mov	r1, r3
 8005a16:	4603      	mov	r3, r0
 8005a18:	4642      	mov	r2, r8
 8005a1a:	189b      	adds	r3, r3, r2
 8005a1c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005a20:	464b      	mov	r3, r9
 8005a22:	460a      	mov	r2, r1
 8005a24:	eb42 0303 	adc.w	r3, r2, r3
 8005a28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2200      	movs	r2, #0
 8005a34:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005a36:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005a38:	f04f 0200 	mov.w	r2, #0
 8005a3c:	f04f 0300 	mov.w	r3, #0
 8005a40:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005a44:	4649      	mov	r1, r9
 8005a46:	008b      	lsls	r3, r1, #2
 8005a48:	4641      	mov	r1, r8
 8005a4a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a4e:	4641      	mov	r1, r8
 8005a50:	008a      	lsls	r2, r1, #2
 8005a52:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a56:	f7fa fc1b 	bl	8000290 <__aeabi_uldivmod>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	4611      	mov	r1, r2
 8005a60:	4b38      	ldr	r3, [pc, #224]	@ (8005b44 <UART_SetConfig+0x4e4>)
 8005a62:	fba3 2301 	umull	r2, r3, r3, r1
 8005a66:	095b      	lsrs	r3, r3, #5
 8005a68:	2264      	movs	r2, #100	@ 0x64
 8005a6a:	fb02 f303 	mul.w	r3, r2, r3
 8005a6e:	1acb      	subs	r3, r1, r3
 8005a70:	011b      	lsls	r3, r3, #4
 8005a72:	3332      	adds	r3, #50	@ 0x32
 8005a74:	4a33      	ldr	r2, [pc, #204]	@ (8005b44 <UART_SetConfig+0x4e4>)
 8005a76:	fba2 2303 	umull	r2, r3, r2, r3
 8005a7a:	095b      	lsrs	r3, r3, #5
 8005a7c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a80:	441c      	add	r4, r3
 8005a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a86:	2200      	movs	r2, #0
 8005a88:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a8a:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a8c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a90:	4642      	mov	r2, r8
 8005a92:	464b      	mov	r3, r9
 8005a94:	1891      	adds	r1, r2, r2
 8005a96:	60b9      	str	r1, [r7, #8]
 8005a98:	415b      	adcs	r3, r3
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005aa0:	4641      	mov	r1, r8
 8005aa2:	1851      	adds	r1, r2, r1
 8005aa4:	6039      	str	r1, [r7, #0]
 8005aa6:	4649      	mov	r1, r9
 8005aa8:	414b      	adcs	r3, r1
 8005aaa:	607b      	str	r3, [r7, #4]
 8005aac:	f04f 0200 	mov.w	r2, #0
 8005ab0:	f04f 0300 	mov.w	r3, #0
 8005ab4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005ab8:	4659      	mov	r1, fp
 8005aba:	00cb      	lsls	r3, r1, #3
 8005abc:	4651      	mov	r1, sl
 8005abe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ac2:	4651      	mov	r1, sl
 8005ac4:	00ca      	lsls	r2, r1, #3
 8005ac6:	4610      	mov	r0, r2
 8005ac8:	4619      	mov	r1, r3
 8005aca:	4603      	mov	r3, r0
 8005acc:	4642      	mov	r2, r8
 8005ace:	189b      	adds	r3, r3, r2
 8005ad0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005ad2:	464b      	mov	r3, r9
 8005ad4:	460a      	mov	r2, r1
 8005ad6:	eb42 0303 	adc.w	r3, r2, r3
 8005ada:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae0:	685b      	ldr	r3, [r3, #4]
 8005ae2:	2200      	movs	r2, #0
 8005ae4:	663b      	str	r3, [r7, #96]	@ 0x60
 8005ae6:	667a      	str	r2, [r7, #100]	@ 0x64
 8005ae8:	f04f 0200 	mov.w	r2, #0
 8005aec:	f04f 0300 	mov.w	r3, #0
 8005af0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005af4:	4649      	mov	r1, r9
 8005af6:	008b      	lsls	r3, r1, #2
 8005af8:	4641      	mov	r1, r8
 8005afa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005afe:	4641      	mov	r1, r8
 8005b00:	008a      	lsls	r2, r1, #2
 8005b02:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005b06:	f7fa fbc3 	bl	8000290 <__aeabi_uldivmod>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b44 <UART_SetConfig+0x4e4>)
 8005b10:	fba3 1302 	umull	r1, r3, r3, r2
 8005b14:	095b      	lsrs	r3, r3, #5
 8005b16:	2164      	movs	r1, #100	@ 0x64
 8005b18:	fb01 f303 	mul.w	r3, r1, r3
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	011b      	lsls	r3, r3, #4
 8005b20:	3332      	adds	r3, #50	@ 0x32
 8005b22:	4a08      	ldr	r2, [pc, #32]	@ (8005b44 <UART_SetConfig+0x4e4>)
 8005b24:	fba2 2303 	umull	r2, r3, r2, r3
 8005b28:	095b      	lsrs	r3, r3, #5
 8005b2a:	f003 020f 	and.w	r2, r3, #15
 8005b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4422      	add	r2, r4
 8005b36:	609a      	str	r2, [r3, #8]
}
 8005b38:	bf00      	nop
 8005b3a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005b44:	51eb851f 	.word	0x51eb851f

08005b48 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005b4c:	4904      	ldr	r1, [pc, #16]	@ (8005b60 <MX_FATFS_Init+0x18>)
 8005b4e:	4805      	ldr	r0, [pc, #20]	@ (8005b64 <MX_FATFS_Init+0x1c>)
 8005b50:	f003 f828 	bl	8008ba4 <FATFS_LinkDriver>
 8005b54:	4603      	mov	r3, r0
 8005b56:	461a      	mov	r2, r3
 8005b58:	4b03      	ldr	r3, [pc, #12]	@ (8005b68 <MX_FATFS_Init+0x20>)
 8005b5a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8005b5c:	bf00      	nop
 8005b5e:	bd80      	pop	{r7, pc}
 8005b60:	200022d8 	.word	0x200022d8
 8005b64:	20000010 	.word	0x20000010
 8005b68:	200022d4 	.word	0x200022d4

08005b6c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005b70:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	46bd      	mov	sp, r7
 8005b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7a:	4770      	bx	lr

08005b7c <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b082      	sub	sp, #8
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	4603      	mov	r3, r0
 8005b84:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
	return SD_disk_initialize(pdrv);
 8005b86:	79fb      	ldrb	r3, [r7, #7]
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f7fa fead 	bl	80008e8 <SD_disk_initialize>
 8005b8e:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3708      	adds	r7, #8
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}

08005b98 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b082      	sub	sp, #8
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	4603      	mov	r3, r0
 8005ba0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8005ba2:	79fb      	ldrb	r3, [r7, #7]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fa ff85 	bl	8000ab4 <SD_disk_status>
 8005baa:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 8005bac:	4618      	mov	r0, r3
 8005bae:	3708      	adds	r7, #8
 8005bb0:	46bd      	mov	sp, r7
 8005bb2:	bd80      	pop	{r7, pc}

08005bb4 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b084      	sub	sp, #16
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	607a      	str	r2, [r7, #4]
 8005bbe:	603b      	str	r3, [r7, #0]
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8005bc4:	7bf8      	ldrb	r0, [r7, #15]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	687a      	ldr	r2, [r7, #4]
 8005bca:	68b9      	ldr	r1, [r7, #8]
 8005bcc:	f7fa ff88 	bl	8000ae0 <SD_disk_read>
 8005bd0:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8005bda:	b580      	push	{r7, lr}
 8005bdc:	b084      	sub	sp, #16
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	60b9      	str	r1, [r7, #8]
 8005be2:	607a      	str	r2, [r7, #4]
 8005be4:	603b      	str	r3, [r7, #0]
 8005be6:	4603      	mov	r3, r0
 8005be8:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8005bea:	7bf8      	ldrb	r0, [r7, #15]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	68b9      	ldr	r1, [r7, #8]
 8005bf2:	f7fa ffdf 	bl	8000bb4 <SD_disk_write>
 8005bf6:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	3710      	adds	r7, #16
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	bd80      	pop	{r7, pc}

08005c00 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005c00:	b580      	push	{r7, lr}
 8005c02:	b082      	sub	sp, #8
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	4603      	mov	r3, r0
 8005c08:	603a      	str	r2, [r7, #0]
 8005c0a:	71fb      	strb	r3, [r7, #7]
 8005c0c:	460b      	mov	r3, r1
 8005c0e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8005c10:	79b9      	ldrb	r1, [r7, #6]
 8005c12:	79fb      	ldrb	r3, [r7, #7]
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7fb f850 	bl	8000cbc <SD_disk_ioctl>
 8005c1c:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 8005c1e:	4618      	mov	r0, r3
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
	...

08005c28 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b084      	sub	sp, #16
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	4603      	mov	r3, r0
 8005c30:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8005c32:	79fb      	ldrb	r3, [r7, #7]
 8005c34:	4a08      	ldr	r2, [pc, #32]	@ (8005c58 <disk_status+0x30>)
 8005c36:	009b      	lsls	r3, r3, #2
 8005c38:	4413      	add	r3, r2
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	79fa      	ldrb	r2, [r7, #7]
 8005c40:	4905      	ldr	r1, [pc, #20]	@ (8005c58 <disk_status+0x30>)
 8005c42:	440a      	add	r2, r1
 8005c44:	7a12      	ldrb	r2, [r2, #8]
 8005c46:	4610      	mov	r0, r2
 8005c48:	4798      	blx	r3
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005c4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3710      	adds	r7, #16
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}
 8005c58:	20002504 	.word	0x20002504

08005c5c <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005c5c:	b580      	push	{r7, lr}
 8005c5e:	b084      	sub	sp, #16
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	4603      	mov	r3, r0
 8005c64:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 8005c6a:	79fb      	ldrb	r3, [r7, #7]
 8005c6c:	4a0e      	ldr	r2, [pc, #56]	@ (8005ca8 <disk_initialize+0x4c>)
 8005c6e:	5cd3      	ldrb	r3, [r2, r3]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d114      	bne.n	8005c9e <disk_initialize+0x42>
  {
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005c74:	79fb      	ldrb	r3, [r7, #7]
 8005c76:	4a0c      	ldr	r2, [pc, #48]	@ (8005ca8 <disk_initialize+0x4c>)
 8005c78:	009b      	lsls	r3, r3, #2
 8005c7a:	4413      	add	r3, r2
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	79fa      	ldrb	r2, [r7, #7]
 8005c82:	4909      	ldr	r1, [pc, #36]	@ (8005ca8 <disk_initialize+0x4c>)
 8005c84:	440a      	add	r2, r1
 8005c86:	7a12      	ldrb	r2, [r2, #8]
 8005c88:	4610      	mov	r0, r2
 8005c8a:	4798      	blx	r3
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	73fb      	strb	r3, [r7, #15]
    if(stat == RES_OK)
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d103      	bne.n	8005c9e <disk_initialize+0x42>
    {
      disk.is_initialized[pdrv] = 1;
 8005c96:	79fb      	ldrb	r3, [r7, #7]
 8005c98:	4a03      	ldr	r2, [pc, #12]	@ (8005ca8 <disk_initialize+0x4c>)
 8005c9a:	2101      	movs	r1, #1
 8005c9c:	54d1      	strb	r1, [r2, r3]
    }
  }
  return stat;
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	20002504 	.word	0x20002504

08005cac <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8005cac:	b590      	push	{r4, r7, lr}
 8005cae:	b087      	sub	sp, #28
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60b9      	str	r1, [r7, #8]
 8005cb4:	607a      	str	r2, [r7, #4]
 8005cb6:	603b      	str	r3, [r7, #0]
 8005cb8:	4603      	mov	r3, r0
 8005cba:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8005cbc:	7bfb      	ldrb	r3, [r7, #15]
 8005cbe:	4a0a      	ldr	r2, [pc, #40]	@ (8005ce8 <disk_read+0x3c>)
 8005cc0:	009b      	lsls	r3, r3, #2
 8005cc2:	4413      	add	r3, r2
 8005cc4:	685b      	ldr	r3, [r3, #4]
 8005cc6:	689c      	ldr	r4, [r3, #8]
 8005cc8:	7bfb      	ldrb	r3, [r7, #15]
 8005cca:	4a07      	ldr	r2, [pc, #28]	@ (8005ce8 <disk_read+0x3c>)
 8005ccc:	4413      	add	r3, r2
 8005cce:	7a18      	ldrb	r0, [r3, #8]
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	687a      	ldr	r2, [r7, #4]
 8005cd4:	68b9      	ldr	r1, [r7, #8]
 8005cd6:	47a0      	blx	r4
 8005cd8:	4603      	mov	r3, r0
 8005cda:	75fb      	strb	r3, [r7, #23]
  return res;
 8005cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	371c      	adds	r7, #28
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd90      	pop	{r4, r7, pc}
 8005ce6:	bf00      	nop
 8005ce8:	20002504 	.word	0x20002504

08005cec <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8005cec:	b590      	push	{r4, r7, lr}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	60b9      	str	r1, [r7, #8]
 8005cf4:	607a      	str	r2, [r7, #4]
 8005cf6:	603b      	str	r3, [r7, #0]
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005cfc:	7bfb      	ldrb	r3, [r7, #15]
 8005cfe:	4a0a      	ldr	r2, [pc, #40]	@ (8005d28 <disk_write+0x3c>)
 8005d00:	009b      	lsls	r3, r3, #2
 8005d02:	4413      	add	r3, r2
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	68dc      	ldr	r4, [r3, #12]
 8005d08:	7bfb      	ldrb	r3, [r7, #15]
 8005d0a:	4a07      	ldr	r2, [pc, #28]	@ (8005d28 <disk_write+0x3c>)
 8005d0c:	4413      	add	r3, r2
 8005d0e:	7a18      	ldrb	r0, [r3, #8]
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	687a      	ldr	r2, [r7, #4]
 8005d14:	68b9      	ldr	r1, [r7, #8]
 8005d16:	47a0      	blx	r4
 8005d18:	4603      	mov	r3, r0
 8005d1a:	75fb      	strb	r3, [r7, #23]
  return res;
 8005d1c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd90      	pop	{r4, r7, pc}
 8005d26:	bf00      	nop
 8005d28:	20002504 	.word	0x20002504

08005d2c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005d2c:	b580      	push	{r7, lr}
 8005d2e:	b084      	sub	sp, #16
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	4603      	mov	r3, r0
 8005d34:	603a      	str	r2, [r7, #0]
 8005d36:	71fb      	strb	r3, [r7, #7]
 8005d38:	460b      	mov	r3, r1
 8005d3a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005d3c:	79fb      	ldrb	r3, [r7, #7]
 8005d3e:	4a09      	ldr	r2, [pc, #36]	@ (8005d64 <disk_ioctl+0x38>)
 8005d40:	009b      	lsls	r3, r3, #2
 8005d42:	4413      	add	r3, r2
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	79fa      	ldrb	r2, [r7, #7]
 8005d4a:	4906      	ldr	r1, [pc, #24]	@ (8005d64 <disk_ioctl+0x38>)
 8005d4c:	440a      	add	r2, r1
 8005d4e:	7a10      	ldrb	r0, [r2, #8]
 8005d50:	79b9      	ldrb	r1, [r7, #6]
 8005d52:	683a      	ldr	r2, [r7, #0]
 8005d54:	4798      	blx	r3
 8005d56:	4603      	mov	r3, r0
 8005d58:	73fb      	strb	r3, [r7, #15]
  return res;
 8005d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3710      	adds	r7, #16
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	20002504 	.word	0x20002504

08005d68 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	3301      	adds	r3, #1
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 8005d78:	89fb      	ldrh	r3, [r7, #14]
 8005d7a:	021b      	lsls	r3, r3, #8
 8005d7c:	b21a      	sxth	r2, r3
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	781b      	ldrb	r3, [r3, #0]
 8005d82:	b21b      	sxth	r3, r3
 8005d84:	4313      	orrs	r3, r2
 8005d86:	b21b      	sxth	r3, r3
 8005d88:	81fb      	strh	r3, [r7, #14]
	return rv;
 8005d8a:	89fb      	ldrh	r3, [r7, #14]
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	3303      	adds	r3, #3
 8005da4:	781b      	ldrb	r3, [r3, #0]
 8005da6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	021b      	lsls	r3, r3, #8
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	3202      	adds	r2, #2
 8005db0:	7812      	ldrb	r2, [r2, #0]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	021b      	lsls	r3, r3, #8
 8005dba:	687a      	ldr	r2, [r7, #4]
 8005dbc:	3201      	adds	r2, #1
 8005dbe:	7812      	ldrb	r2, [r2, #0]
 8005dc0:	4313      	orrs	r3, r2
 8005dc2:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	021b      	lsls	r3, r3, #8
 8005dc8:	687a      	ldr	r2, [r7, #4]
 8005dca:	7812      	ldrb	r2, [r2, #0]
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	60fb      	str	r3, [r7, #12]
	return rv;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3714      	adds	r7, #20
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr

08005dde <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 8005dde:	b480      	push	{r7}
 8005de0:	b083      	sub	sp, #12
 8005de2:	af00      	add	r7, sp, #0
 8005de4:	6078      	str	r0, [r7, #4]
 8005de6:	460b      	mov	r3, r1
 8005de8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	607a      	str	r2, [r7, #4]
 8005df0:	887a      	ldrh	r2, [r7, #2]
 8005df2:	b2d2      	uxtb	r2, r2
 8005df4:	701a      	strb	r2, [r3, #0]
 8005df6:	887b      	ldrh	r3, [r7, #2]
 8005df8:	0a1b      	lsrs	r3, r3, #8
 8005dfa:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	607a      	str	r2, [r7, #4]
 8005e02:	887a      	ldrh	r2, [r7, #2]
 8005e04:	b2d2      	uxtb	r2, r2
 8005e06:	701a      	strb	r2, [r3, #0]
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
 8005e1c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	683a      	ldr	r2, [r7, #0]
 8005e26:	b2d2      	uxtb	r2, r2
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	0a1b      	lsrs	r3, r3, #8
 8005e2e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	1c5a      	adds	r2, r3, #1
 8005e34:	607a      	str	r2, [r7, #4]
 8005e36:	683a      	ldr	r2, [r7, #0]
 8005e38:	b2d2      	uxtb	r2, r2
 8005e3a:	701a      	strb	r2, [r3, #0]
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	0a1b      	lsrs	r3, r3, #8
 8005e40:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	1c5a      	adds	r2, r3, #1
 8005e46:	607a      	str	r2, [r7, #4]
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	b2d2      	uxtb	r2, r2
 8005e4c:	701a      	strb	r2, [r3, #0]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	0a1b      	lsrs	r3, r3, #8
 8005e52:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	1c5a      	adds	r2, r3, #1
 8005e58:	607a      	str	r2, [r7, #4]
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	b2d2      	uxtb	r2, r2
 8005e5e:	701a      	strb	r2, [r3, #0]
}
 8005e60:	bf00      	nop
 8005e62:	370c      	adds	r7, #12
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8005e7c:	68bb      	ldr	r3, [r7, #8]
 8005e7e:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d00d      	beq.n	8005ea2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	1c53      	adds	r3, r2, #1
 8005e8a:	613b      	str	r3, [r7, #16]
 8005e8c:	697b      	ldr	r3, [r7, #20]
 8005e8e:	1c59      	adds	r1, r3, #1
 8005e90:	6179      	str	r1, [r7, #20]
 8005e92:	7812      	ldrb	r2, [r2, #0]
 8005e94:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	3b01      	subs	r3, #1
 8005e9a:	607b      	str	r3, [r7, #4]
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d1f1      	bne.n	8005e86 <mem_cpy+0x1a>
	}
}
 8005ea2:	bf00      	nop
 8005ea4:	371c      	adds	r7, #28
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005eae:	b480      	push	{r7}
 8005eb0:	b087      	sub	sp, #28
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	60f8      	str	r0, [r7, #12]
 8005eb6:	60b9      	str	r1, [r7, #8]
 8005eb8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005ebe:	697b      	ldr	r3, [r7, #20]
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	617a      	str	r2, [r7, #20]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	b2d2      	uxtb	r2, r2
 8005ec8:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	3b01      	subs	r3, #1
 8005ece:	607b      	str	r3, [r7, #4]
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d1f3      	bne.n	8005ebe <mem_set+0x10>
}
 8005ed6:	bf00      	nop
 8005ed8:	bf00      	nop
 8005eda:	371c      	adds	r7, #28
 8005edc:	46bd      	mov	sp, r7
 8005ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee2:	4770      	bx	lr

08005ee4 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005ee4:	b480      	push	{r7}
 8005ee6:	b089      	sub	sp, #36	@ 0x24
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	60f8      	str	r0, [r7, #12]
 8005eec:	60b9      	str	r1, [r7, #8]
 8005eee:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	61fb      	str	r3, [r7, #28]
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005ef8:	2300      	movs	r3, #0
 8005efa:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	1c5a      	adds	r2, r3, #1
 8005f00:	61fa      	str	r2, [r7, #28]
 8005f02:	781b      	ldrb	r3, [r3, #0]
 8005f04:	4619      	mov	r1, r3
 8005f06:	69bb      	ldr	r3, [r7, #24]
 8005f08:	1c5a      	adds	r2, r3, #1
 8005f0a:	61ba      	str	r2, [r7, #24]
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	1acb      	subs	r3, r1, r3
 8005f10:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	3b01      	subs	r3, #1
 8005f16:	607b      	str	r3, [r7, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d002      	beq.n	8005f24 <mem_cmp+0x40>
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0eb      	beq.n	8005efc <mem_cmp+0x18>

	return r;
 8005f24:	697b      	ldr	r3, [r7, #20]
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3724      	adds	r7, #36	@ 0x24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f30:	4770      	bx	lr

08005f32 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005f32:	b480      	push	{r7}
 8005f34:	b083      	sub	sp, #12
 8005f36:	af00      	add	r7, sp, #0
 8005f38:	6078      	str	r0, [r7, #4]
 8005f3a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005f3c:	e002      	b.n	8005f44 <chk_chr+0x12>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	3301      	adds	r3, #1
 8005f42:	607b      	str	r3, [r7, #4]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d005      	beq.n	8005f58 <chk_chr+0x26>
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	781b      	ldrb	r3, [r3, #0]
 8005f50:	461a      	mov	r2, r3
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d1f2      	bne.n	8005f3e <chk_chr+0xc>
	return *str;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	781b      	ldrb	r3, [r3, #0]
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	370c      	adds	r7, #12
 8005f60:	46bd      	mov	sp, r7
 8005f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f66:	4770      	bx	lr

08005f68 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b085      	sub	sp, #20
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	6078      	str	r0, [r7, #4]
 8005f70:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005f72:	2300      	movs	r3, #0
 8005f74:	60bb      	str	r3, [r7, #8]
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	60fb      	str	r3, [r7, #12]
 8005f7a:	e029      	b.n	8005fd0 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005f7c:	4a27      	ldr	r2, [pc, #156]	@ (800601c <chk_lock+0xb4>)
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	011b      	lsls	r3, r3, #4
 8005f82:	4413      	add	r3, r2
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d01d      	beq.n	8005fc6 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005f8a:	4a24      	ldr	r2, [pc, #144]	@ (800601c <chk_lock+0xb4>)
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	011b      	lsls	r3, r3, #4
 8005f90:	4413      	add	r3, r2
 8005f92:	681a      	ldr	r2, [r3, #0]
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d116      	bne.n	8005fca <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005f9c:	4a1f      	ldr	r2, [pc, #124]	@ (800601c <chk_lock+0xb4>)
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	011b      	lsls	r3, r3, #4
 8005fa2:	4413      	add	r3, r2
 8005fa4:	3304      	adds	r3, #4
 8005fa6:	681a      	ldr	r2, [r3, #0]
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005fac:	429a      	cmp	r2, r3
 8005fae:	d10c      	bne.n	8005fca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005fb0:	4a1a      	ldr	r2, [pc, #104]	@ (800601c <chk_lock+0xb4>)
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	011b      	lsls	r3, r3, #4
 8005fb6:	4413      	add	r3, r2
 8005fb8:	3308      	adds	r3, #8
 8005fba:	681a      	ldr	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005fc0:	429a      	cmp	r2, r3
 8005fc2:	d102      	bne.n	8005fca <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005fc4:	e007      	b.n	8005fd6 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	3301      	adds	r3, #1
 8005fce:	60fb      	str	r3, [r7, #12]
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d9d2      	bls.n	8005f7c <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2b02      	cmp	r3, #2
 8005fda:	d109      	bne.n	8005ff0 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d102      	bne.n	8005fe8 <chk_lock+0x80>
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	2b02      	cmp	r3, #2
 8005fe6:	d101      	bne.n	8005fec <chk_lock+0x84>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	e010      	b.n	800600e <chk_lock+0xa6>
 8005fec:	2312      	movs	r3, #18
 8005fee:	e00e      	b.n	800600e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d108      	bne.n	8006008 <chk_lock+0xa0>
 8005ff6:	4a09      	ldr	r2, [pc, #36]	@ (800601c <chk_lock+0xb4>)
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	011b      	lsls	r3, r3, #4
 8005ffc:	4413      	add	r3, r2
 8005ffe:	330c      	adds	r3, #12
 8006000:	881b      	ldrh	r3, [r3, #0]
 8006002:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006006:	d101      	bne.n	800600c <chk_lock+0xa4>
 8006008:	2310      	movs	r3, #16
 800600a:	e000      	b.n	800600e <chk_lock+0xa6>
 800600c:	2300      	movs	r3, #0
}
 800600e:	4618      	mov	r0, r3
 8006010:	3714      	adds	r7, #20
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
 800601a:	bf00      	nop
 800601c:	200022e4 	.word	0x200022e4

08006020 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8006026:	2300      	movs	r3, #0
 8006028:	607b      	str	r3, [r7, #4]
 800602a:	e002      	b.n	8006032 <enq_lock+0x12>
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	3301      	adds	r3, #1
 8006030:	607b      	str	r3, [r7, #4]
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b01      	cmp	r3, #1
 8006036:	d806      	bhi.n	8006046 <enq_lock+0x26>
 8006038:	4a09      	ldr	r2, [pc, #36]	@ (8006060 <enq_lock+0x40>)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	011b      	lsls	r3, r3, #4
 800603e:	4413      	add	r3, r2
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d1f2      	bne.n	800602c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2b02      	cmp	r3, #2
 800604a:	bf14      	ite	ne
 800604c:	2301      	movne	r3, #1
 800604e:	2300      	moveq	r3, #0
 8006050:	b2db      	uxtb	r3, r3
}
 8006052:	4618      	mov	r0, r3
 8006054:	370c      	adds	r7, #12
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
 800605e:	bf00      	nop
 8006060:	200022e4 	.word	0x200022e4

08006064 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8006064:	b480      	push	{r7}
 8006066:	b085      	sub	sp, #20
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
 8006072:	e01f      	b.n	80060b4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8006074:	4a41      	ldr	r2, [pc, #260]	@ (800617c <inc_lock+0x118>)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	011b      	lsls	r3, r3, #4
 800607a:	4413      	add	r3, r2
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	d113      	bne.n	80060ae <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8006086:	4a3d      	ldr	r2, [pc, #244]	@ (800617c <inc_lock+0x118>)
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	011b      	lsls	r3, r3, #4
 800608c:	4413      	add	r3, r2
 800608e:	3304      	adds	r3, #4
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8006096:	429a      	cmp	r2, r3
 8006098:	d109      	bne.n	80060ae <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800609a:	4a38      	ldr	r2, [pc, #224]	@ (800617c <inc_lock+0x118>)
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	011b      	lsls	r3, r3, #4
 80060a0:	4413      	add	r3, r2
 80060a2:	3308      	adds	r3, #8
 80060a4:	681a      	ldr	r2, [r3, #0]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d006      	beq.n	80060bc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	3301      	adds	r3, #1
 80060b2:	60fb      	str	r3, [r7, #12]
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d9dc      	bls.n	8006074 <inc_lock+0x10>
 80060ba:	e000      	b.n	80060be <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80060bc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d132      	bne.n	800612a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80060c4:	2300      	movs	r3, #0
 80060c6:	60fb      	str	r3, [r7, #12]
 80060c8:	e002      	b.n	80060d0 <inc_lock+0x6c>
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	3301      	adds	r3, #1
 80060ce:	60fb      	str	r3, [r7, #12]
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d806      	bhi.n	80060e4 <inc_lock+0x80>
 80060d6:	4a29      	ldr	r2, [pc, #164]	@ (800617c <inc_lock+0x118>)
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	011b      	lsls	r3, r3, #4
 80060dc:	4413      	add	r3, r2
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1f2      	bne.n	80060ca <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d101      	bne.n	80060ee <inc_lock+0x8a>
 80060ea:	2300      	movs	r3, #0
 80060ec:	e040      	b.n	8006170 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681a      	ldr	r2, [r3, #0]
 80060f2:	4922      	ldr	r1, [pc, #136]	@ (800617c <inc_lock+0x118>)
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	011b      	lsls	r3, r3, #4
 80060f8:	440b      	add	r3, r1
 80060fa:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	689a      	ldr	r2, [r3, #8]
 8006100:	491e      	ldr	r1, [pc, #120]	@ (800617c <inc_lock+0x118>)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	011b      	lsls	r3, r3, #4
 8006106:	440b      	add	r3, r1
 8006108:	3304      	adds	r3, #4
 800610a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	695a      	ldr	r2, [r3, #20]
 8006110:	491a      	ldr	r1, [pc, #104]	@ (800617c <inc_lock+0x118>)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	011b      	lsls	r3, r3, #4
 8006116:	440b      	add	r3, r1
 8006118:	3308      	adds	r3, #8
 800611a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800611c:	4a17      	ldr	r2, [pc, #92]	@ (800617c <inc_lock+0x118>)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	011b      	lsls	r3, r3, #4
 8006122:	4413      	add	r3, r2
 8006124:	330c      	adds	r3, #12
 8006126:	2200      	movs	r2, #0
 8006128:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	2b00      	cmp	r3, #0
 800612e:	d009      	beq.n	8006144 <inc_lock+0xe0>
 8006130:	4a12      	ldr	r2, [pc, #72]	@ (800617c <inc_lock+0x118>)
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	011b      	lsls	r3, r3, #4
 8006136:	4413      	add	r3, r2
 8006138:	330c      	adds	r3, #12
 800613a:	881b      	ldrh	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d001      	beq.n	8006144 <inc_lock+0xe0>
 8006140:	2300      	movs	r3, #0
 8006142:	e015      	b.n	8006170 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d108      	bne.n	800615c <inc_lock+0xf8>
 800614a:	4a0c      	ldr	r2, [pc, #48]	@ (800617c <inc_lock+0x118>)
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	011b      	lsls	r3, r3, #4
 8006150:	4413      	add	r3, r2
 8006152:	330c      	adds	r3, #12
 8006154:	881b      	ldrh	r3, [r3, #0]
 8006156:	3301      	adds	r3, #1
 8006158:	b29a      	uxth	r2, r3
 800615a:	e001      	b.n	8006160 <inc_lock+0xfc>
 800615c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006160:	4906      	ldr	r1, [pc, #24]	@ (800617c <inc_lock+0x118>)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	011b      	lsls	r3, r3, #4
 8006166:	440b      	add	r3, r1
 8006168:	330c      	adds	r3, #12
 800616a:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	3301      	adds	r3, #1
}
 8006170:	4618      	mov	r0, r3
 8006172:	3714      	adds	r7, #20
 8006174:	46bd      	mov	sp, r7
 8006176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800617a:	4770      	bx	lr
 800617c:	200022e4 	.word	0x200022e4

08006180 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8006180:	b480      	push	{r7}
 8006182:	b085      	sub	sp, #20
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	3b01      	subs	r3, #1
 800618c:	607b      	str	r3, [r7, #4]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2b01      	cmp	r3, #1
 8006192:	d825      	bhi.n	80061e0 <dec_lock+0x60>
		n = Files[i].ctr;
 8006194:	4a17      	ldr	r2, [pc, #92]	@ (80061f4 <dec_lock+0x74>)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	011b      	lsls	r3, r3, #4
 800619a:	4413      	add	r3, r2
 800619c:	330c      	adds	r3, #12
 800619e:	881b      	ldrh	r3, [r3, #0]
 80061a0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80061a2:	89fb      	ldrh	r3, [r7, #14]
 80061a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061a8:	d101      	bne.n	80061ae <dec_lock+0x2e>
 80061aa:	2300      	movs	r3, #0
 80061ac:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80061ae:	89fb      	ldrh	r3, [r7, #14]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d002      	beq.n	80061ba <dec_lock+0x3a>
 80061b4:	89fb      	ldrh	r3, [r7, #14]
 80061b6:	3b01      	subs	r3, #1
 80061b8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80061ba:	4a0e      	ldr	r2, [pc, #56]	@ (80061f4 <dec_lock+0x74>)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	011b      	lsls	r3, r3, #4
 80061c0:	4413      	add	r3, r2
 80061c2:	330c      	adds	r3, #12
 80061c4:	89fa      	ldrh	r2, [r7, #14]
 80061c6:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 80061c8:	89fb      	ldrh	r3, [r7, #14]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d105      	bne.n	80061da <dec_lock+0x5a>
 80061ce:	4a09      	ldr	r2, [pc, #36]	@ (80061f4 <dec_lock+0x74>)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	011b      	lsls	r3, r3, #4
 80061d4:	4413      	add	r3, r2
 80061d6:	2200      	movs	r2, #0
 80061d8:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 80061da:	2300      	movs	r3, #0
 80061dc:	737b      	strb	r3, [r7, #13]
 80061de:	e001      	b.n	80061e4 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 80061e0:	2302      	movs	r3, #2
 80061e2:	737b      	strb	r3, [r7, #13]
	}
	return res;
 80061e4:	7b7b      	ldrb	r3, [r7, #13]
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f0:	4770      	bx	lr
 80061f2:	bf00      	nop
 80061f4:	200022e4 	.word	0x200022e4

080061f8 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 80061f8:	b480      	push	{r7}
 80061fa:	b085      	sub	sp, #20
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8006200:	2300      	movs	r3, #0
 8006202:	60fb      	str	r3, [r7, #12]
 8006204:	e010      	b.n	8006228 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8006206:	4a0d      	ldr	r2, [pc, #52]	@ (800623c <clear_lock+0x44>)
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	011b      	lsls	r3, r3, #4
 800620c:	4413      	add	r3, r2
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	687a      	ldr	r2, [r7, #4]
 8006212:	429a      	cmp	r2, r3
 8006214:	d105      	bne.n	8006222 <clear_lock+0x2a>
 8006216:	4a09      	ldr	r2, [pc, #36]	@ (800623c <clear_lock+0x44>)
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	011b      	lsls	r3, r3, #4
 800621c:	4413      	add	r3, r2
 800621e:	2200      	movs	r2, #0
 8006220:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8006222:	68fb      	ldr	r3, [r7, #12]
 8006224:	3301      	adds	r3, #1
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d9eb      	bls.n	8006206 <clear_lock+0xe>
	}
}
 800622e:	bf00      	nop
 8006230:	bf00      	nop
 8006232:	3714      	adds	r7, #20
 8006234:	46bd      	mov	sp, r7
 8006236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623a:	4770      	bx	lr
 800623c:	200022e4 	.word	0x200022e4

08006240 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b086      	sub	sp, #24
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8006248:	2300      	movs	r3, #0
 800624a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	78db      	ldrb	r3, [r3, #3]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d034      	beq.n	80062be <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006258:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	7858      	ldrb	r0, [r3, #1]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006264:	2301      	movs	r3, #1
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	f7ff fd40 	bl	8005cec <disk_write>
 800626c:	4603      	mov	r3, r0
 800626e:	2b00      	cmp	r3, #0
 8006270:	d002      	beq.n	8006278 <sync_window+0x38>
			res = FR_DISK_ERR;
 8006272:	2301      	movs	r3, #1
 8006274:	73fb      	strb	r3, [r7, #15]
 8006276:	e022      	b.n	80062be <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2200      	movs	r2, #0
 800627c:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006282:	697a      	ldr	r2, [r7, #20]
 8006284:	1ad2      	subs	r2, r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6a1b      	ldr	r3, [r3, #32]
 800628a:	429a      	cmp	r2, r3
 800628c:	d217      	bcs.n	80062be <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	789b      	ldrb	r3, [r3, #2]
 8006292:	613b      	str	r3, [r7, #16]
 8006294:	e010      	b.n	80062b8 <sync_window+0x78>
					wsect += fs->fsize;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	697a      	ldr	r2, [r7, #20]
 800629c:	4413      	add	r3, r2
 800629e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	7858      	ldrb	r0, [r3, #1]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80062aa:	2301      	movs	r3, #1
 80062ac:	697a      	ldr	r2, [r7, #20]
 80062ae:	f7ff fd1d 	bl	8005cec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80062b2:	693b      	ldr	r3, [r7, #16]
 80062b4:	3b01      	subs	r3, #1
 80062b6:	613b      	str	r3, [r7, #16]
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	2b01      	cmp	r3, #1
 80062bc:	d8eb      	bhi.n	8006296 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80062be:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3718      	adds	r7, #24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}

080062c8 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 80062c8:	b580      	push	{r7, lr}
 80062ca:	b084      	sub	sp, #16
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 80062d2:	2300      	movs	r3, #0
 80062d4:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062da:	683a      	ldr	r2, [r7, #0]
 80062dc:	429a      	cmp	r2, r3
 80062de:	d01b      	beq.n	8006318 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 80062e0:	6878      	ldr	r0, [r7, #4]
 80062e2:	f7ff ffad 	bl	8006240 <sync_window>
 80062e6:	4603      	mov	r3, r0
 80062e8:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 80062ea:	7bfb      	ldrb	r3, [r7, #15]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d113      	bne.n	8006318 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	7858      	ldrb	r0, [r3, #1]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80062fa:	2301      	movs	r3, #1
 80062fc:	683a      	ldr	r2, [r7, #0]
 80062fe:	f7ff fcd5 	bl	8005cac <disk_read>
 8006302:	4603      	mov	r3, r0
 8006304:	2b00      	cmp	r3, #0
 8006306:	d004      	beq.n	8006312 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8006308:	f04f 33ff 	mov.w	r3, #4294967295
 800630c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800630e:	2301      	movs	r3, #1
 8006310:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	683a      	ldr	r2, [r7, #0]
 8006316:	635a      	str	r2, [r3, #52]	@ 0x34
		}
	}
	return res;
 8006318:	7bfb      	ldrb	r3, [r7, #15]
}
 800631a:	4618      	mov	r0, r3
 800631c:	3710      	adds	r7, #16
 800631e:	46bd      	mov	sp, r7
 8006320:	bd80      	pop	{r7, pc}
	...

08006324 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	f7ff ff87 	bl	8006240 <sync_window>
 8006332:	4603      	mov	r3, r0
 8006334:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006336:	7bfb      	ldrb	r3, [r7, #15]
 8006338:	2b00      	cmp	r3, #0
 800633a:	d159      	bne.n	80063f0 <sync_fs+0xcc>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b03      	cmp	r3, #3
 8006342:	d149      	bne.n	80063d8 <sync_fs+0xb4>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	791b      	ldrb	r3, [r3, #4]
 8006348:	2b01      	cmp	r3, #1
 800634a:	d145      	bne.n	80063d8 <sync_fs+0xb4>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	899b      	ldrh	r3, [r3, #12]
 8006356:	461a      	mov	r2, r3
 8006358:	2100      	movs	r1, #0
 800635a:	f7ff fda8 	bl	8005eae <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	3338      	adds	r3, #56	@ 0x38
 8006362:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006366:	f64a 2155 	movw	r1, #43605	@ 0xaa55
 800636a:	4618      	mov	r0, r3
 800636c:	f7ff fd37 	bl	8005dde <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	3338      	adds	r3, #56	@ 0x38
 8006374:	4921      	ldr	r1, [pc, #132]	@ (80063fc <sync_fs+0xd8>)
 8006376:	4618      	mov	r0, r3
 8006378:	f7ff fd4c 	bl	8005e14 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3338      	adds	r3, #56	@ 0x38
 8006380:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8006384:	491e      	ldr	r1, [pc, #120]	@ (8006400 <sync_fs+0xdc>)
 8006386:	4618      	mov	r0, r3
 8006388:	f7ff fd44 	bl	8005e14 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	3338      	adds	r3, #56	@ 0x38
 8006390:	f503 72f4 	add.w	r2, r3, #488	@ 0x1e8
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	699b      	ldr	r3, [r3, #24]
 8006398:	4619      	mov	r1, r3
 800639a:	4610      	mov	r0, r2
 800639c:	f7ff fd3a 	bl	8005e14 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	3338      	adds	r3, #56	@ 0x38
 80063a4:	f503 72f6 	add.w	r2, r3, #492	@ 0x1ec
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	4619      	mov	r1, r3
 80063ae:	4610      	mov	r0, r2
 80063b0:	f7ff fd30 	bl	8005e14 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063b8:	1c5a      	adds	r2, r3, #1
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	635a      	str	r2, [r3, #52]	@ 0x34
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	7858      	ldrb	r0, [r3, #1]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80063cc:	2301      	movs	r3, #1
 80063ce:	f7ff fc8d 	bl	8005cec <disk_write>
			fs->fsi_flag = 0;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	785b      	ldrb	r3, [r3, #1]
 80063dc:	2200      	movs	r2, #0
 80063de:	2100      	movs	r1, #0
 80063e0:	4618      	mov	r0, r3
 80063e2:	f7ff fca3 	bl	8005d2c <disk_ioctl>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <sync_fs+0xcc>
 80063ec:	2301      	movs	r3, #1
 80063ee:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80063f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}
 80063fa:	bf00      	nop
 80063fc:	41615252 	.word	0x41615252
 8006400:	61417272 	.word	0x61417272

08006404 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	6078      	str	r0, [r7, #4]
 800640c:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	3b02      	subs	r3, #2
 8006412:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	69db      	ldr	r3, [r3, #28]
 8006418:	3b02      	subs	r3, #2
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	429a      	cmp	r2, r3
 800641e:	d301      	bcc.n	8006424 <clust2sect+0x20>
 8006420:	2300      	movs	r3, #0
 8006422:	e008      	b.n	8006436 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	895b      	ldrh	r3, [r3, #10]
 8006428:	461a      	mov	r2, r3
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	fb03 f202 	mul.w	r2, r3, r2
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006434:	4413      	add	r3, r2
}
 8006436:	4618      	mov	r0, r3
 8006438:	370c      	adds	r7, #12
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8006442:	b580      	push	{r7, lr}
 8006444:	b086      	sub	sp, #24
 8006446:	af00      	add	r7, sp, #0
 8006448:	6078      	str	r0, [r7, #4]
 800644a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	2b01      	cmp	r3, #1
 8006456:	d904      	bls.n	8006462 <get_fat+0x20>
 8006458:	693b      	ldr	r3, [r7, #16]
 800645a:	69db      	ldr	r3, [r3, #28]
 800645c:	683a      	ldr	r2, [r7, #0]
 800645e:	429a      	cmp	r2, r3
 8006460:	d302      	bcc.n	8006468 <get_fat+0x26>
		val = 1;	/* Internal error */
 8006462:	2301      	movs	r3, #1
 8006464:	617b      	str	r3, [r7, #20]
 8006466:	e0ba      	b.n	80065de <get_fat+0x19c>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8006468:	f04f 33ff 	mov.w	r3, #4294967295
 800646c:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	781b      	ldrb	r3, [r3, #0]
 8006472:	2b03      	cmp	r3, #3
 8006474:	f000 8082 	beq.w	800657c <get_fat+0x13a>
 8006478:	2b03      	cmp	r3, #3
 800647a:	f300 80a6 	bgt.w	80065ca <get_fat+0x188>
 800647e:	2b01      	cmp	r3, #1
 8006480:	d002      	beq.n	8006488 <get_fat+0x46>
 8006482:	2b02      	cmp	r3, #2
 8006484:	d055      	beq.n	8006532 <get_fat+0xf0>
 8006486:	e0a0      	b.n	80065ca <get_fat+0x188>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	085b      	lsrs	r3, r3, #1
 8006490:	68fa      	ldr	r2, [r7, #12]
 8006492:	4413      	add	r3, r2
 8006494:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006496:	693b      	ldr	r3, [r7, #16]
 8006498:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800649a:	693b      	ldr	r3, [r7, #16]
 800649c:	899b      	ldrh	r3, [r3, #12]
 800649e:	4619      	mov	r1, r3
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80064a6:	4413      	add	r3, r2
 80064a8:	4619      	mov	r1, r3
 80064aa:	6938      	ldr	r0, [r7, #16]
 80064ac:	f7ff ff0c 	bl	80062c8 <move_window>
 80064b0:	4603      	mov	r3, r0
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f040 808c 	bne.w	80065d0 <get_fat+0x18e>
			wc = fs->win[bc++ % SS(fs)];
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	1c5a      	adds	r2, r3, #1
 80064bc:	60fa      	str	r2, [r7, #12]
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	8992      	ldrh	r2, [r2, #12]
 80064c2:	fbb3 f1f2 	udiv	r1, r3, r2
 80064c6:	fb01 f202 	mul.w	r2, r1, r2
 80064ca:	1a9b      	subs	r3, r3, r2
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	4413      	add	r3, r2
 80064d0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80064d4:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064da:	693b      	ldr	r3, [r7, #16]
 80064dc:	899b      	ldrh	r3, [r3, #12]
 80064de:	4619      	mov	r1, r3
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80064e6:	4413      	add	r3, r2
 80064e8:	4619      	mov	r1, r3
 80064ea:	6938      	ldr	r0, [r7, #16]
 80064ec:	f7ff feec 	bl	80062c8 <move_window>
 80064f0:	4603      	mov	r3, r0
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d16e      	bne.n	80065d4 <get_fat+0x192>
			wc |= fs->win[bc % SS(fs)] << 8;
 80064f6:	693b      	ldr	r3, [r7, #16]
 80064f8:	899b      	ldrh	r3, [r3, #12]
 80064fa:	461a      	mov	r2, r3
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	fbb3 f1f2 	udiv	r1, r3, r2
 8006502:	fb01 f202 	mul.w	r2, r1, r2
 8006506:	1a9b      	subs	r3, r3, r2
 8006508:	693a      	ldr	r2, [r7, #16]
 800650a:	4413      	add	r3, r2
 800650c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8006510:	021b      	lsls	r3, r3, #8
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	4313      	orrs	r3, r2
 8006516:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	f003 0301 	and.w	r3, r3, #1
 800651e:	2b00      	cmp	r3, #0
 8006520:	d002      	beq.n	8006528 <get_fat+0xe6>
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	091b      	lsrs	r3, r3, #4
 8006526:	e002      	b.n	800652e <get_fat+0xec>
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800652e:	617b      	str	r3, [r7, #20]
			break;
 8006530:	e055      	b.n	80065de <get_fat+0x19c>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	899b      	ldrh	r3, [r3, #12]
 800653a:	085b      	lsrs	r3, r3, #1
 800653c:	b29b      	uxth	r3, r3
 800653e:	4619      	mov	r1, r3
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	fbb3 f3f1 	udiv	r3, r3, r1
 8006546:	4413      	add	r3, r2
 8006548:	4619      	mov	r1, r3
 800654a:	6938      	ldr	r0, [r7, #16]
 800654c:	f7ff febc 	bl	80062c8 <move_window>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d140      	bne.n	80065d8 <get_fat+0x196>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	005b      	lsls	r3, r3, #1
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	8992      	ldrh	r2, [r2, #12]
 8006564:	fbb3 f0f2 	udiv	r0, r3, r2
 8006568:	fb00 f202 	mul.w	r2, r0, r2
 800656c:	1a9b      	subs	r3, r3, r2
 800656e:	440b      	add	r3, r1
 8006570:	4618      	mov	r0, r3
 8006572:	f7ff fbf9 	bl	8005d68 <ld_word>
 8006576:	4603      	mov	r3, r0
 8006578:	617b      	str	r3, [r7, #20]
			break;
 800657a:	e030      	b.n	80065de <get_fat+0x19c>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800657c:	693b      	ldr	r3, [r7, #16]
 800657e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	899b      	ldrh	r3, [r3, #12]
 8006584:	089b      	lsrs	r3, r3, #2
 8006586:	b29b      	uxth	r3, r3
 8006588:	4619      	mov	r1, r3
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006590:	4413      	add	r3, r2
 8006592:	4619      	mov	r1, r3
 8006594:	6938      	ldr	r0, [r7, #16]
 8006596:	f7ff fe97 	bl	80062c8 <move_window>
 800659a:	4603      	mov	r3, r0
 800659c:	2b00      	cmp	r3, #0
 800659e:	d11d      	bne.n	80065dc <get_fat+0x19a>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80065a0:	693b      	ldr	r3, [r7, #16]
 80065a2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	009b      	lsls	r3, r3, #2
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	8992      	ldrh	r2, [r2, #12]
 80065ae:	fbb3 f0f2 	udiv	r0, r3, r2
 80065b2:	fb00 f202 	mul.w	r2, r0, r2
 80065b6:	1a9b      	subs	r3, r3, r2
 80065b8:	440b      	add	r3, r1
 80065ba:	4618      	mov	r0, r3
 80065bc:	f7ff fbec 	bl	8005d98 <ld_dword>
 80065c0:	4603      	mov	r3, r0
 80065c2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80065c6:	617b      	str	r3, [r7, #20]
			break;
 80065c8:	e009      	b.n	80065de <get_fat+0x19c>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80065ca:	2301      	movs	r3, #1
 80065cc:	617b      	str	r3, [r7, #20]
 80065ce:	e006      	b.n	80065de <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065d0:	bf00      	nop
 80065d2:	e004      	b.n	80065de <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80065d4:	bf00      	nop
 80065d6:	e002      	b.n	80065de <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80065d8:	bf00      	nop
 80065da:	e000      	b.n	80065de <get_fat+0x19c>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80065dc:	bf00      	nop
		}
	}

	return val;
 80065de:	697b      	ldr	r3, [r7, #20]
}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3718      	adds	r7, #24
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 80065e8:	b590      	push	{r4, r7, lr}
 80065ea:	b089      	sub	sp, #36	@ 0x24
 80065ec:	af00      	add	r7, sp, #0
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 80065f4:	2302      	movs	r3, #2
 80065f6:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 80065f8:	68bb      	ldr	r3, [r7, #8]
 80065fa:	2b01      	cmp	r3, #1
 80065fc:	f240 8109 	bls.w	8006812 <put_fat+0x22a>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	69db      	ldr	r3, [r3, #28]
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	429a      	cmp	r2, r3
 8006608:	f080 8103 	bcs.w	8006812 <put_fat+0x22a>
		switch (fs->fs_type) {
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b03      	cmp	r3, #3
 8006612:	f000 80b6 	beq.w	8006782 <put_fat+0x19a>
 8006616:	2b03      	cmp	r3, #3
 8006618:	f300 80fb 	bgt.w	8006812 <put_fat+0x22a>
 800661c:	2b01      	cmp	r3, #1
 800661e:	d003      	beq.n	8006628 <put_fat+0x40>
 8006620:	2b02      	cmp	r3, #2
 8006622:	f000 8083 	beq.w	800672c <put_fat+0x144>
 8006626:	e0f4      	b.n	8006812 <put_fat+0x22a>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	61bb      	str	r3, [r7, #24]
 800662c:	69bb      	ldr	r3, [r7, #24]
 800662e:	085b      	lsrs	r3, r3, #1
 8006630:	69ba      	ldr	r2, [r7, #24]
 8006632:	4413      	add	r3, r2
 8006634:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	899b      	ldrh	r3, [r3, #12]
 800663e:	4619      	mov	r1, r3
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	fbb3 f3f1 	udiv	r3, r3, r1
 8006646:	4413      	add	r3, r2
 8006648:	4619      	mov	r1, r3
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f7ff fe3c 	bl	80062c8 <move_window>
 8006650:	4603      	mov	r3, r0
 8006652:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006654:	7ffb      	ldrb	r3, [r7, #31]
 8006656:	2b00      	cmp	r3, #0
 8006658:	f040 80d4 	bne.w	8006804 <put_fat+0x21c>
			p = fs->win + bc++ % SS(fs);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006662:	69bb      	ldr	r3, [r7, #24]
 8006664:	1c5a      	adds	r2, r3, #1
 8006666:	61ba      	str	r2, [r7, #24]
 8006668:	68fa      	ldr	r2, [r7, #12]
 800666a:	8992      	ldrh	r2, [r2, #12]
 800666c:	fbb3 f0f2 	udiv	r0, r3, r2
 8006670:	fb00 f202 	mul.w	r2, r0, r2
 8006674:	1a9b      	subs	r3, r3, r2
 8006676:	440b      	add	r3, r1
 8006678:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800667a:	68bb      	ldr	r3, [r7, #8]
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b00      	cmp	r3, #0
 8006682:	d00d      	beq.n	80066a0 <put_fat+0xb8>
 8006684:	697b      	ldr	r3, [r7, #20]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	b25b      	sxtb	r3, r3
 800668a:	f003 030f 	and.w	r3, r3, #15
 800668e:	b25a      	sxtb	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	b2db      	uxtb	r3, r3
 8006694:	011b      	lsls	r3, r3, #4
 8006696:	b25b      	sxtb	r3, r3
 8006698:	4313      	orrs	r3, r2
 800669a:	b25b      	sxtb	r3, r3
 800669c:	b2db      	uxtb	r3, r3
 800669e:	e001      	b.n	80066a4 <put_fat+0xbc>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	b2db      	uxtb	r3, r3
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	2201      	movs	r2, #1
 80066ac:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	899b      	ldrh	r3, [r3, #12]
 80066b6:	4619      	mov	r1, r3
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80066be:	4413      	add	r3, r2
 80066c0:	4619      	mov	r1, r3
 80066c2:	68f8      	ldr	r0, [r7, #12]
 80066c4:	f7ff fe00 	bl	80062c8 <move_window>
 80066c8:	4603      	mov	r3, r0
 80066ca:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80066cc:	7ffb      	ldrb	r3, [r7, #31]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	f040 809a 	bne.w	8006808 <put_fat+0x220>
			p = fs->win + bc % SS(fs);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	899b      	ldrh	r3, [r3, #12]
 80066de:	461a      	mov	r2, r3
 80066e0:	69bb      	ldr	r3, [r7, #24]
 80066e2:	fbb3 f0f2 	udiv	r0, r3, r2
 80066e6:	fb00 f202 	mul.w	r2, r0, r2
 80066ea:	1a9b      	subs	r3, r3, r2
 80066ec:	440b      	add	r3, r1
 80066ee:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f003 0301 	and.w	r3, r3, #1
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d003      	beq.n	8006702 <put_fat+0x11a>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	091b      	lsrs	r3, r3, #4
 80066fe:	b2db      	uxtb	r3, r3
 8006700:	e00e      	b.n	8006720 <put_fat+0x138>
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	781b      	ldrb	r3, [r3, #0]
 8006706:	b25b      	sxtb	r3, r3
 8006708:	f023 030f 	bic.w	r3, r3, #15
 800670c:	b25a      	sxtb	r2, r3
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	0a1b      	lsrs	r3, r3, #8
 8006712:	b25b      	sxtb	r3, r3
 8006714:	f003 030f 	and.w	r3, r3, #15
 8006718:	b25b      	sxtb	r3, r3
 800671a:	4313      	orrs	r3, r2
 800671c:	b25b      	sxtb	r3, r3
 800671e:	b2db      	uxtb	r3, r3
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2201      	movs	r2, #1
 8006728:	70da      	strb	r2, [r3, #3]
			break;
 800672a:	e072      	b.n	8006812 <put_fat+0x22a>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	899b      	ldrh	r3, [r3, #12]
 8006734:	085b      	lsrs	r3, r3, #1
 8006736:	b29b      	uxth	r3, r3
 8006738:	4619      	mov	r1, r3
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	fbb3 f3f1 	udiv	r3, r3, r1
 8006740:	4413      	add	r3, r2
 8006742:	4619      	mov	r1, r3
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f7ff fdbf 	bl	80062c8 <move_window>
 800674a:	4603      	mov	r3, r0
 800674c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800674e:	7ffb      	ldrb	r3, [r7, #31]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d15b      	bne.n	800680c <put_fat+0x224>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	005b      	lsls	r3, r3, #1
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	8992      	ldrh	r2, [r2, #12]
 8006762:	fbb3 f0f2 	udiv	r0, r3, r2
 8006766:	fb00 f202 	mul.w	r2, r0, r2
 800676a:	1a9b      	subs	r3, r3, r2
 800676c:	440b      	add	r3, r1
 800676e:	687a      	ldr	r2, [r7, #4]
 8006770:	b292      	uxth	r2, r2
 8006772:	4611      	mov	r1, r2
 8006774:	4618      	mov	r0, r3
 8006776:	f7ff fb32 	bl	8005dde <st_word>
			fs->wflag = 1;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2201      	movs	r2, #1
 800677e:	70da      	strb	r2, [r3, #3]
			break;
 8006780:	e047      	b.n	8006812 <put_fat+0x22a>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	899b      	ldrh	r3, [r3, #12]
 800678a:	089b      	lsrs	r3, r3, #2
 800678c:	b29b      	uxth	r3, r3
 800678e:	4619      	mov	r1, r3
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	fbb3 f3f1 	udiv	r3, r3, r1
 8006796:	4413      	add	r3, r2
 8006798:	4619      	mov	r1, r3
 800679a:	68f8      	ldr	r0, [r7, #12]
 800679c:	f7ff fd94 	bl	80062c8 <move_window>
 80067a0:	4603      	mov	r3, r0
 80067a2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80067a4:	7ffb      	ldrb	r3, [r7, #31]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d132      	bne.n	8006810 <put_fat+0x228>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	f023 4470 	bic.w	r4, r3, #4026531840	@ 0xf0000000
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	009b      	lsls	r3, r3, #2
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	8992      	ldrh	r2, [r2, #12]
 80067be:	fbb3 f0f2 	udiv	r0, r3, r2
 80067c2:	fb00 f202 	mul.w	r2, r0, r2
 80067c6:	1a9b      	subs	r3, r3, r2
 80067c8:	440b      	add	r3, r1
 80067ca:	4618      	mov	r0, r3
 80067cc:	f7ff fae4 	bl	8005d98 <ld_dword>
 80067d0:	4603      	mov	r3, r0
 80067d2:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 80067d6:	4323      	orrs	r3, r4
 80067d8:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	009b      	lsls	r3, r3, #2
 80067e4:	68fa      	ldr	r2, [r7, #12]
 80067e6:	8992      	ldrh	r2, [r2, #12]
 80067e8:	fbb3 f0f2 	udiv	r0, r3, r2
 80067ec:	fb00 f202 	mul.w	r2, r0, r2
 80067f0:	1a9b      	subs	r3, r3, r2
 80067f2:	440b      	add	r3, r1
 80067f4:	6879      	ldr	r1, [r7, #4]
 80067f6:	4618      	mov	r0, r3
 80067f8:	f7ff fb0c 	bl	8005e14 <st_dword>
			fs->wflag = 1;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2201      	movs	r2, #1
 8006800:	70da      	strb	r2, [r3, #3]
			break;
 8006802:	e006      	b.n	8006812 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006804:	bf00      	nop
 8006806:	e004      	b.n	8006812 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006808:	bf00      	nop
 800680a:	e002      	b.n	8006812 <put_fat+0x22a>
			if (res != FR_OK) break;
 800680c:	bf00      	nop
 800680e:	e000      	b.n	8006812 <put_fat+0x22a>
			if (res != FR_OK) break;
 8006810:	bf00      	nop
		}
	}
	return res;
 8006812:	7ffb      	ldrb	r3, [r7, #31]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3724      	adds	r7, #36	@ 0x24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd90      	pop	{r4, r7, pc}

0800681c <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b088      	sub	sp, #32
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8006828:	2300      	movs	r3, #0
 800682a:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8006832:	68bb      	ldr	r3, [r7, #8]
 8006834:	2b01      	cmp	r3, #1
 8006836:	d904      	bls.n	8006842 <remove_chain+0x26>
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	69db      	ldr	r3, [r3, #28]
 800683c:	68ba      	ldr	r2, [r7, #8]
 800683e:	429a      	cmp	r2, r3
 8006840:	d301      	bcc.n	8006846 <remove_chain+0x2a>
 8006842:	2302      	movs	r3, #2
 8006844:	e04b      	b.n	80068de <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2b00      	cmp	r3, #0
 800684a:	d00c      	beq.n	8006866 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800684c:	f04f 32ff 	mov.w	r2, #4294967295
 8006850:	6879      	ldr	r1, [r7, #4]
 8006852:	69b8      	ldr	r0, [r7, #24]
 8006854:	f7ff fec8 	bl	80065e8 <put_fat>
 8006858:	4603      	mov	r3, r0
 800685a:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800685c:	7ffb      	ldrb	r3, [r7, #31]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <remove_chain+0x4a>
 8006862:	7ffb      	ldrb	r3, [r7, #31]
 8006864:	e03b      	b.n	80068de <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006866:	68b9      	ldr	r1, [r7, #8]
 8006868:	68f8      	ldr	r0, [r7, #12]
 800686a:	f7ff fdea 	bl	8006442 <get_fat>
 800686e:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d031      	beq.n	80068da <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	2b01      	cmp	r3, #1
 800687a:	d101      	bne.n	8006880 <remove_chain+0x64>
 800687c:	2302      	movs	r3, #2
 800687e:	e02e      	b.n	80068de <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006886:	d101      	bne.n	800688c <remove_chain+0x70>
 8006888:	2301      	movs	r3, #1
 800688a:	e028      	b.n	80068de <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800688c:	2200      	movs	r2, #0
 800688e:	68b9      	ldr	r1, [r7, #8]
 8006890:	69b8      	ldr	r0, [r7, #24]
 8006892:	f7ff fea9 	bl	80065e8 <put_fat>
 8006896:	4603      	mov	r3, r0
 8006898:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800689a:	7ffb      	ldrb	r3, [r7, #31]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d001      	beq.n	80068a4 <remove_chain+0x88>
 80068a0:	7ffb      	ldrb	r3, [r7, #31]
 80068a2:	e01c      	b.n	80068de <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 80068a4:	69bb      	ldr	r3, [r7, #24]
 80068a6:	699a      	ldr	r2, [r3, #24]
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	3b02      	subs	r3, #2
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d20b      	bcs.n	80068ca <remove_chain+0xae>
			fs->free_clst++;
 80068b2:	69bb      	ldr	r3, [r7, #24]
 80068b4:	699b      	ldr	r3, [r3, #24]
 80068b6:	1c5a      	adds	r2, r3, #1
 80068b8:	69bb      	ldr	r3, [r7, #24]
 80068ba:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;
 80068bc:	69bb      	ldr	r3, [r7, #24]
 80068be:	791b      	ldrb	r3, [r3, #4]
 80068c0:	f043 0301 	orr.w	r3, r3, #1
 80068c4:	b2da      	uxtb	r2, r3
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 80068ce:	69bb      	ldr	r3, [r7, #24]
 80068d0:	69db      	ldr	r3, [r3, #28]
 80068d2:	68ba      	ldr	r2, [r7, #8]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	d3c6      	bcc.n	8006866 <remove_chain+0x4a>
 80068d8:	e000      	b.n	80068dc <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 80068da:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 80068dc:	2300      	movs	r3, #0
}
 80068de:	4618      	mov	r0, r3
 80068e0:	3720      	adds	r7, #32
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}

080068e6 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b088      	sub	sp, #32
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	6078      	str	r0, [r7, #4]
 80068ee:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d10d      	bne.n	8006918 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	2b00      	cmp	r3, #0
 8006906:	d004      	beq.n	8006912 <create_chain+0x2c>
 8006908:	693b      	ldr	r3, [r7, #16]
 800690a:	69db      	ldr	r3, [r3, #28]
 800690c:	69ba      	ldr	r2, [r7, #24]
 800690e:	429a      	cmp	r2, r3
 8006910:	d31b      	bcc.n	800694a <create_chain+0x64>
 8006912:	2301      	movs	r3, #1
 8006914:	61bb      	str	r3, [r7, #24]
 8006916:	e018      	b.n	800694a <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8006918:	6839      	ldr	r1, [r7, #0]
 800691a:	6878      	ldr	r0, [r7, #4]
 800691c:	f7ff fd91 	bl	8006442 <get_fat>
 8006920:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d801      	bhi.n	800692c <create_chain+0x46>
 8006928:	2301      	movs	r3, #1
 800692a:	e070      	b.n	8006a0e <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006932:	d101      	bne.n	8006938 <create_chain+0x52>
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	e06a      	b.n	8006a0e <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	68fa      	ldr	r2, [r7, #12]
 800693e:	429a      	cmp	r2, r3
 8006940:	d201      	bcs.n	8006946 <create_chain+0x60>
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	e063      	b.n	8006a0e <create_chain+0x128>
		scl = clst;
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800694a:	69bb      	ldr	r3, [r7, #24]
 800694c:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800694e:	69fb      	ldr	r3, [r7, #28]
 8006950:	3301      	adds	r3, #1
 8006952:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	69db      	ldr	r3, [r3, #28]
 8006958:	69fa      	ldr	r2, [r7, #28]
 800695a:	429a      	cmp	r2, r3
 800695c:	d307      	bcc.n	800696e <create_chain+0x88>
				ncl = 2;
 800695e:	2302      	movs	r3, #2
 8006960:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8006962:	69fa      	ldr	r2, [r7, #28]
 8006964:	69bb      	ldr	r3, [r7, #24]
 8006966:	429a      	cmp	r2, r3
 8006968:	d901      	bls.n	800696e <create_chain+0x88>
 800696a:	2300      	movs	r3, #0
 800696c:	e04f      	b.n	8006a0e <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800696e:	69f9      	ldr	r1, [r7, #28]
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f7ff fd66 	bl	8006442 <get_fat>
 8006976:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00e      	beq.n	800699c <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d003      	beq.n	800698c <create_chain+0xa6>
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	f1b3 3fff 	cmp.w	r3, #4294967295
 800698a:	d101      	bne.n	8006990 <create_chain+0xaa>
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	e03e      	b.n	8006a0e <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 8006990:	69fa      	ldr	r2, [r7, #28]
 8006992:	69bb      	ldr	r3, [r7, #24]
 8006994:	429a      	cmp	r2, r3
 8006996:	d1da      	bne.n	800694e <create_chain+0x68>
 8006998:	2300      	movs	r3, #0
 800699a:	e038      	b.n	8006a0e <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800699c:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800699e:	f04f 32ff 	mov.w	r2, #4294967295
 80069a2:	69f9      	ldr	r1, [r7, #28]
 80069a4:	6938      	ldr	r0, [r7, #16]
 80069a6:	f7ff fe1f 	bl	80065e8 <put_fat>
 80069aa:	4603      	mov	r3, r0
 80069ac:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 80069ae:	7dfb      	ldrb	r3, [r7, #23]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d109      	bne.n	80069c8 <create_chain+0xe2>
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d006      	beq.n	80069c8 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 80069ba:	69fa      	ldr	r2, [r7, #28]
 80069bc:	6839      	ldr	r1, [r7, #0]
 80069be:	6938      	ldr	r0, [r7, #16]
 80069c0:	f7ff fe12 	bl	80065e8 <put_fat>
 80069c4:	4603      	mov	r3, r0
 80069c6:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 80069c8:	7dfb      	ldrb	r3, [r7, #23]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d116      	bne.n	80069fc <create_chain+0x116>
		fs->last_clst = ncl;
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	69fa      	ldr	r2, [r7, #28]
 80069d2:	615a      	str	r2, [r3, #20]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	699a      	ldr	r2, [r3, #24]
 80069d8:	693b      	ldr	r3, [r7, #16]
 80069da:	69db      	ldr	r3, [r3, #28]
 80069dc:	3b02      	subs	r3, #2
 80069de:	429a      	cmp	r2, r3
 80069e0:	d804      	bhi.n	80069ec <create_chain+0x106>
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	699b      	ldr	r3, [r3, #24]
 80069e6:	1e5a      	subs	r2, r3, #1
 80069e8:	693b      	ldr	r3, [r7, #16]
 80069ea:	619a      	str	r2, [r3, #24]
		fs->fsi_flag |= 1;
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	791b      	ldrb	r3, [r3, #4]
 80069f0:	f043 0301 	orr.w	r3, r3, #1
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	693b      	ldr	r3, [r7, #16]
 80069f8:	711a      	strb	r2, [r3, #4]
 80069fa:	e007      	b.n	8006a0c <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80069fc:	7dfb      	ldrb	r3, [r7, #23]
 80069fe:	2b01      	cmp	r3, #1
 8006a00:	d102      	bne.n	8006a08 <create_chain+0x122>
 8006a02:	f04f 33ff 	mov.w	r3, #4294967295
 8006a06:	e000      	b.n	8006a0a <create_chain+0x124>
 8006a08:	2301      	movs	r3, #1
 8006a0a:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8006a0c:	69fb      	ldr	r3, [r7, #28]
}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3720      	adds	r7, #32
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 8006a16:	b480      	push	{r7}
 8006a18:	b087      	sub	sp, #28
 8006a1a:	af00      	add	r7, sp, #0
 8006a1c:	6078      	str	r0, [r7, #4]
 8006a1e:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a2a:	3304      	adds	r3, #4
 8006a2c:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	899b      	ldrh	r3, [r3, #12]
 8006a32:	461a      	mov	r2, r3
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a3a:	68fa      	ldr	r2, [r7, #12]
 8006a3c:	8952      	ldrh	r2, [r2, #10]
 8006a3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006a42:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	1d1a      	adds	r2, r3, #4
 8006a48:	613a      	str	r2, [r7, #16]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <clmt_clust+0x42>
 8006a54:	2300      	movs	r3, #0
 8006a56:	e010      	b.n	8006a7a <clmt_clust+0x64>
		if (cl < ncl) break;	/* In this fragment? */
 8006a58:	697a      	ldr	r2, [r7, #20]
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d307      	bcc.n	8006a70 <clmt_clust+0x5a>
		cl -= ncl; tbl++;		/* Next fragment */
 8006a60:	697a      	ldr	r2, [r7, #20]
 8006a62:	68bb      	ldr	r3, [r7, #8]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	617b      	str	r3, [r7, #20]
 8006a68:	693b      	ldr	r3, [r7, #16]
 8006a6a:	3304      	adds	r3, #4
 8006a6c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8006a6e:	e7e9      	b.n	8006a44 <clmt_clust+0x2e>
		if (cl < ncl) break;	/* In this fragment? */
 8006a70:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	697b      	ldr	r3, [r7, #20]
 8006a78:	4413      	add	r3, r2
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	371c      	adds	r7, #28
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a84:	4770      	bx	lr

08006a86 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8006a86:	b580      	push	{r7, lr}
 8006a88:	b086      	sub	sp, #24
 8006a8a:	af00      	add	r7, sp, #0
 8006a8c:	6078      	str	r0, [r7, #4]
 8006a8e:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006a9c:	d204      	bcs.n	8006aa8 <dir_sdi+0x22>
 8006a9e:	683b      	ldr	r3, [r7, #0]
 8006aa0:	f003 031f 	and.w	r3, r3, #31
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d001      	beq.n	8006aac <dir_sdi+0x26>
		return FR_INT_ERR;
 8006aa8:	2302      	movs	r3, #2
 8006aaa:	e071      	b.n	8006b90 <dir_sdi+0x10a>
	}
	dp->dptr = ofs;				/* Set current offset */
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	683a      	ldr	r2, [r7, #0]
 8006ab0:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	689b      	ldr	r3, [r3, #8]
 8006ab6:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d106      	bne.n	8006acc <dir_sdi+0x46>
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	781b      	ldrb	r3, [r3, #0]
 8006ac2:	2b02      	cmp	r3, #2
 8006ac4:	d902      	bls.n	8006acc <dir_sdi+0x46>
		clst = fs->dirbase;
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aca:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d10c      	bne.n	8006aec <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	095b      	lsrs	r3, r3, #5
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	8912      	ldrh	r2, [r2, #8]
 8006ada:	4293      	cmp	r3, r2
 8006adc:	d301      	bcc.n	8006ae2 <dir_sdi+0x5c>
 8006ade:	2302      	movs	r3, #2
 8006ae0:	e056      	b.n	8006b90 <dir_sdi+0x10a>
		dp->sect = fs->dirbase;
 8006ae2:	693b      	ldr	r3, [r7, #16]
 8006ae4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	61da      	str	r2, [r3, #28]
 8006aea:	e02d      	b.n	8006b48 <dir_sdi+0xc2>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	895b      	ldrh	r3, [r3, #10]
 8006af0:	461a      	mov	r2, r3
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	899b      	ldrh	r3, [r3, #12]
 8006af6:	fb02 f303 	mul.w	r3, r2, r3
 8006afa:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006afc:	e019      	b.n	8006b32 <dir_sdi+0xac>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6979      	ldr	r1, [r7, #20]
 8006b02:	4618      	mov	r0, r3
 8006b04:	f7ff fc9d 	bl	8006442 <get_fat>
 8006b08:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b10:	d101      	bne.n	8006b16 <dir_sdi+0x90>
 8006b12:	2301      	movs	r3, #1
 8006b14:	e03c      	b.n	8006b90 <dir_sdi+0x10a>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	2b01      	cmp	r3, #1
 8006b1a:	d904      	bls.n	8006b26 <dir_sdi+0xa0>
 8006b1c:	693b      	ldr	r3, [r7, #16]
 8006b1e:	69db      	ldr	r3, [r3, #28]
 8006b20:	697a      	ldr	r2, [r7, #20]
 8006b22:	429a      	cmp	r2, r3
 8006b24:	d301      	bcc.n	8006b2a <dir_sdi+0xa4>
 8006b26:	2302      	movs	r3, #2
 8006b28:	e032      	b.n	8006b90 <dir_sdi+0x10a>
			ofs -= csz;
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	1ad3      	subs	r3, r2, r3
 8006b30:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006b32:	683a      	ldr	r2, [r7, #0]
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d2e1      	bcs.n	8006afe <dir_sdi+0x78>
		}
		dp->sect = clust2sect(fs, clst);
 8006b3a:	6979      	ldr	r1, [r7, #20]
 8006b3c:	6938      	ldr	r0, [r7, #16]
 8006b3e:	f7ff fc61 	bl	8006404 <clust2sect>
 8006b42:	4602      	mov	r2, r0
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	69db      	ldr	r3, [r3, #28]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d101      	bne.n	8006b5a <dir_sdi+0xd4>
 8006b56:	2302      	movs	r3, #2
 8006b58:	e01a      	b.n	8006b90 <dir_sdi+0x10a>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	69da      	ldr	r2, [r3, #28]
 8006b5e:	693b      	ldr	r3, [r7, #16]
 8006b60:	899b      	ldrh	r3, [r3, #12]
 8006b62:	4619      	mov	r1, r3
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	fbb3 f3f1 	udiv	r3, r3, r1
 8006b6a:	441a      	add	r2, r3
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	899b      	ldrh	r3, [r3, #12]
 8006b7a:	461a      	mov	r2, r3
 8006b7c:	683b      	ldr	r3, [r7, #0]
 8006b7e:	fbb3 f0f2 	udiv	r0, r3, r2
 8006b82:	fb00 f202 	mul.w	r2, r0, r2
 8006b86:	1a9b      	subs	r3, r3, r2
 8006b88:	18ca      	adds	r2, r1, r3
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006b8e:	2300      	movs	r3, #0
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}

08006b98 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b086      	sub	sp, #24
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	695b      	ldr	r3, [r3, #20]
 8006bac:	3320      	adds	r3, #32
 8006bae:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	69db      	ldr	r3, [r3, #28]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d003      	beq.n	8006bc0 <dir_next+0x28>
 8006bb8:	68bb      	ldr	r3, [r7, #8]
 8006bba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006bbe:	d301      	bcc.n	8006bc4 <dir_next+0x2c>
 8006bc0:	2304      	movs	r3, #4
 8006bc2:	e0bb      	b.n	8006d3c <dir_next+0x1a4>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	899b      	ldrh	r3, [r3, #12]
 8006bc8:	461a      	mov	r2, r3
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	fbb3 f1f2 	udiv	r1, r3, r2
 8006bd0:	fb01 f202 	mul.w	r2, r1, r2
 8006bd4:	1a9b      	subs	r3, r3, r2
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	f040 809d 	bne.w	8006d16 <dir_next+0x17e>
		dp->sect++;				/* Next sector */
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	69db      	ldr	r3, [r3, #28]
 8006be0:	1c5a      	adds	r2, r3, #1
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	699b      	ldr	r3, [r3, #24]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10b      	bne.n	8006c06 <dir_next+0x6e>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006bee:	68bb      	ldr	r3, [r7, #8]
 8006bf0:	095b      	lsrs	r3, r3, #5
 8006bf2:	68fa      	ldr	r2, [r7, #12]
 8006bf4:	8912      	ldrh	r2, [r2, #8]
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	f0c0 808d 	bcc.w	8006d16 <dir_next+0x17e>
				dp->sect = 0; return FR_NO_FILE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2200      	movs	r2, #0
 8006c00:	61da      	str	r2, [r3, #28]
 8006c02:	2304      	movs	r3, #4
 8006c04:	e09a      	b.n	8006d3c <dir_next+0x1a4>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	899b      	ldrh	r3, [r3, #12]
 8006c0a:	461a      	mov	r2, r3
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	fbb3 f3f2 	udiv	r3, r3, r2
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	8952      	ldrh	r2, [r2, #10]
 8006c16:	3a01      	subs	r2, #1
 8006c18:	4013      	ands	r3, r2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d17b      	bne.n	8006d16 <dir_next+0x17e>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	699b      	ldr	r3, [r3, #24]
 8006c24:	4619      	mov	r1, r3
 8006c26:	4610      	mov	r0, r2
 8006c28:	f7ff fc0b 	bl	8006442 <get_fat>
 8006c2c:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006c2e:	697b      	ldr	r3, [r7, #20]
 8006c30:	2b01      	cmp	r3, #1
 8006c32:	d801      	bhi.n	8006c38 <dir_next+0xa0>
 8006c34:	2302      	movs	r3, #2
 8006c36:	e081      	b.n	8006d3c <dir_next+0x1a4>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006c38:	697b      	ldr	r3, [r7, #20]
 8006c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3e:	d101      	bne.n	8006c44 <dir_next+0xac>
 8006c40:	2301      	movs	r3, #1
 8006c42:	e07b      	b.n	8006d3c <dir_next+0x1a4>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	69db      	ldr	r3, [r3, #28]
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d359      	bcc.n	8006d02 <dir_next+0x16a>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	d104      	bne.n	8006c5e <dir_next+0xc6>
						dp->sect = 0; return FR_NO_FILE;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2200      	movs	r2, #0
 8006c58:	61da      	str	r2, [r3, #28]
 8006c5a:	2304      	movs	r3, #4
 8006c5c:	e06e      	b.n	8006d3c <dir_next+0x1a4>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	699b      	ldr	r3, [r3, #24]
 8006c64:	4619      	mov	r1, r3
 8006c66:	4610      	mov	r0, r2
 8006c68:	f7ff fe3d 	bl	80068e6 <create_chain>
 8006c6c:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d101      	bne.n	8006c78 <dir_next+0xe0>
 8006c74:	2307      	movs	r3, #7
 8006c76:	e061      	b.n	8006d3c <dir_next+0x1a4>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d101      	bne.n	8006c82 <dir_next+0xea>
 8006c7e:	2302      	movs	r3, #2
 8006c80:	e05c      	b.n	8006d3c <dir_next+0x1a4>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8006c82:	697b      	ldr	r3, [r7, #20]
 8006c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c88:	d101      	bne.n	8006c8e <dir_next+0xf6>
 8006c8a:	2301      	movs	r3, #1
 8006c8c:	e056      	b.n	8006d3c <dir_next+0x1a4>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 8006c8e:	68f8      	ldr	r0, [r7, #12]
 8006c90:	f7ff fad6 	bl	8006240 <sync_window>
 8006c94:	4603      	mov	r3, r0
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <dir_next+0x106>
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e04e      	b.n	8006d3c <dir_next+0x1a4>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	899b      	ldrh	r3, [r3, #12]
 8006ca8:	461a      	mov	r2, r3
 8006caa:	2100      	movs	r1, #0
 8006cac:	f7ff f8ff 	bl	8005eae <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	613b      	str	r3, [r7, #16]
 8006cb4:	6979      	ldr	r1, [r7, #20]
 8006cb6:	68f8      	ldr	r0, [r7, #12]
 8006cb8:	f7ff fba4 	bl	8006404 <clust2sect>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	635a      	str	r2, [r3, #52]	@ 0x34
 8006cc2:	e012      	b.n	8006cea <dir_next+0x152>
						fs->wflag = 1;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2201      	movs	r2, #1
 8006cc8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f7ff fab8 	bl	8006240 <sync_window>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <dir_next+0x142>
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e030      	b.n	8006d3c <dir_next+0x1a4>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8006cda:	693b      	ldr	r3, [r7, #16]
 8006cdc:	3301      	adds	r3, #1
 8006cde:	613b      	str	r3, [r7, #16]
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ce4:	1c5a      	adds	r2, r3, #1
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	635a      	str	r2, [r3, #52]	@ 0x34
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	895b      	ldrh	r3, [r3, #10]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	693b      	ldr	r3, [r7, #16]
 8006cf2:	4293      	cmp	r3, r2
 8006cf4:	d3e6      	bcc.n	8006cc4 <dir_next+0x12c>
					}
					fs->winsect -= n;							/* Restore window offset */
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006cfa:	693b      	ldr	r3, [r7, #16]
 8006cfc:	1ad2      	subs	r2, r2, r3
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	635a      	str	r2, [r3, #52]	@ 0x34
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	697a      	ldr	r2, [r7, #20]
 8006d06:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006d08:	6979      	ldr	r1, [r7, #20]
 8006d0a:	68f8      	ldr	r0, [r7, #12]
 8006d0c:	f7ff fb7a 	bl	8006404 <clust2sect>
 8006d10:	4602      	mov	r2, r0
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	899b      	ldrh	r3, [r3, #12]
 8006d26:	461a      	mov	r2, r3
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	fbb3 f0f2 	udiv	r0, r3, r2
 8006d2e:	fb00 f202 	mul.w	r2, r0, r2
 8006d32:	1a9b      	subs	r3, r3, r2
 8006d34:	18ca      	adds	r2, r1, r3
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006d3a:	2300      	movs	r3, #0
}
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	3718      	adds	r7, #24
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b086      	sub	sp, #24
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006d54:	2100      	movs	r1, #0
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7ff fe95 	bl	8006a86 <dir_sdi>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006d60:	7dfb      	ldrb	r3, [r7, #23]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d12b      	bne.n	8006dbe <dir_alloc+0x7a>
		n = 0;
 8006d66:	2300      	movs	r3, #0
 8006d68:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	69db      	ldr	r3, [r3, #28]
 8006d6e:	4619      	mov	r1, r3
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f7ff faa9 	bl	80062c8 <move_window>
 8006d76:	4603      	mov	r3, r0
 8006d78:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006d7a:	7dfb      	ldrb	r3, [r7, #23]
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d11d      	bne.n	8006dbc <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	6a1b      	ldr	r3, [r3, #32]
 8006d84:	781b      	ldrb	r3, [r3, #0]
 8006d86:	2be5      	cmp	r3, #229	@ 0xe5
 8006d88:	d004      	beq.n	8006d94 <dir_alloc+0x50>
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	6a1b      	ldr	r3, [r3, #32]
 8006d8e:	781b      	ldrb	r3, [r3, #0]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d107      	bne.n	8006da4 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8006d94:	693b      	ldr	r3, [r7, #16]
 8006d96:	3301      	adds	r3, #1
 8006d98:	613b      	str	r3, [r7, #16]
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	683b      	ldr	r3, [r7, #0]
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	d102      	bne.n	8006da8 <dir_alloc+0x64>
 8006da2:	e00c      	b.n	8006dbe <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8006da4:	2300      	movs	r3, #0
 8006da6:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 8006da8:	2101      	movs	r1, #1
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7ff fef4 	bl	8006b98 <dir_next>
 8006db0:	4603      	mov	r3, r0
 8006db2:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 8006db4:	7dfb      	ldrb	r3, [r7, #23]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d0d7      	beq.n	8006d6a <dir_alloc+0x26>
 8006dba:	e000      	b.n	8006dbe <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8006dbc:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8006dbe:	7dfb      	ldrb	r3, [r7, #23]
 8006dc0:	2b04      	cmp	r3, #4
 8006dc2:	d101      	bne.n	8006dc8 <dir_alloc+0x84>
 8006dc4:	2307      	movs	r3, #7
 8006dc6:	75fb      	strb	r3, [r7, #23]
	return res;
 8006dc8:	7dfb      	ldrb	r3, [r7, #23]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3718      	adds	r7, #24
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	bd80      	pop	{r7, pc}

08006dd2 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8006dd2:	b580      	push	{r7, lr}
 8006dd4:	b084      	sub	sp, #16
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
 8006dda:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	331a      	adds	r3, #26
 8006de0:	4618      	mov	r0, r3
 8006de2:	f7fe ffc1 	bl	8005d68 <ld_word>
 8006de6:	4603      	mov	r3, r0
 8006de8:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	781b      	ldrb	r3, [r3, #0]
 8006dee:	2b03      	cmp	r3, #3
 8006df0:	d109      	bne.n	8006e06 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	3314      	adds	r3, #20
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fe ffb6 	bl	8005d68 <ld_word>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	041b      	lsls	r3, r3, #16
 8006e00:	68fa      	ldr	r2, [r7, #12]
 8006e02:	4313      	orrs	r3, r2
 8006e04:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006e06:	68fb      	ldr	r3, [r7, #12]
}
 8006e08:	4618      	mov	r0, r3
 8006e0a:	3710      	adds	r7, #16
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}

08006e10 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b084      	sub	sp, #16
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60f8      	str	r0, [r7, #12]
 8006e18:	60b9      	str	r1, [r7, #8]
 8006e1a:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	331a      	adds	r3, #26
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	b292      	uxth	r2, r2
 8006e24:	4611      	mov	r1, r2
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fe ffd9 	bl	8005dde <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	781b      	ldrb	r3, [r3, #0]
 8006e30:	2b03      	cmp	r3, #3
 8006e32:	d109      	bne.n	8006e48 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	f103 0214 	add.w	r2, r3, #20
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	0c1b      	lsrs	r3, r3, #16
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	4619      	mov	r1, r3
 8006e42:	4610      	mov	r0, r2
 8006e44:	f7fe ffcb 	bl	8005dde <st_word>
	}
}
 8006e48:	bf00      	nop
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 8006e50:	b590      	push	{r4, r7, lr}
 8006e52:	b087      	sub	sp, #28
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	331a      	adds	r3, #26
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fe ff82 	bl	8005d68 <ld_word>
 8006e64:	4603      	mov	r3, r0
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d001      	beq.n	8006e6e <cmp_lfn+0x1e>
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	e059      	b.n	8006f22 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	781b      	ldrb	r3, [r3, #0]
 8006e72:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006e76:	1e5a      	subs	r2, r3, #1
 8006e78:	4613      	mov	r3, r2
 8006e7a:	005b      	lsls	r3, r3, #1
 8006e7c:	4413      	add	r3, r2
 8006e7e:	009b      	lsls	r3, r3, #2
 8006e80:	4413      	add	r3, r2
 8006e82:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006e84:	2301      	movs	r3, #1
 8006e86:	81fb      	strh	r3, [r7, #14]
 8006e88:	2300      	movs	r3, #0
 8006e8a:	613b      	str	r3, [r7, #16]
 8006e8c:	e033      	b.n	8006ef6 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 8006e8e:	4a27      	ldr	r2, [pc, #156]	@ (8006f2c <cmp_lfn+0xdc>)
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	4413      	add	r3, r2
 8006e94:	781b      	ldrb	r3, [r3, #0]
 8006e96:	461a      	mov	r2, r3
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	4413      	add	r3, r2
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	f7fe ff63 	bl	8005d68 <ld_word>
 8006ea2:	4603      	mov	r3, r0
 8006ea4:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 8006ea6:	89fb      	ldrh	r3, [r7, #14]
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d01a      	beq.n	8006ee2 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	2bfe      	cmp	r3, #254	@ 0xfe
 8006eb0:	d812      	bhi.n	8006ed8 <cmp_lfn+0x88>
 8006eb2:	89bb      	ldrh	r3, [r7, #12]
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f001 fec1 	bl	8008c3c <ff_wtoupper>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	461c      	mov	r4, r3
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	617a      	str	r2, [r7, #20]
 8006ec4:	005b      	lsls	r3, r3, #1
 8006ec6:	687a      	ldr	r2, [r7, #4]
 8006ec8:	4413      	add	r3, r2
 8006eca:	881b      	ldrh	r3, [r3, #0]
 8006ecc:	4618      	mov	r0, r3
 8006ece:	f001 feb5 	bl	8008c3c <ff_wtoupper>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	429c      	cmp	r4, r3
 8006ed6:	d001      	beq.n	8006edc <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 8006ed8:	2300      	movs	r3, #0
 8006eda:	e022      	b.n	8006f22 <cmp_lfn+0xd2>
			}
			wc = uc;
 8006edc:	89bb      	ldrh	r3, [r7, #12]
 8006ede:	81fb      	strh	r3, [r7, #14]
 8006ee0:	e006      	b.n	8006ef0 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 8006ee2:	89bb      	ldrh	r3, [r7, #12]
 8006ee4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006ee8:	4293      	cmp	r3, r2
 8006eea:	d001      	beq.n	8006ef0 <cmp_lfn+0xa0>
 8006eec:	2300      	movs	r3, #0
 8006eee:	e018      	b.n	8006f22 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006ef0:	693b      	ldr	r3, [r7, #16]
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	613b      	str	r3, [r7, #16]
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	2b0c      	cmp	r3, #12
 8006efa:	d9c8      	bls.n	8006e8e <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d00b      	beq.n	8006f20 <cmp_lfn+0xd0>
 8006f08:	89fb      	ldrh	r3, [r7, #14]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d008      	beq.n	8006f20 <cmp_lfn+0xd0>
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	005b      	lsls	r3, r3, #1
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	4413      	add	r3, r2
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d001      	beq.n	8006f20 <cmp_lfn+0xd0>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	e000      	b.n	8006f22 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 8006f20:	2301      	movs	r3, #1
}
 8006f22:	4618      	mov	r0, r3
 8006f24:	371c      	adds	r7, #28
 8006f26:	46bd      	mov	sp, r7
 8006f28:	bd90      	pop	{r4, r7, pc}
 8006f2a:	bf00      	nop
 8006f2c:	08009810 	.word	0x08009810

08006f30 <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b088      	sub	sp, #32
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	4611      	mov	r1, r2
 8006f3c:	461a      	mov	r2, r3
 8006f3e:	460b      	mov	r3, r1
 8006f40:	71fb      	strb	r3, [r7, #7]
 8006f42:	4613      	mov	r3, r2
 8006f44:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	330d      	adds	r3, #13
 8006f4a:	79ba      	ldrb	r2, [r7, #6]
 8006f4c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	330b      	adds	r3, #11
 8006f52:	220f      	movs	r2, #15
 8006f54:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	330c      	adds	r3, #12
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 8006f5e:	68bb      	ldr	r3, [r7, #8]
 8006f60:	331a      	adds	r3, #26
 8006f62:	2100      	movs	r1, #0
 8006f64:	4618      	mov	r0, r3
 8006f66:	f7fe ff3a 	bl	8005dde <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
 8006f6c:	1e5a      	subs	r2, r3, #1
 8006f6e:	4613      	mov	r3, r2
 8006f70:	005b      	lsls	r3, r3, #1
 8006f72:	4413      	add	r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	4413      	add	r3, r2
 8006f78:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006f7a:	2300      	movs	r3, #0
 8006f7c:	82fb      	strh	r3, [r7, #22]
 8006f7e:	2300      	movs	r3, #0
 8006f80:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 8006f82:	8afb      	ldrh	r3, [r7, #22]
 8006f84:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d007      	beq.n	8006f9c <put_lfn+0x6c>
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	1c5a      	adds	r2, r3, #1
 8006f90:	61fa      	str	r2, [r7, #28]
 8006f92:	005b      	lsls	r3, r3, #1
 8006f94:	68fa      	ldr	r2, [r7, #12]
 8006f96:	4413      	add	r3, r2
 8006f98:	881b      	ldrh	r3, [r3, #0]
 8006f9a:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 8006f9c:	4a17      	ldr	r2, [pc, #92]	@ (8006ffc <put_lfn+0xcc>)
 8006f9e:	69bb      	ldr	r3, [r7, #24]
 8006fa0:	4413      	add	r3, r2
 8006fa2:	781b      	ldrb	r3, [r3, #0]
 8006fa4:	461a      	mov	r2, r3
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	4413      	add	r3, r2
 8006faa:	8afa      	ldrh	r2, [r7, #22]
 8006fac:	4611      	mov	r1, r2
 8006fae:	4618      	mov	r0, r3
 8006fb0:	f7fe ff15 	bl	8005dde <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 8006fb4:	8afb      	ldrh	r3, [r7, #22]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d102      	bne.n	8006fc0 <put_lfn+0x90>
 8006fba:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006fbe:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8006fc0:	69bb      	ldr	r3, [r7, #24]
 8006fc2:	3301      	adds	r3, #1
 8006fc4:	61bb      	str	r3, [r7, #24]
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	2b0c      	cmp	r3, #12
 8006fca:	d9da      	bls.n	8006f82 <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 8006fcc:	8afb      	ldrh	r3, [r7, #22]
 8006fce:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d006      	beq.n	8006fe4 <put_lfn+0xb4>
 8006fd6:	69fb      	ldr	r3, [r7, #28]
 8006fd8:	005b      	lsls	r3, r3, #1
 8006fda:	68fa      	ldr	r2, [r7, #12]
 8006fdc:	4413      	add	r3, r2
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d103      	bne.n	8006fec <put_lfn+0xbc>
 8006fe4:	79fb      	ldrb	r3, [r7, #7]
 8006fe6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fea:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8006fec:	68bb      	ldr	r3, [r7, #8]
 8006fee:	79fa      	ldrb	r2, [r7, #7]
 8006ff0:	701a      	strb	r2, [r3, #0]
}
 8006ff2:	bf00      	nop
 8006ff4:	3720      	adds	r7, #32
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	bf00      	nop
 8006ffc:	08009810 	.word	0x08009810

08007000 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b08c      	sub	sp, #48	@ 0x30
 8007004:	af00      	add	r7, sp, #0
 8007006:	60f8      	str	r0, [r7, #12]
 8007008:	60b9      	str	r1, [r7, #8]
 800700a:	607a      	str	r2, [r7, #4]
 800700c:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800700e:	220b      	movs	r2, #11
 8007010:	68b9      	ldr	r1, [r7, #8]
 8007012:	68f8      	ldr	r0, [r7, #12]
 8007014:	f7fe ff2a 	bl	8005e6c <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	2b05      	cmp	r3, #5
 800701c:	d92b      	bls.n	8007076 <gen_numname+0x76>
		sr = seq;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8007022:	e022      	b.n	800706a <gen_numname+0x6a>
			wc = *lfn++;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	1c9a      	adds	r2, r3, #2
 8007028:	607a      	str	r2, [r7, #4]
 800702a:	881b      	ldrh	r3, [r3, #0]
 800702c:	847b      	strh	r3, [r7, #34]	@ 0x22
			for (i = 0; i < 16; i++) {
 800702e:	2300      	movs	r3, #0
 8007030:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007032:	e017      	b.n	8007064 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8007034:	69fb      	ldr	r3, [r7, #28]
 8007036:	005a      	lsls	r2, r3, #1
 8007038:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 800703a:	f003 0301 	and.w	r3, r3, #1
 800703e:	4413      	add	r3, r2
 8007040:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8007042:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8007044:	085b      	lsrs	r3, r3, #1
 8007046:	847b      	strh	r3, [r7, #34]	@ 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8007048:	69fb      	ldr	r3, [r7, #28]
 800704a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800704e:	2b00      	cmp	r3, #0
 8007050:	d005      	beq.n	800705e <gen_numname+0x5e>
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	f483 3388 	eor.w	r3, r3, #69632	@ 0x11000
 8007058:	f083 0321 	eor.w	r3, r3, #33	@ 0x21
 800705c:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800705e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007060:	3301      	adds	r3, #1
 8007062:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007066:	2b0f      	cmp	r3, #15
 8007068:	d9e4      	bls.n	8007034 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	881b      	ldrh	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1d8      	bne.n	8007024 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8007072:	69fb      	ldr	r3, [r7, #28]
 8007074:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8007076:	2307      	movs	r3, #7
 8007078:	62bb      	str	r3, [r7, #40]	@ 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	b2db      	uxtb	r3, r3
 800707e:	f003 030f 	and.w	r3, r3, #15
 8007082:	b2db      	uxtb	r3, r3
 8007084:	3330      	adds	r3, #48	@ 0x30
 8007086:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (c > '9') c += 7;
 800708a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800708e:	2b39      	cmp	r3, #57	@ 0x39
 8007090:	d904      	bls.n	800709c <gen_numname+0x9c>
 8007092:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007096:	3307      	adds	r3, #7
 8007098:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		ns[i--] = c;
 800709c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800709e:	1e5a      	subs	r2, r3, #1
 80070a0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80070a2:	3330      	adds	r3, #48	@ 0x30
 80070a4:	443b      	add	r3, r7
 80070a6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80070aa:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 80070ae:	683b      	ldr	r3, [r7, #0]
 80070b0:	091b      	lsrs	r3, r3, #4
 80070b2:	603b      	str	r3, [r7, #0]
	} while (seq);
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d1df      	bne.n	800707a <gen_numname+0x7a>
	ns[i] = '~';
 80070ba:	f107 0214 	add.w	r2, r7, #20
 80070be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c0:	4413      	add	r3, r2
 80070c2:	227e      	movs	r2, #126	@ 0x7e
 80070c4:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 80070c6:	2300      	movs	r3, #0
 80070c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80070ca:	e002      	b.n	80070d2 <gen_numname+0xd2>
 80070cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070ce:	3301      	adds	r3, #1
 80070d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80070d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d205      	bcs.n	80070e6 <gen_numname+0xe6>
 80070da:	68fa      	ldr	r2, [r7, #12]
 80070dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070de:	4413      	add	r3, r2
 80070e0:	781b      	ldrb	r3, [r3, #0]
 80070e2:	2b20      	cmp	r3, #32
 80070e4:	d1f2      	bne.n	80070cc <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 80070e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e8:	2b07      	cmp	r3, #7
 80070ea:	d807      	bhi.n	80070fc <gen_numname+0xfc>
 80070ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	62ba      	str	r2, [r7, #40]	@ 0x28
 80070f2:	3330      	adds	r3, #48	@ 0x30
 80070f4:	443b      	add	r3, r7
 80070f6:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 80070fa:	e000      	b.n	80070fe <gen_numname+0xfe>
 80070fc:	2120      	movs	r1, #32
 80070fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007100:	1c5a      	adds	r2, r3, #1
 8007102:	627a      	str	r2, [r7, #36]	@ 0x24
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	4413      	add	r3, r2
 8007108:	460a      	mov	r2, r1
 800710a:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800710c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800710e:	2b07      	cmp	r3, #7
 8007110:	d9e9      	bls.n	80070e6 <gen_numname+0xe6>
}
 8007112:	bf00      	nop
 8007114:	bf00      	nop
 8007116:	3730      	adds	r7, #48	@ 0x30
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8007124:	2300      	movs	r3, #0
 8007126:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8007128:	230b      	movs	r3, #11
 800712a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800712c:	7bfb      	ldrb	r3, [r7, #15]
 800712e:	b2da      	uxtb	r2, r3
 8007130:	0852      	lsrs	r2, r2, #1
 8007132:	01db      	lsls	r3, r3, #7
 8007134:	4313      	orrs	r3, r2
 8007136:	b2da      	uxtb	r2, r3
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	1c59      	adds	r1, r3, #1
 800713c:	6079      	str	r1, [r7, #4]
 800713e:	781b      	ldrb	r3, [r3, #0]
 8007140:	4413      	add	r3, r2
 8007142:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8007144:	68bb      	ldr	r3, [r7, #8]
 8007146:	3b01      	subs	r3, #1
 8007148:	60bb      	str	r3, [r7, #8]
 800714a:	68bb      	ldr	r3, [r7, #8]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d1ed      	bne.n	800712c <sum_sfn+0x10>
	return sum;
 8007150:	7bfb      	ldrb	r3, [r7, #15]
}
 8007152:	4618      	mov	r0, r3
 8007154:	3714      	adds	r7, #20
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b086      	sub	sp, #24
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800716c:	2100      	movs	r1, #0
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f7ff fc89 	bl	8006a86 <dir_sdi>
 8007174:	4603      	mov	r3, r0
 8007176:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8007178:	7dfb      	ldrb	r3, [r7, #23]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d001      	beq.n	8007182 <dir_find+0x24>
 800717e:	7dfb      	ldrb	r3, [r7, #23]
 8007180:	e0a9      	b.n	80072d6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8007182:	23ff      	movs	r3, #255	@ 0xff
 8007184:	753b      	strb	r3, [r7, #20]
 8007186:	7d3b      	ldrb	r3, [r7, #20]
 8007188:	757b      	strb	r3, [r7, #21]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f04f 32ff 	mov.w	r2, #4294967295
 8007190:	631a      	str	r2, [r3, #48]	@ 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	4619      	mov	r1, r3
 8007198:	6938      	ldr	r0, [r7, #16]
 800719a:	f7ff f895 	bl	80062c8 <move_window>
 800719e:	4603      	mov	r3, r0
 80071a0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80071a2:	7dfb      	ldrb	r3, [r7, #23]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f040 8090 	bne.w	80072ca <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	6a1b      	ldr	r3, [r3, #32]
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80071b2:	7dbb      	ldrb	r3, [r7, #22]
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d102      	bne.n	80071be <dir_find+0x60>
 80071b8:	2304      	movs	r3, #4
 80071ba:	75fb      	strb	r3, [r7, #23]
 80071bc:	e08a      	b.n	80072d4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	6a1b      	ldr	r3, [r3, #32]
 80071c2:	330b      	adds	r3, #11
 80071c4:	781b      	ldrb	r3, [r3, #0]
 80071c6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80071ca:	73fb      	strb	r3, [r7, #15]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	7bfa      	ldrb	r2, [r7, #15]
 80071d0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 80071d2:	7dbb      	ldrb	r3, [r7, #22]
 80071d4:	2be5      	cmp	r3, #229	@ 0xe5
 80071d6:	d007      	beq.n	80071e8 <dir_find+0x8a>
 80071d8:	7bfb      	ldrb	r3, [r7, #15]
 80071da:	f003 0308 	and.w	r3, r3, #8
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d009      	beq.n	80071f6 <dir_find+0x98>
 80071e2:	7bfb      	ldrb	r3, [r7, #15]
 80071e4:	2b0f      	cmp	r3, #15
 80071e6:	d006      	beq.n	80071f6 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80071e8:	23ff      	movs	r3, #255	@ 0xff
 80071ea:	757b      	strb	r3, [r7, #21]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f04f 32ff 	mov.w	r2, #4294967295
 80071f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80071f4:	e05e      	b.n	80072b4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 80071f6:	7bfb      	ldrb	r3, [r7, #15]
 80071f8:	2b0f      	cmp	r3, #15
 80071fa:	d136      	bne.n	800726a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007206:	2b00      	cmp	r3, #0
 8007208:	d154      	bne.n	80072b4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800720a:	7dbb      	ldrb	r3, [r7, #22]
 800720c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00d      	beq.n	8007230 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6a1b      	ldr	r3, [r3, #32]
 8007218:	7b5b      	ldrb	r3, [r3, #13]
 800721a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800721c:	7dbb      	ldrb	r3, [r7, #22]
 800721e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007222:	75bb      	strb	r3, [r7, #22]
 8007224:	7dbb      	ldrb	r3, [r7, #22]
 8007226:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	695a      	ldr	r2, [r3, #20]
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	631a      	str	r2, [r3, #48]	@ 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8007230:	7dba      	ldrb	r2, [r7, #22]
 8007232:	7d7b      	ldrb	r3, [r7, #21]
 8007234:	429a      	cmp	r2, r3
 8007236:	d115      	bne.n	8007264 <dir_find+0x106>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	330d      	adds	r3, #13
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	7d3a      	ldrb	r2, [r7, #20]
 8007242:	429a      	cmp	r2, r3
 8007244:	d10e      	bne.n	8007264 <dir_find+0x106>
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	691a      	ldr	r2, [r3, #16]
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6a1b      	ldr	r3, [r3, #32]
 800724e:	4619      	mov	r1, r3
 8007250:	4610      	mov	r0, r2
 8007252:	f7ff fdfd 	bl	8006e50 <cmp_lfn>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <dir_find+0x106>
 800725c:	7d7b      	ldrb	r3, [r7, #21]
 800725e:	3b01      	subs	r3, #1
 8007260:	b2db      	uxtb	r3, r3
 8007262:	e000      	b.n	8007266 <dir_find+0x108>
 8007264:	23ff      	movs	r3, #255	@ 0xff
 8007266:	757b      	strb	r3, [r7, #21]
 8007268:	e024      	b.n	80072b4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800726a:	7d7b      	ldrb	r3, [r7, #21]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d109      	bne.n	8007284 <dir_find+0x126>
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	6a1b      	ldr	r3, [r3, #32]
 8007274:	4618      	mov	r0, r3
 8007276:	f7ff ff51 	bl	800711c <sum_sfn>
 800727a:	4603      	mov	r3, r0
 800727c:	461a      	mov	r2, r3
 800727e:	7d3b      	ldrb	r3, [r7, #20]
 8007280:	4293      	cmp	r3, r2
 8007282:	d024      	beq.n	80072ce <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 800728a:	f003 0301 	and.w	r3, r3, #1
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10a      	bne.n	80072a8 <dir_find+0x14a>
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a18      	ldr	r0, [r3, #32]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	3324      	adds	r3, #36	@ 0x24
 800729a:	220b      	movs	r2, #11
 800729c:	4619      	mov	r1, r3
 800729e:	f7fe fe21 	bl	8005ee4 <mem_cmp>
 80072a2:	4603      	mov	r3, r0
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d014      	beq.n	80072d2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 80072a8:	23ff      	movs	r3, #255	@ 0xff
 80072aa:	757b      	strb	r3, [r7, #21]
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f04f 32ff 	mov.w	r2, #4294967295
 80072b2:	631a      	str	r2, [r3, #48]	@ 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 80072b4:	2100      	movs	r1, #0
 80072b6:	6878      	ldr	r0, [r7, #4]
 80072b8:	f7ff fc6e 	bl	8006b98 <dir_next>
 80072bc:	4603      	mov	r3, r0
 80072be:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 80072c0:	7dfb      	ldrb	r3, [r7, #23]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	f43f af65 	beq.w	8007192 <dir_find+0x34>
 80072c8:	e004      	b.n	80072d4 <dir_find+0x176>
		if (res != FR_OK) break;
 80072ca:	bf00      	nop
 80072cc:	e002      	b.n	80072d4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 80072ce:	bf00      	nop
 80072d0:	e000      	b.n	80072d4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 80072d2:	bf00      	nop

	return res;
 80072d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
	...

080072e0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08c      	sub	sp, #48	@ 0x30
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80072f4:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d001      	beq.n	8007300 <dir_register+0x20>
 80072fc:	2306      	movs	r3, #6
 80072fe:	e0e0      	b.n	80074c2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8007300:	2300      	movs	r3, #0
 8007302:	627b      	str	r3, [r7, #36]	@ 0x24
 8007304:	e002      	b.n	800730c <dir_register+0x2c>
 8007306:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007308:	3301      	adds	r3, #1
 800730a:	627b      	str	r3, [r7, #36]	@ 0x24
 800730c:	69fb      	ldr	r3, [r7, #28]
 800730e:	691a      	ldr	r2, [r3, #16]
 8007310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007312:	005b      	lsls	r3, r3, #1
 8007314:	4413      	add	r3, r2
 8007316:	881b      	ldrh	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d1f4      	bne.n	8007306 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8007322:	f107 030c 	add.w	r3, r7, #12
 8007326:	220c      	movs	r2, #12
 8007328:	4618      	mov	r0, r3
 800732a:	f7fe fd9f 	bl	8005e6c <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800732e:	7dfb      	ldrb	r3, [r7, #23]
 8007330:	f003 0301 	and.w	r3, r3, #1
 8007334:	2b00      	cmp	r3, #0
 8007336:	d032      	beq.n	800739e <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2240      	movs	r2, #64	@ 0x40
 800733c:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		for (n = 1; n < 100; n++) {
 8007340:	2301      	movs	r3, #1
 8007342:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007344:	e016      	b.n	8007374 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f103 0024 	add.w	r0, r3, #36	@ 0x24
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	691a      	ldr	r2, [r3, #16]
 8007350:	f107 010c 	add.w	r1, r7, #12
 8007354:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007356:	f7ff fe53 	bl	8007000 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f7ff feff 	bl	800715e <dir_find>
 8007360:	4603      	mov	r3, r0
 8007362:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			if (res != FR_OK) break;
 8007366:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800736a:	2b00      	cmp	r3, #0
 800736c:	d106      	bne.n	800737c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800736e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007370:	3301      	adds	r3, #1
 8007372:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007376:	2b63      	cmp	r3, #99	@ 0x63
 8007378:	d9e5      	bls.n	8007346 <dir_register+0x66>
 800737a:	e000      	b.n	800737e <dir_register+0x9e>
			if (res != FR_OK) break;
 800737c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800737e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007380:	2b64      	cmp	r3, #100	@ 0x64
 8007382:	d101      	bne.n	8007388 <dir_register+0xa8>
 8007384:	2307      	movs	r3, #7
 8007386:	e09c      	b.n	80074c2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8007388:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800738c:	2b04      	cmp	r3, #4
 800738e:	d002      	beq.n	8007396 <dir_register+0xb6>
 8007390:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007394:	e095      	b.n	80074c2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8007396:	7dfa      	ldrb	r2, [r7, #23]
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800739e:	7dfb      	ldrb	r3, [r7, #23]
 80073a0:	f003 0302 	and.w	r3, r3, #2
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d007      	beq.n	80073b8 <dir_register+0xd8>
 80073a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073aa:	330c      	adds	r3, #12
 80073ac:	4a47      	ldr	r2, [pc, #284]	@ (80074cc <dir_register+0x1ec>)
 80073ae:	fba2 2303 	umull	r2, r3, r2, r3
 80073b2:	089b      	lsrs	r3, r3, #2
 80073b4:	3301      	adds	r3, #1
 80073b6:	e000      	b.n	80073ba <dir_register+0xda>
 80073b8:	2301      	movs	r3, #1
 80073ba:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 80073bc:	6a39      	ldr	r1, [r7, #32]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f7ff fcc0 	bl	8006d44 <dir_alloc>
 80073c4:	4603      	mov	r3, r0
 80073c6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 80073ca:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d148      	bne.n	8007464 <dir_register+0x184>
 80073d2:	6a3b      	ldr	r3, [r7, #32]
 80073d4:	3b01      	subs	r3, #1
 80073d6:	623b      	str	r3, [r7, #32]
 80073d8:	6a3b      	ldr	r3, [r7, #32]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d042      	beq.n	8007464 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	695a      	ldr	r2, [r3, #20]
 80073e2:	6a3b      	ldr	r3, [r7, #32]
 80073e4:	015b      	lsls	r3, r3, #5
 80073e6:	1ad3      	subs	r3, r2, r3
 80073e8:	4619      	mov	r1, r3
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f7ff fb4b 	bl	8006a86 <dir_sdi>
 80073f0:	4603      	mov	r3, r0
 80073f2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 80073f6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d132      	bne.n	8007464 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	3324      	adds	r3, #36	@ 0x24
 8007402:	4618      	mov	r0, r3
 8007404:	f7ff fe8a 	bl	800711c <sum_sfn>
 8007408:	4603      	mov	r3, r0
 800740a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	69db      	ldr	r3, [r3, #28]
 8007410:	4619      	mov	r1, r3
 8007412:	69f8      	ldr	r0, [r7, #28]
 8007414:	f7fe ff58 	bl	80062c8 <move_window>
 8007418:	4603      	mov	r3, r0
 800741a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
				if (res != FR_OK) break;
 800741e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007422:	2b00      	cmp	r3, #0
 8007424:	d11d      	bne.n	8007462 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8007426:	69fb      	ldr	r3, [r7, #28]
 8007428:	6918      	ldr	r0, [r3, #16]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	6a19      	ldr	r1, [r3, #32]
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	b2da      	uxtb	r2, r3
 8007432:	7efb      	ldrb	r3, [r7, #27]
 8007434:	f7ff fd7c 	bl	8006f30 <put_lfn>
				fs->wflag = 1;
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	2201      	movs	r2, #1
 800743c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800743e:	2100      	movs	r1, #0
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7ff fba9 	bl	8006b98 <dir_next>
 8007446:	4603      	mov	r3, r0
 8007448:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
			} while (res == FR_OK && --nent);
 800744c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007450:	2b00      	cmp	r3, #0
 8007452:	d107      	bne.n	8007464 <dir_register+0x184>
 8007454:	6a3b      	ldr	r3, [r7, #32]
 8007456:	3b01      	subs	r3, #1
 8007458:	623b      	str	r3, [r7, #32]
 800745a:	6a3b      	ldr	r3, [r7, #32]
 800745c:	2b00      	cmp	r3, #0
 800745e:	d1d5      	bne.n	800740c <dir_register+0x12c>
 8007460:	e000      	b.n	8007464 <dir_register+0x184>
				if (res != FR_OK) break;
 8007462:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8007464:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007468:	2b00      	cmp	r3, #0
 800746a:	d128      	bne.n	80074be <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	69db      	ldr	r3, [r3, #28]
 8007470:	4619      	mov	r1, r3
 8007472:	69f8      	ldr	r0, [r7, #28]
 8007474:	f7fe ff28 	bl	80062c8 <move_window>
 8007478:	4603      	mov	r3, r0
 800747a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		if (res == FR_OK) {
 800747e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007482:	2b00      	cmp	r3, #0
 8007484:	d11b      	bne.n	80074be <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a1b      	ldr	r3, [r3, #32]
 800748a:	2220      	movs	r2, #32
 800748c:	2100      	movs	r1, #0
 800748e:	4618      	mov	r0, r3
 8007490:	f7fe fd0d 	bl	8005eae <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a18      	ldr	r0, [r3, #32]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	3324      	adds	r3, #36	@ 0x24
 800749c:	220b      	movs	r2, #11
 800749e:	4619      	mov	r1, r3
 80074a0:	f7fe fce4 	bl	8005e6c <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f893 202f 	ldrb.w	r2, [r3, #47]	@ 0x2f
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	6a1b      	ldr	r3, [r3, #32]
 80074ae:	330c      	adds	r3, #12
 80074b0:	f002 0218 	and.w	r2, r2, #24
 80074b4:	b2d2      	uxtb	r2, r2
 80074b6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	2201      	movs	r2, #1
 80074bc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 80074be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3730      	adds	r7, #48	@ 0x30
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	4ec4ec4f 	.word	0x4ec4ec4f

080074d0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	b08a      	sub	sp, #40	@ 0x28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	6078      	str	r0, [r7, #4]
 80074d8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	613b      	str	r3, [r7, #16]
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	60fb      	str	r3, [r7, #12]
 80074e8:	2300      	movs	r3, #0
 80074ea:	617b      	str	r3, [r7, #20]
 80074ec:	697b      	ldr	r3, [r7, #20]
 80074ee:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 80074f0:	69bb      	ldr	r3, [r7, #24]
 80074f2:	1c5a      	adds	r2, r3, #1
 80074f4:	61ba      	str	r2, [r7, #24]
 80074f6:	693a      	ldr	r2, [r7, #16]
 80074f8:	4413      	add	r3, r2
 80074fa:	781b      	ldrb	r3, [r3, #0]
 80074fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 80074fe:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007500:	2b1f      	cmp	r3, #31
 8007502:	d940      	bls.n	8007586 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8007504:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007506:	2b2f      	cmp	r3, #47	@ 0x2f
 8007508:	d006      	beq.n	8007518 <create_name+0x48>
 800750a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800750c:	2b5c      	cmp	r3, #92	@ 0x5c
 800750e:	d110      	bne.n	8007532 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8007510:	e002      	b.n	8007518 <create_name+0x48>
 8007512:	69bb      	ldr	r3, [r7, #24]
 8007514:	3301      	adds	r3, #1
 8007516:	61bb      	str	r3, [r7, #24]
 8007518:	693a      	ldr	r2, [r7, #16]
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	4413      	add	r3, r2
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	2b2f      	cmp	r3, #47	@ 0x2f
 8007522:	d0f6      	beq.n	8007512 <create_name+0x42>
 8007524:	693a      	ldr	r2, [r7, #16]
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	4413      	add	r3, r2
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	2b5c      	cmp	r3, #92	@ 0x5c
 800752e:	d0f0      	beq.n	8007512 <create_name+0x42>
			break;
 8007530:	e02a      	b.n	8007588 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	2bfe      	cmp	r3, #254	@ 0xfe
 8007536:	d901      	bls.n	800753c <create_name+0x6c>
 8007538:	2306      	movs	r3, #6
 800753a:	e17d      	b.n	8007838 <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800753c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800753e:	b2db      	uxtb	r3, r3
 8007540:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8007542:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007544:	2101      	movs	r1, #1
 8007546:	4618      	mov	r0, r3
 8007548:	f001 fb3c 	bl	8008bc4 <ff_convert>
 800754c:	4603      	mov	r3, r0
 800754e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8007550:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <create_name+0x8a>
 8007556:	2306      	movs	r3, #6
 8007558:	e16e      	b.n	8007838 <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800755a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800755c:	2b7f      	cmp	r3, #127	@ 0x7f
 800755e:	d809      	bhi.n	8007574 <create_name+0xa4>
 8007560:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007562:	4619      	mov	r1, r3
 8007564:	488d      	ldr	r0, [pc, #564]	@ (800779c <create_name+0x2cc>)
 8007566:	f7fe fce4 	bl	8005f32 <chk_chr>
 800756a:	4603      	mov	r3, r0
 800756c:	2b00      	cmp	r3, #0
 800756e:	d001      	beq.n	8007574 <create_name+0xa4>
 8007570:	2306      	movs	r3, #6
 8007572:	e161      	b.n	8007838 <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	1c5a      	adds	r2, r3, #1
 8007578:	617a      	str	r2, [r7, #20]
 800757a:	005b      	lsls	r3, r3, #1
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	4413      	add	r3, r2
 8007580:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8007582:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8007584:	e7b4      	b.n	80074f0 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8007586:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	69bb      	ldr	r3, [r7, #24]
 800758c:	441a      	add	r2, r3
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8007592:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007594:	2b1f      	cmp	r3, #31
 8007596:	d801      	bhi.n	800759c <create_name+0xcc>
 8007598:	2304      	movs	r3, #4
 800759a:	e000      	b.n	800759e <create_name+0xce>
 800759c:	2300      	movs	r3, #0
 800759e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80075a2:	e011      	b.n	80075c8 <create_name+0xf8>
		w = lfn[di - 1];
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80075aa:	3b01      	subs	r3, #1
 80075ac:	005b      	lsls	r3, r3, #1
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	4413      	add	r3, r2
 80075b2:	881b      	ldrh	r3, [r3, #0]
 80075b4:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (w != ' ' && w != '.') break;
 80075b6:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80075b8:	2b20      	cmp	r3, #32
 80075ba:	d002      	beq.n	80075c2 <create_name+0xf2>
 80075bc:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80075be:	2b2e      	cmp	r3, #46	@ 0x2e
 80075c0:	d106      	bne.n	80075d0 <create_name+0x100>
		di--;
 80075c2:	697b      	ldr	r3, [r7, #20]
 80075c4:	3b01      	subs	r3, #1
 80075c6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 80075c8:	697b      	ldr	r3, [r7, #20]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d1ea      	bne.n	80075a4 <create_name+0xd4>
 80075ce:	e000      	b.n	80075d2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 80075d0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 80075d2:	697b      	ldr	r3, [r7, #20]
 80075d4:	005b      	lsls	r3, r3, #1
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	4413      	add	r3, r2
 80075da:	2200      	movs	r2, #0
 80075dc:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <create_name+0x118>
 80075e4:	2306      	movs	r3, #6
 80075e6:	e127      	b.n	8007838 <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	3324      	adds	r3, #36	@ 0x24
 80075ec:	220b      	movs	r2, #11
 80075ee:	2120      	movs	r1, #32
 80075f0:	4618      	mov	r0, r3
 80075f2:	f7fe fc5c 	bl	8005eae <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 80075f6:	2300      	movs	r3, #0
 80075f8:	61bb      	str	r3, [r7, #24]
 80075fa:	e002      	b.n	8007602 <create_name+0x132>
 80075fc:	69bb      	ldr	r3, [r7, #24]
 80075fe:	3301      	adds	r3, #1
 8007600:	61bb      	str	r3, [r7, #24]
 8007602:	69bb      	ldr	r3, [r7, #24]
 8007604:	005b      	lsls	r3, r3, #1
 8007606:	68fa      	ldr	r2, [r7, #12]
 8007608:	4413      	add	r3, r2
 800760a:	881b      	ldrh	r3, [r3, #0]
 800760c:	2b20      	cmp	r3, #32
 800760e:	d0f5      	beq.n	80075fc <create_name+0x12c>
 8007610:	69bb      	ldr	r3, [r7, #24]
 8007612:	005b      	lsls	r3, r3, #1
 8007614:	68fa      	ldr	r2, [r7, #12]
 8007616:	4413      	add	r3, r2
 8007618:	881b      	ldrh	r3, [r3, #0]
 800761a:	2b2e      	cmp	r3, #46	@ 0x2e
 800761c:	d0ee      	beq.n	80075fc <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800761e:	69bb      	ldr	r3, [r7, #24]
 8007620:	2b00      	cmp	r3, #0
 8007622:	d009      	beq.n	8007638 <create_name+0x168>
 8007624:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007628:	f043 0303 	orr.w	r3, r3, #3
 800762c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007630:	e002      	b.n	8007638 <create_name+0x168>
 8007632:	697b      	ldr	r3, [r7, #20]
 8007634:	3b01      	subs	r3, #1
 8007636:	617b      	str	r3, [r7, #20]
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	2b00      	cmp	r3, #0
 800763c:	d009      	beq.n	8007652 <create_name+0x182>
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8007644:	3b01      	subs	r3, #1
 8007646:	005b      	lsls	r3, r3, #1
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	4413      	add	r3, r2
 800764c:	881b      	ldrh	r3, [r3, #0]
 800764e:	2b2e      	cmp	r3, #46	@ 0x2e
 8007650:	d1ef      	bne.n	8007632 <create_name+0x162>

	i = b = 0; ni = 8;
 8007652:	2300      	movs	r3, #0
 8007654:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007658:	2300      	movs	r3, #0
 800765a:	623b      	str	r3, [r7, #32]
 800765c:	2308      	movs	r3, #8
 800765e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007660:	69bb      	ldr	r3, [r7, #24]
 8007662:	1c5a      	adds	r2, r3, #1
 8007664:	61ba      	str	r2, [r7, #24]
 8007666:	005b      	lsls	r3, r3, #1
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	881b      	ldrh	r3, [r3, #0]
 800766e:	84bb      	strh	r3, [r7, #36]	@ 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007670:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007672:	2b00      	cmp	r3, #0
 8007674:	f000 8090 	beq.w	8007798 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007678:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800767a:	2b20      	cmp	r3, #32
 800767c:	d006      	beq.n	800768c <create_name+0x1bc>
 800767e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007680:	2b2e      	cmp	r3, #46	@ 0x2e
 8007682:	d10a      	bne.n	800769a <create_name+0x1ca>
 8007684:	69ba      	ldr	r2, [r7, #24]
 8007686:	697b      	ldr	r3, [r7, #20]
 8007688:	429a      	cmp	r2, r3
 800768a:	d006      	beq.n	800769a <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800768c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007690:	f043 0303 	orr.w	r3, r3, #3
 8007694:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007698:	e07d      	b.n	8007796 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800769a:	6a3a      	ldr	r2, [r7, #32]
 800769c:	69fb      	ldr	r3, [r7, #28]
 800769e:	429a      	cmp	r2, r3
 80076a0:	d203      	bcs.n	80076aa <create_name+0x1da>
 80076a2:	69ba      	ldr	r2, [r7, #24]
 80076a4:	697b      	ldr	r3, [r7, #20]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d123      	bne.n	80076f2 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80076aa:	69fb      	ldr	r3, [r7, #28]
 80076ac:	2b0b      	cmp	r3, #11
 80076ae:	d106      	bne.n	80076be <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80076b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80076b4:	f043 0303 	orr.w	r3, r3, #3
 80076b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80076bc:	e075      	b.n	80077aa <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80076be:	69ba      	ldr	r2, [r7, #24]
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d005      	beq.n	80076d2 <create_name+0x202>
 80076c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80076ca:	f043 0303 	orr.w	r3, r3, #3
 80076ce:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (si > di) break;			/* No extension */
 80076d2:	69ba      	ldr	r2, [r7, #24]
 80076d4:	697b      	ldr	r3, [r7, #20]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d866      	bhi.n	80077a8 <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80076da:	697b      	ldr	r3, [r7, #20]
 80076dc:	61bb      	str	r3, [r7, #24]
 80076de:	2308      	movs	r3, #8
 80076e0:	623b      	str	r3, [r7, #32]
 80076e2:	230b      	movs	r3, #11
 80076e4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80076e6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 80076f0:	e051      	b.n	8007796 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 80076f2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80076f4:	2b7f      	cmp	r3, #127	@ 0x7f
 80076f6:	d914      	bls.n	8007722 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 80076f8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80076fa:	2100      	movs	r1, #0
 80076fc:	4618      	mov	r0, r3
 80076fe:	f001 fa61 	bl	8008bc4 <ff_convert>
 8007702:	4603      	mov	r3, r0
 8007704:	84bb      	strh	r3, [r7, #36]	@ 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007706:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007708:	2b00      	cmp	r3, #0
 800770a:	d004      	beq.n	8007716 <create_name+0x246>
 800770c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800770e:	3b80      	subs	r3, #128	@ 0x80
 8007710:	4a23      	ldr	r2, [pc, #140]	@ (80077a0 <create_name+0x2d0>)
 8007712:	5cd3      	ldrb	r3, [r2, r3]
 8007714:	84bb      	strh	r3, [r7, #36]	@ 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007716:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800771a:	f043 0302 	orr.w	r3, r3, #2
 800771e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007722:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007724:	2b00      	cmp	r3, #0
 8007726:	d007      	beq.n	8007738 <create_name+0x268>
 8007728:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800772a:	4619      	mov	r1, r3
 800772c:	481d      	ldr	r0, [pc, #116]	@ (80077a4 <create_name+0x2d4>)
 800772e:	f7fe fc00 	bl	8005f32 <chk_chr>
 8007732:	4603      	mov	r3, r0
 8007734:	2b00      	cmp	r3, #0
 8007736:	d008      	beq.n	800774a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007738:	235f      	movs	r3, #95	@ 0x5f
 800773a:	84bb      	strh	r3, [r7, #36]	@ 0x24
 800773c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007740:	f043 0303 	orr.w	r3, r3, #3
 8007744:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007748:	e01b      	b.n	8007782 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800774a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800774c:	2b40      	cmp	r3, #64	@ 0x40
 800774e:	d909      	bls.n	8007764 <create_name+0x294>
 8007750:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007752:	2b5a      	cmp	r3, #90	@ 0x5a
 8007754:	d806      	bhi.n	8007764 <create_name+0x294>
					b |= 2;
 8007756:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800775a:	f043 0302 	orr.w	r3, r3, #2
 800775e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007762:	e00e      	b.n	8007782 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007764:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8007766:	2b60      	cmp	r3, #96	@ 0x60
 8007768:	d90b      	bls.n	8007782 <create_name+0x2b2>
 800776a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800776c:	2b7a      	cmp	r3, #122	@ 0x7a
 800776e:	d808      	bhi.n	8007782 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007770:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007774:	f043 0301 	orr.w	r3, r3, #1
 8007778:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800777c:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800777e:	3b20      	subs	r3, #32
 8007780:	84bb      	strh	r3, [r7, #36]	@ 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007782:	6a3b      	ldr	r3, [r7, #32]
 8007784:	1c5a      	adds	r2, r3, #1
 8007786:	623a      	str	r2, [r7, #32]
 8007788:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800778a:	b2d1      	uxtb	r1, r2
 800778c:	687a      	ldr	r2, [r7, #4]
 800778e:	4413      	add	r3, r2
 8007790:	460a      	mov	r2, r1
 8007792:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
		w = lfn[si++];					/* Get an LFN character */
 8007796:	e763      	b.n	8007660 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 8007798:	bf00      	nop
 800779a:	e006      	b.n	80077aa <create_name+0x2da>
 800779c:	08009730 	.word	0x08009730
 80077a0:	08009790 	.word	0x08009790
 80077a4:	0800973c 	.word	0x0800973c
			if (si > di) break;			/* No extension */
 80077a8:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80077b0:	2be5      	cmp	r3, #229	@ 0xe5
 80077b2:	d103      	bne.n	80077bc <create_name+0x2ec>
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2205      	movs	r2, #5
 80077b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

	if (ni == 8) b <<= 2;
 80077bc:	69fb      	ldr	r3, [r7, #28]
 80077be:	2b08      	cmp	r3, #8
 80077c0:	d104      	bne.n	80077cc <create_name+0x2fc>
 80077c2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80077cc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80077d0:	f003 030c 	and.w	r3, r3, #12
 80077d4:	2b0c      	cmp	r3, #12
 80077d6:	d005      	beq.n	80077e4 <create_name+0x314>
 80077d8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80077dc:	f003 0303 	and.w	r3, r3, #3
 80077e0:	2b03      	cmp	r3, #3
 80077e2:	d105      	bne.n	80077f0 <create_name+0x320>
 80077e4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077e8:	f043 0302 	orr.w	r3, r3, #2
 80077ec:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80077f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80077f4:	f003 0302 	and.w	r3, r3, #2
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d117      	bne.n	800782c <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 80077fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007800:	f003 0303 	and.w	r3, r3, #3
 8007804:	2b01      	cmp	r3, #1
 8007806:	d105      	bne.n	8007814 <create_name+0x344>
 8007808:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800780c:	f043 0310 	orr.w	r3, r3, #16
 8007810:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007814:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007818:	f003 030c 	and.w	r3, r3, #12
 800781c:	2b04      	cmp	r3, #4
 800781e:	d105      	bne.n	800782c <create_name+0x35c>
 8007820:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007824:	f043 0308 	orr.w	r3, r3, #8
 8007828:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8007832:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

	return FR_OK;
 8007836:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 8007838:	4618      	mov	r0, r3
 800783a:	3728      	adds	r7, #40	@ 0x28
 800783c:	46bd      	mov	sp, r7
 800783e:	bd80      	pop	{r7, pc}

08007840 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
 8007848:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800784e:	693b      	ldr	r3, [r7, #16]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007854:	e002      	b.n	800785c <follow_path+0x1c>
 8007856:	683b      	ldr	r3, [r7, #0]
 8007858:	3301      	adds	r3, #1
 800785a:	603b      	str	r3, [r7, #0]
 800785c:	683b      	ldr	r3, [r7, #0]
 800785e:	781b      	ldrb	r3, [r3, #0]
 8007860:	2b2f      	cmp	r3, #47	@ 0x2f
 8007862:	d0f8      	beq.n	8007856 <follow_path+0x16>
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	781b      	ldrb	r3, [r3, #0]
 8007868:	2b5c      	cmp	r3, #92	@ 0x5c
 800786a:	d0f4      	beq.n	8007856 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	2200      	movs	r2, #0
 8007870:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	2b1f      	cmp	r3, #31
 8007878:	d80a      	bhi.n	8007890 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	2280      	movs	r2, #128	@ 0x80
 800787e:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
		res = dir_sdi(dp, 0);
 8007882:	2100      	movs	r1, #0
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7ff f8fe 	bl	8006a86 <dir_sdi>
 800788a:	4603      	mov	r3, r0
 800788c:	75fb      	strb	r3, [r7, #23]
 800788e:	e048      	b.n	8007922 <follow_path+0xe2>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007890:	463b      	mov	r3, r7
 8007892:	4619      	mov	r1, r3
 8007894:	6878      	ldr	r0, [r7, #4]
 8007896:	f7ff fe1b 	bl	80074d0 <create_name>
 800789a:	4603      	mov	r3, r0
 800789c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800789e:	7dfb      	ldrb	r3, [r7, #23]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d139      	bne.n	8007918 <follow_path+0xd8>
			res = dir_find(dp);				/* Find an object with the segment name */
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f7ff fc5a 	bl	800715e <dir_find>
 80078aa:	4603      	mov	r3, r0
 80078ac:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80078b4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80078b6:	7dfb      	ldrb	r3, [r7, #23]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d00a      	beq.n	80078d2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80078bc:	7dfb      	ldrb	r3, [r7, #23]
 80078be:	2b04      	cmp	r3, #4
 80078c0:	d12c      	bne.n	800791c <follow_path+0xdc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80078c2:	7afb      	ldrb	r3, [r7, #11]
 80078c4:	f003 0304 	and.w	r3, r3, #4
 80078c8:	2b00      	cmp	r3, #0
 80078ca:	d127      	bne.n	800791c <follow_path+0xdc>
 80078cc:	2305      	movs	r3, #5
 80078ce:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80078d0:	e024      	b.n	800791c <follow_path+0xdc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80078d2:	7afb      	ldrb	r3, [r7, #11]
 80078d4:	f003 0304 	and.w	r3, r3, #4
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d121      	bne.n	8007920 <follow_path+0xe0>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	799b      	ldrb	r3, [r3, #6]
 80078e0:	f003 0310 	and.w	r3, r3, #16
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d102      	bne.n	80078ee <follow_path+0xae>
				res = FR_NO_PATH; break;
 80078e8:	2305      	movs	r3, #5
 80078ea:	75fb      	strb	r3, [r7, #23]
 80078ec:	e019      	b.n	8007922 <follow_path+0xe2>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	68fa      	ldr	r2, [r7, #12]
 80078fa:	8992      	ldrh	r2, [r2, #12]
 80078fc:	fbb3 f0f2 	udiv	r0, r3, r2
 8007900:	fb00 f202 	mul.w	r2, r0, r2
 8007904:	1a9b      	subs	r3, r3, r2
 8007906:	440b      	add	r3, r1
 8007908:	4619      	mov	r1, r3
 800790a:	68f8      	ldr	r0, [r7, #12]
 800790c:	f7ff fa61 	bl	8006dd2 <ld_clust>
 8007910:	4602      	mov	r2, r0
 8007912:	693b      	ldr	r3, [r7, #16]
 8007914:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8007916:	e7bb      	b.n	8007890 <follow_path+0x50>
			if (res != FR_OK) break;
 8007918:	bf00      	nop
 800791a:	e002      	b.n	8007922 <follow_path+0xe2>
				break;
 800791c:	bf00      	nop
 800791e:	e000      	b.n	8007922 <follow_path+0xe2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007920:	bf00      	nop
			}
		}
	}

	return res;
 8007922:	7dfb      	ldrb	r3, [r7, #23]
}
 8007924:	4618      	mov	r0, r3
 8007926:	3718      	adds	r7, #24
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800792c:	b480      	push	{r7}
 800792e:	b087      	sub	sp, #28
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8007934:	f04f 33ff 	mov.w	r3, #4294967295
 8007938:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	2b00      	cmp	r3, #0
 8007940:	d031      	beq.n	80079a6 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	617b      	str	r3, [r7, #20]
 8007948:	e002      	b.n	8007950 <get_ldnumber+0x24>
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	3301      	adds	r3, #1
 800794e:	617b      	str	r3, [r7, #20]
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	2b1f      	cmp	r3, #31
 8007956:	d903      	bls.n	8007960 <get_ldnumber+0x34>
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	781b      	ldrb	r3, [r3, #0]
 800795c:	2b3a      	cmp	r3, #58	@ 0x3a
 800795e:	d1f4      	bne.n	800794a <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007960:	697b      	ldr	r3, [r7, #20]
 8007962:	781b      	ldrb	r3, [r3, #0]
 8007964:	2b3a      	cmp	r3, #58	@ 0x3a
 8007966:	d11c      	bne.n	80079a2 <get_ldnumber+0x76>
			tp = *path;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	1c5a      	adds	r2, r3, #1
 8007972:	60fa      	str	r2, [r7, #12]
 8007974:	781b      	ldrb	r3, [r3, #0]
 8007976:	3b30      	subs	r3, #48	@ 0x30
 8007978:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	2b09      	cmp	r3, #9
 800797e:	d80e      	bhi.n	800799e <get_ldnumber+0x72>
 8007980:	68fa      	ldr	r2, [r7, #12]
 8007982:	697b      	ldr	r3, [r7, #20]
 8007984:	429a      	cmp	r2, r3
 8007986:	d10a      	bne.n	800799e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d107      	bne.n	800799e <get_ldnumber+0x72>
					vol = (int)i;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007992:	697b      	ldr	r3, [r7, #20]
 8007994:	3301      	adds	r3, #1
 8007996:	617b      	str	r3, [r7, #20]
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	697a      	ldr	r2, [r7, #20]
 800799c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800799e:	693b      	ldr	r3, [r7, #16]
 80079a0:	e002      	b.n	80079a8 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80079a2:	2300      	movs	r3, #0
 80079a4:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80079a6:	693b      	ldr	r3, [r7, #16]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	371c      	adds	r7, #28
 80079ac:	46bd      	mov	sp, r7
 80079ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079b2:	4770      	bx	lr

080079b4 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
 80079bc:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	2200      	movs	r2, #0
 80079c2:	70da      	strb	r2, [r3, #3]
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	f04f 32ff 	mov.w	r2, #4294967295
 80079ca:	635a      	str	r2, [r3, #52]	@ 0x34
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80079cc:	6839      	ldr	r1, [r7, #0]
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f7fe fc7a 	bl	80062c8 <move_window>
 80079d4:	4603      	mov	r3, r0
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d001      	beq.n	80079de <check_fs+0x2a>
 80079da:	2304      	movs	r3, #4
 80079dc:	e038      	b.n	8007a50 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	3338      	adds	r3, #56	@ 0x38
 80079e2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7fe f9be 	bl	8005d68 <ld_word>
 80079ec:	4603      	mov	r3, r0
 80079ee:	461a      	mov	r2, r3
 80079f0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 80079f4:	429a      	cmp	r2, r3
 80079f6:	d001      	beq.n	80079fc <check_fs+0x48>
 80079f8:	2303      	movs	r3, #3
 80079fa:	e029      	b.n	8007a50 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a02:	2be9      	cmp	r3, #233	@ 0xe9
 8007a04:	d009      	beq.n	8007a1a <check_fs+0x66>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8007a0c:	2beb      	cmp	r3, #235	@ 0xeb
 8007a0e:	d11e      	bne.n	8007a4e <check_fs+0x9a>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8007a16:	2b90      	cmp	r3, #144	@ 0x90
 8007a18:	d119      	bne.n	8007a4e <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	3338      	adds	r3, #56	@ 0x38
 8007a1e:	3336      	adds	r3, #54	@ 0x36
 8007a20:	4618      	mov	r0, r3
 8007a22:	f7fe f9b9 	bl	8005d98 <ld_dword>
 8007a26:	4603      	mov	r3, r0
 8007a28:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007a2c:	4a0a      	ldr	r2, [pc, #40]	@ (8007a58 <check_fs+0xa4>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d101      	bne.n	8007a36 <check_fs+0x82>
 8007a32:	2300      	movs	r3, #0
 8007a34:	e00c      	b.n	8007a50 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	3338      	adds	r3, #56	@ 0x38
 8007a3a:	3352      	adds	r3, #82	@ 0x52
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	f7fe f9ab 	bl	8005d98 <ld_dword>
 8007a42:	4603      	mov	r3, r0
 8007a44:	4a05      	ldr	r2, [pc, #20]	@ (8007a5c <check_fs+0xa8>)
 8007a46:	4293      	cmp	r3, r2
 8007a48:	d101      	bne.n	8007a4e <check_fs+0x9a>
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	e000      	b.n	8007a50 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007a4e:	2302      	movs	r3, #2
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3708      	adds	r7, #8
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	00544146 	.word	0x00544146
 8007a5c:	33544146 	.word	0x33544146

08007a60 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b096      	sub	sp, #88	@ 0x58
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	2200      	movs	r2, #0
 8007a72:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8007a74:	68f8      	ldr	r0, [r7, #12]
 8007a76:	f7ff ff59 	bl	800792c <get_ldnumber>
 8007a7a:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007a7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	da01      	bge.n	8007a86 <find_volume+0x26>
 8007a82:	230b      	movs	r3, #11
 8007a84:	e265      	b.n	8007f52 <find_volume+0x4f2>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8007a86:	4a9f      	ldr	r2, [pc, #636]	@ (8007d04 <find_volume+0x2a4>)
 8007a88:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007a8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d101      	bne.n	8007a9a <find_volume+0x3a>
 8007a96:	230c      	movs	r3, #12
 8007a98:	e25b      	b.n	8007f52 <find_volume+0x4f2>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007a9e:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8007aa0:	79fb      	ldrb	r3, [r7, #7]
 8007aa2:	f023 0301 	bic.w	r3, r3, #1
 8007aa6:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8007aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d01a      	beq.n	8007ae6 <find_volume+0x86>
		stat = disk_status(fs->drv);
 8007ab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ab2:	785b      	ldrb	r3, [r3, #1]
 8007ab4:	4618      	mov	r0, r3
 8007ab6:	f7fe f8b7 	bl	8005c28 <disk_status>
 8007aba:	4603      	mov	r3, r0
 8007abc:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8007ac0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d10c      	bne.n	8007ae6 <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8007acc:	79fb      	ldrb	r3, [r7, #7]
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d007      	beq.n	8007ae2 <find_volume+0x82>
 8007ad2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007ad6:	f003 0304 	and.w	r3, r3, #4
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d001      	beq.n	8007ae2 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8007ade:	230a      	movs	r3, #10
 8007ae0:	e237      	b.n	8007f52 <find_volume+0x4f2>
			}
			return FR_OK;				/* The file system object is valid */
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	e235      	b.n	8007f52 <find_volume+0x4f2>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae8:	2200      	movs	r2, #0
 8007aea:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8007aec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007aee:	b2da      	uxtb	r2, r3
 8007af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af2:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8007af4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af6:	785b      	ldrb	r3, [r3, #1]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fe f8af 	bl	8005c5c <disk_initialize>
 8007afe:	4603      	mov	r3, r0
 8007b00:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8007b04:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007b08:	f003 0301 	and.w	r3, r3, #1
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007b10:	2303      	movs	r3, #3
 8007b12:	e21e      	b.n	8007f52 <find_volume+0x4f2>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8007b14:	79fb      	ldrb	r3, [r7, #7]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d007      	beq.n	8007b2a <find_volume+0xca>
 8007b1a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8007b1e:	f003 0304 	and.w	r3, r3, #4
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 8007b26:	230a      	movs	r3, #10
 8007b28:	e213      	b.n	8007f52 <find_volume+0x4f2>
	}
#if _MAX_SS != _MIN_SS					/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
 8007b2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b2c:	7858      	ldrb	r0, [r3, #1]
 8007b2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b30:	330c      	adds	r3, #12
 8007b32:	461a      	mov	r2, r3
 8007b34:	2102      	movs	r1, #2
 8007b36:	f7fe f8f9 	bl	8005d2c <disk_ioctl>
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d001      	beq.n	8007b44 <find_volume+0xe4>
 8007b40:	2301      	movs	r3, #1
 8007b42:	e206      	b.n	8007f52 <find_volume+0x4f2>
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
 8007b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b46:	899b      	ldrh	r3, [r3, #12]
 8007b48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b4c:	d80d      	bhi.n	8007b6a <find_volume+0x10a>
 8007b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b50:	899b      	ldrh	r3, [r3, #12]
 8007b52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007b56:	d308      	bcc.n	8007b6a <find_volume+0x10a>
 8007b58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b5a:	899b      	ldrh	r3, [r3, #12]
 8007b5c:	461a      	mov	r2, r3
 8007b5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b60:	899b      	ldrh	r3, [r3, #12]
 8007b62:	3b01      	subs	r3, #1
 8007b64:	4013      	ands	r3, r2
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d001      	beq.n	8007b6e <find_volume+0x10e>
 8007b6a:	2301      	movs	r3, #1
 8007b6c:	e1f1      	b.n	8007f52 <find_volume+0x4f2>
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007b72:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007b74:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007b76:	f7ff ff1d 	bl	80079b4 <check_fs>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007b80:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007b84:	2b02      	cmp	r3, #2
 8007b86:	d149      	bne.n	8007c1c <find_volume+0x1bc>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007b88:	2300      	movs	r3, #0
 8007b8a:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b8c:	e01e      	b.n	8007bcc <find_volume+0x16c>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b90:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8007b94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007b96:	011b      	lsls	r3, r3, #4
 8007b98:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8007b9c:	4413      	add	r3, r2
 8007b9e:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ba2:	3304      	adds	r3, #4
 8007ba4:	781b      	ldrb	r3, [r3, #0]
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d006      	beq.n	8007bb8 <find_volume+0x158>
 8007baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bac:	3308      	adds	r3, #8
 8007bae:	4618      	mov	r0, r3
 8007bb0:	f7fe f8f2 	bl	8005d98 <ld_dword>
 8007bb4:	4602      	mov	r2, r0
 8007bb6:	e000      	b.n	8007bba <find_volume+0x15a>
 8007bb8:	2200      	movs	r2, #0
 8007bba:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bbc:	009b      	lsls	r3, r3, #2
 8007bbe:	3358      	adds	r3, #88	@ 0x58
 8007bc0:	443b      	add	r3, r7
 8007bc2:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8007bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bc8:	3301      	adds	r3, #1
 8007bca:	643b      	str	r3, [r7, #64]	@ 0x40
 8007bcc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bce:	2b03      	cmp	r3, #3
 8007bd0:	d9dd      	bls.n	8007b8e <find_volume+0x12e>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8007bd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d002      	beq.n	8007be2 <find_volume+0x182>
 8007bdc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007bde:	3b01      	subs	r3, #1
 8007be0:	643b      	str	r3, [r7, #64]	@ 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8007be2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007be4:	009b      	lsls	r3, r3, #2
 8007be6:	3358      	adds	r3, #88	@ 0x58
 8007be8:	443b      	add	r3, r7
 8007bea:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8007bee:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8007bf0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007bf2:	2b00      	cmp	r3, #0
 8007bf4:	d005      	beq.n	8007c02 <find_volume+0x1a2>
 8007bf6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007bf8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007bfa:	f7ff fedb 	bl	80079b4 <check_fs>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	e000      	b.n	8007c04 <find_volume+0x1a4>
 8007c02:	2303      	movs	r3, #3
 8007c04:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8007c08:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	d905      	bls.n	8007c1c <find_volume+0x1bc>
 8007c10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c12:	3301      	adds	r3, #1
 8007c14:	643b      	str	r3, [r7, #64]	@ 0x40
 8007c16:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007c18:	2b03      	cmp	r3, #3
 8007c1a:	d9e2      	bls.n	8007be2 <find_volume+0x182>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8007c1c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007c20:	2b04      	cmp	r3, #4
 8007c22:	d101      	bne.n	8007c28 <find_volume+0x1c8>
 8007c24:	2301      	movs	r3, #1
 8007c26:	e194      	b.n	8007f52 <find_volume+0x4f2>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8007c28:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007c2c:	2b01      	cmp	r3, #1
 8007c2e:	d901      	bls.n	8007c34 <find_volume+0x1d4>
 8007c30:	230d      	movs	r3, #13
 8007c32:	e18e      	b.n	8007f52 <find_volume+0x4f2>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8007c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c36:	3338      	adds	r3, #56	@ 0x38
 8007c38:	330b      	adds	r3, #11
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	f7fe f894 	bl	8005d68 <ld_word>
 8007c40:	4603      	mov	r3, r0
 8007c42:	461a      	mov	r2, r3
 8007c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c46:	899b      	ldrh	r3, [r3, #12]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d001      	beq.n	8007c50 <find_volume+0x1f0>
 8007c4c:	230d      	movs	r3, #13
 8007c4e:	e180      	b.n	8007f52 <find_volume+0x4f2>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007c50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c52:	3338      	adds	r3, #56	@ 0x38
 8007c54:	3316      	adds	r3, #22
 8007c56:	4618      	mov	r0, r3
 8007c58:	f7fe f886 	bl	8005d68 <ld_word>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	64fb      	str	r3, [r7, #76]	@ 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007c60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d106      	bne.n	8007c74 <find_volume+0x214>
 8007c66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c68:	3338      	adds	r3, #56	@ 0x38
 8007c6a:	3324      	adds	r3, #36	@ 0x24
 8007c6c:	4618      	mov	r0, r3
 8007c6e:	f7fe f893 	bl	8005d98 <ld_dword>
 8007c72:	64f8      	str	r0, [r7, #76]	@ 0x4c
		fs->fsize = fasize;
 8007c74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c76:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007c78:	621a      	str	r2, [r3, #32]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8007c7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c7c:	f893 2048 	ldrb.w	r2, [r3, #72]	@ 0x48
 8007c80:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c82:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c86:	789b      	ldrb	r3, [r3, #2]
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d005      	beq.n	8007c98 <find_volume+0x238>
 8007c8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c8e:	789b      	ldrb	r3, [r3, #2]
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d001      	beq.n	8007c98 <find_volume+0x238>
 8007c94:	230d      	movs	r3, #13
 8007c96:	e15c      	b.n	8007f52 <find_volume+0x4f2>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8007c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9a:	789b      	ldrb	r3, [r3, #2]
 8007c9c:	461a      	mov	r2, r3
 8007c9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ca0:	fb02 f303 	mul.w	r3, r2, r3
 8007ca4:	64fb      	str	r3, [r7, #76]	@ 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8007ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007cac:	461a      	mov	r2, r3
 8007cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007cb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cb4:	895b      	ldrh	r3, [r3, #10]
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d008      	beq.n	8007ccc <find_volume+0x26c>
 8007cba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cbc:	895b      	ldrh	r3, [r3, #10]
 8007cbe:	461a      	mov	r2, r3
 8007cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc2:	895b      	ldrh	r3, [r3, #10]
 8007cc4:	3b01      	subs	r3, #1
 8007cc6:	4013      	ands	r3, r2
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d001      	beq.n	8007cd0 <find_volume+0x270>
 8007ccc:	230d      	movs	r3, #13
 8007cce:	e140      	b.n	8007f52 <find_volume+0x4f2>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007cd0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd2:	3338      	adds	r3, #56	@ 0x38
 8007cd4:	3311      	adds	r3, #17
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f7fe f846 	bl	8005d68 <ld_word>
 8007cdc:	4603      	mov	r3, r0
 8007cde:	461a      	mov	r2, r3
 8007ce0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8007ce4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ce6:	891b      	ldrh	r3, [r3, #8]
 8007ce8:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007cea:	8992      	ldrh	r2, [r2, #12]
 8007cec:	0952      	lsrs	r2, r2, #5
 8007cee:	b292      	uxth	r2, r2
 8007cf0:	fbb3 f1f2 	udiv	r1, r3, r2
 8007cf4:	fb01 f202 	mul.w	r2, r1, r2
 8007cf8:	1a9b      	subs	r3, r3, r2
 8007cfa:	b29b      	uxth	r3, r3
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d003      	beq.n	8007d08 <find_volume+0x2a8>
 8007d00:	230d      	movs	r3, #13
 8007d02:	e126      	b.n	8007f52 <find_volume+0x4f2>
 8007d04:	200022dc 	.word	0x200022dc

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8007d08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d0a:	3338      	adds	r3, #56	@ 0x38
 8007d0c:	3313      	adds	r3, #19
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fe f82a 	bl	8005d68 <ld_word>
 8007d14:	4603      	mov	r3, r0
 8007d16:	64bb      	str	r3, [r7, #72]	@ 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8007d18:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d106      	bne.n	8007d2c <find_volume+0x2cc>
 8007d1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d20:	3338      	adds	r3, #56	@ 0x38
 8007d22:	3320      	adds	r3, #32
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fe f837 	bl	8005d98 <ld_dword>
 8007d2a:	64b8      	str	r0, [r7, #72]	@ 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8007d2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007d2e:	3338      	adds	r3, #56	@ 0x38
 8007d30:	330e      	adds	r3, #14
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fe f818 	bl	8005d68 <ld_word>
 8007d38:	4603      	mov	r3, r0
 8007d3a:	85fb      	strh	r3, [r7, #46]	@ 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8007d3c:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d101      	bne.n	8007d46 <find_volume+0x2e6>
 8007d42:	230d      	movs	r3, #13
 8007d44:	e105      	b.n	8007f52 <find_volume+0x4f2>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8007d46:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007d48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007d4a:	4413      	add	r3, r2
 8007d4c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d4e:	8911      	ldrh	r1, [r2, #8]
 8007d50:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d52:	8992      	ldrh	r2, [r2, #12]
 8007d54:	0952      	lsrs	r2, r2, #5
 8007d56:	b292      	uxth	r2, r2
 8007d58:	fbb1 f2f2 	udiv	r2, r1, r2
 8007d5c:	b292      	uxth	r2, r2
 8007d5e:	4413      	add	r3, r2
 8007d60:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8007d62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d201      	bcs.n	8007d6e <find_volume+0x30e>
 8007d6a:	230d      	movs	r3, #13
 8007d6c:	e0f1      	b.n	8007f52 <find_volume+0x4f2>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007d6e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d72:	1ad3      	subs	r3, r2, r3
 8007d74:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007d76:	8952      	ldrh	r2, [r2, #10]
 8007d78:	fbb3 f3f2 	udiv	r3, r3, r2
 8007d7c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d101      	bne.n	8007d88 <find_volume+0x328>
 8007d84:	230d      	movs	r3, #13
 8007d86:	e0e4      	b.n	8007f52 <find_volume+0x4f2>
		fmt = FS_FAT32;
 8007d88:	2303      	movs	r3, #3
 8007d8a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8007d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d90:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d802      	bhi.n	8007d9e <find_volume+0x33e>
 8007d98:	2302      	movs	r3, #2
 8007d9a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8007d9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007da0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d802      	bhi.n	8007dae <find_volume+0x34e>
 8007da8:	2301      	movs	r3, #1
 8007daa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8007dae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007db0:	1c9a      	adds	r2, r3, #2
 8007db2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db4:	61da      	str	r2, [r3, #28]
		fs->volbase = bsect;							/* Volume start sector */
 8007db6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007db8:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007dba:	625a      	str	r2, [r3, #36]	@ 0x24
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007dbc:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8007dbe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007dc0:	441a      	add	r2, r3
 8007dc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dc4:	629a      	str	r2, [r3, #40]	@ 0x28
		fs->database = bsect + sysect;					/* Data start sector */
 8007dc6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007dc8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dca:	441a      	add	r2, r3
 8007dcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dce:	631a      	str	r2, [r3, #48]	@ 0x30
		if (fmt == FS_FAT32) {
 8007dd0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007dd4:	2b03      	cmp	r3, #3
 8007dd6:	d11e      	bne.n	8007e16 <find_volume+0x3b6>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007dd8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dda:	3338      	adds	r3, #56	@ 0x38
 8007ddc:	332a      	adds	r3, #42	@ 0x2a
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fd ffc2 	bl	8005d68 <ld_word>
 8007de4:	4603      	mov	r3, r0
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <find_volume+0x38e>
 8007dea:	230d      	movs	r3, #13
 8007dec:	e0b1      	b.n	8007f52 <find_volume+0x4f2>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8007dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007df0:	891b      	ldrh	r3, [r3, #8]
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d001      	beq.n	8007dfa <find_volume+0x39a>
 8007df6:	230d      	movs	r3, #13
 8007df8:	e0ab      	b.n	8007f52 <find_volume+0x4f2>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8007dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007dfc:	3338      	adds	r3, #56	@ 0x38
 8007dfe:	332c      	adds	r3, #44	@ 0x2c
 8007e00:	4618      	mov	r0, r3
 8007e02:	f7fd ffc9 	bl	8005d98 <ld_dword>
 8007e06:	4602      	mov	r2, r0
 8007e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8007e0c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e0e:	69db      	ldr	r3, [r3, #28]
 8007e10:	009b      	lsls	r3, r3, #2
 8007e12:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e14:	e01f      	b.n	8007e56 <find_volume+0x3f6>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8007e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e18:	891b      	ldrh	r3, [r3, #8]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d101      	bne.n	8007e22 <find_volume+0x3c2>
 8007e1e:	230d      	movs	r3, #13
 8007e20:	e097      	b.n	8007f52 <find_volume+0x4f2>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8007e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e24:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007e26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e28:	441a      	add	r2, r3
 8007e2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e2c:	62da      	str	r2, [r3, #44]	@ 0x2c
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007e2e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d103      	bne.n	8007e3e <find_volume+0x3de>
 8007e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e38:	69db      	ldr	r3, [r3, #28]
 8007e3a:	005b      	lsls	r3, r3, #1
 8007e3c:	e00a      	b.n	8007e54 <find_volume+0x3f4>
 8007e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e40:	69da      	ldr	r2, [r3, #28]
 8007e42:	4613      	mov	r3, r2
 8007e44:	005b      	lsls	r3, r3, #1
 8007e46:	4413      	add	r3, r2
 8007e48:	085a      	lsrs	r2, r3, #1
 8007e4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e4c:	69db      	ldr	r3, [r3, #28]
 8007e4e:	f003 0301 	and.w	r3, r3, #1
 8007e52:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007e54:	647b      	str	r3, [r7, #68]	@ 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007e56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e58:	6a1a      	ldr	r2, [r3, #32]
 8007e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e5c:	899b      	ldrh	r3, [r3, #12]
 8007e5e:	4619      	mov	r1, r3
 8007e60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007e62:	440b      	add	r3, r1
 8007e64:	3b01      	subs	r3, #1
 8007e66:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8007e68:	8989      	ldrh	r1, [r1, #12]
 8007e6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007e6e:	429a      	cmp	r2, r3
 8007e70:	d201      	bcs.n	8007e76 <find_volume+0x416>
 8007e72:	230d      	movs	r3, #13
 8007e74:	e06d      	b.n	8007f52 <find_volume+0x4f2>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e78:	f04f 32ff 	mov.w	r2, #4294967295
 8007e7c:	619a      	str	r2, [r3, #24]
 8007e7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e80:	699a      	ldr	r2, [r3, #24]
 8007e82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e84:	615a      	str	r2, [r3, #20]
		fs->fsi_flag = 0x80;
 8007e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e88:	2280      	movs	r2, #128	@ 0x80
 8007e8a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8007e8c:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007e90:	2b03      	cmp	r3, #3
 8007e92:	d149      	bne.n	8007f28 <find_volume+0x4c8>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007e96:	3338      	adds	r3, #56	@ 0x38
 8007e98:	3330      	adds	r3, #48	@ 0x30
 8007e9a:	4618      	mov	r0, r3
 8007e9c:	f7fd ff64 	bl	8005d68 <ld_word>
 8007ea0:	4603      	mov	r3, r0
 8007ea2:	2b01      	cmp	r3, #1
 8007ea4:	d140      	bne.n	8007f28 <find_volume+0x4c8>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007ea6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ea8:	3301      	adds	r3, #1
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007eae:	f7fe fa0b 	bl	80062c8 <move_window>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d137      	bne.n	8007f28 <find_volume+0x4c8>
		{
			fs->fsi_flag = 0;
 8007eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eba:	2200      	movs	r2, #0
 8007ebc:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8007ebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ec0:	3338      	adds	r3, #56	@ 0x38
 8007ec2:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	f7fd ff4e 	bl	8005d68 <ld_word>
 8007ecc:	4603      	mov	r3, r0
 8007ece:	461a      	mov	r2, r3
 8007ed0:	f64a 2355 	movw	r3, #43605	@ 0xaa55
 8007ed4:	429a      	cmp	r2, r3
 8007ed6:	d127      	bne.n	8007f28 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eda:	3338      	adds	r3, #56	@ 0x38
 8007edc:	4618      	mov	r0, r3
 8007ede:	f7fd ff5b 	bl	8005d98 <ld_dword>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	4a1d      	ldr	r2, [pc, #116]	@ (8007f5c <find_volume+0x4fc>)
 8007ee6:	4293      	cmp	r3, r2
 8007ee8:	d11e      	bne.n	8007f28 <find_volume+0x4c8>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8007eea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007eec:	3338      	adds	r3, #56	@ 0x38
 8007eee:	f503 73f2 	add.w	r3, r3, #484	@ 0x1e4
 8007ef2:	4618      	mov	r0, r3
 8007ef4:	f7fd ff50 	bl	8005d98 <ld_dword>
 8007ef8:	4603      	mov	r3, r0
 8007efa:	4a19      	ldr	r2, [pc, #100]	@ (8007f60 <find_volume+0x500>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d113      	bne.n	8007f28 <find_volume+0x4c8>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8007f00:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f02:	3338      	adds	r3, #56	@ 0x38
 8007f04:	f503 73f4 	add.w	r3, r3, #488	@ 0x1e8
 8007f08:	4618      	mov	r0, r3
 8007f0a:	f7fd ff45 	bl	8005d98 <ld_dword>
 8007f0e:	4602      	mov	r2, r0
 8007f10:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f12:	619a      	str	r2, [r3, #24]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8007f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f16:	3338      	adds	r3, #56	@ 0x38
 8007f18:	f503 73f6 	add.w	r3, r3, #492	@ 0x1ec
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f7fd ff3b 	bl	8005d98 <ld_dword>
 8007f22:	4602      	mov	r2, r0
 8007f24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f26:	615a      	str	r2, [r3, #20]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8007f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f2a:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 8007f2e:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8007f30:	4b0c      	ldr	r3, [pc, #48]	@ (8007f64 <find_volume+0x504>)
 8007f32:	881b      	ldrh	r3, [r3, #0]
 8007f34:	3301      	adds	r3, #1
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	4b0a      	ldr	r3, [pc, #40]	@ (8007f64 <find_volume+0x504>)
 8007f3a:	801a      	strh	r2, [r3, #0]
 8007f3c:	4b09      	ldr	r3, [pc, #36]	@ (8007f64 <find_volume+0x504>)
 8007f3e:	881a      	ldrh	r2, [r3, #0]
 8007f40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f42:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8007f44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007f46:	4a08      	ldr	r2, [pc, #32]	@ (8007f68 <find_volume+0x508>)
 8007f48:	611a      	str	r2, [r3, #16]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8007f4a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8007f4c:	f7fe f954 	bl	80061f8 <clear_lock>
#endif
	return FR_OK;
 8007f50:	2300      	movs	r3, #0
}
 8007f52:	4618      	mov	r0, r3
 8007f54:	3758      	adds	r7, #88	@ 0x58
 8007f56:	46bd      	mov	sp, r7
 8007f58:	bd80      	pop	{r7, pc}
 8007f5a:	bf00      	nop
 8007f5c:	41615252 	.word	0x41615252
 8007f60:	61417272 	.word	0x61417272
 8007f64:	200022e0 	.word	0x200022e0
 8007f68:	20002304 	.word	0x20002304

08007f6c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8007f6c:	b580      	push	{r7, lr}
 8007f6e:	b084      	sub	sp, #16
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007f76:	2309      	movs	r3, #9
 8007f78:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d01c      	beq.n	8007fba <validate+0x4e>
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d018      	beq.n	8007fba <validate+0x4e>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	781b      	ldrb	r3, [r3, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d013      	beq.n	8007fba <validate+0x4e>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	889a      	ldrh	r2, [r3, #4]
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	88db      	ldrh	r3, [r3, #6]
 8007f9c:	429a      	cmp	r2, r3
 8007f9e:	d10c      	bne.n	8007fba <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	785b      	ldrb	r3, [r3, #1]
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fd fe3e 	bl	8005c28 <disk_status>
 8007fac:	4603      	mov	r3, r0
 8007fae:	f003 0301 	and.w	r3, r3, #1
 8007fb2:	2b00      	cmp	r3, #0
 8007fb4:	d101      	bne.n	8007fba <validate+0x4e>
			res = FR_OK;
 8007fb6:	2300      	movs	r3, #0
 8007fb8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8007fba:	7bfb      	ldrb	r3, [r7, #15]
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d102      	bne.n	8007fc6 <validate+0x5a>
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	e000      	b.n	8007fc8 <validate+0x5c>
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	683a      	ldr	r2, [r7, #0]
 8007fca:	6013      	str	r3, [r2, #0]
	return res;
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fce:	4618      	mov	r0, r3
 8007fd0:	3710      	adds	r7, #16
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
	...

08007fd8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b088      	sub	sp, #32
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	60f8      	str	r0, [r7, #12]
 8007fe0:	60b9      	str	r1, [r7, #8]
 8007fe2:	4613      	mov	r3, r2
 8007fe4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007fe6:	68bb      	ldr	r3, [r7, #8]
 8007fe8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8007fea:	f107 0310 	add.w	r3, r7, #16
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7ff fc9c 	bl	800792c <get_ldnumber>
 8007ff4:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007ff6:	69fb      	ldr	r3, [r7, #28]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	da01      	bge.n	8008000 <f_mount+0x28>
 8007ffc:	230b      	movs	r3, #11
 8007ffe:	e02b      	b.n	8008058 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8008000:	4a17      	ldr	r2, [pc, #92]	@ (8008060 <f_mount+0x88>)
 8008002:	69fb      	ldr	r3, [r7, #28]
 8008004:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008008:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800800a:	69bb      	ldr	r3, [r7, #24]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d005      	beq.n	800801c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8008010:	69b8      	ldr	r0, [r7, #24]
 8008012:	f7fe f8f1 	bl	80061f8 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8008016:	69bb      	ldr	r3, [r7, #24]
 8008018:	2200      	movs	r2, #0
 800801a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d002      	beq.n	8008028 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	2200      	movs	r2, #0
 8008026:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8008028:	68fa      	ldr	r2, [r7, #12]
 800802a:	490d      	ldr	r1, [pc, #52]	@ (8008060 <f_mount+0x88>)
 800802c:	69fb      	ldr	r3, [r7, #28]
 800802e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	d002      	beq.n	800803e <f_mount+0x66>
 8008038:	79fb      	ldrb	r3, [r7, #7]
 800803a:	2b01      	cmp	r3, #1
 800803c:	d001      	beq.n	8008042 <f_mount+0x6a>
 800803e:	2300      	movs	r3, #0
 8008040:	e00a      	b.n	8008058 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8008042:	f107 010c 	add.w	r1, r7, #12
 8008046:	f107 0308 	add.w	r3, r7, #8
 800804a:	2200      	movs	r2, #0
 800804c:	4618      	mov	r0, r3
 800804e:	f7ff fd07 	bl	8007a60 <find_volume>
 8008052:	4603      	mov	r3, r0
 8008054:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8008056:	7dfb      	ldrb	r3, [r7, #23]
}
 8008058:	4618      	mov	r0, r3
 800805a:	3720      	adds	r7, #32
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	200022dc 	.word	0x200022dc

08008064 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8008064:	b580      	push	{r7, lr}
 8008066:	b09a      	sub	sp, #104	@ 0x68
 8008068:	af00      	add	r7, sp, #0
 800806a:	60f8      	str	r0, [r7, #12]
 800806c:	60b9      	str	r1, [r7, #8]
 800806e:	4613      	mov	r3, r2
 8008070:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2b00      	cmp	r3, #0
 8008076:	d101      	bne.n	800807c <f_open+0x18>
 8008078:	2309      	movs	r3, #9
 800807a:	e1b7      	b.n	80083ec <f_open+0x388>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800807c:	79fb      	ldrb	r3, [r7, #7]
 800807e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008082:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8008084:	79fa      	ldrb	r2, [r7, #7]
 8008086:	f107 0114 	add.w	r1, r7, #20
 800808a:	f107 0308 	add.w	r3, r7, #8
 800808e:	4618      	mov	r0, r3
 8008090:	f7ff fce6 	bl	8007a60 <find_volume>
 8008094:	4603      	mov	r3, r0
 8008096:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
	if (res == FR_OK) {
 800809a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800809e:	2b00      	cmp	r3, #0
 80080a0:	f040 819b 	bne.w	80083da <f_open+0x376>
		dj.obj.fs = fs;
 80080a4:	697b      	ldr	r3, [r7, #20]
 80080a6:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80080a8:	68ba      	ldr	r2, [r7, #8]
 80080aa:	f107 0318 	add.w	r3, r7, #24
 80080ae:	4611      	mov	r1, r2
 80080b0:	4618      	mov	r0, r3
 80080b2:	f7ff fbc5 	bl	8007840 <follow_path>
 80080b6:	4603      	mov	r3, r0
 80080b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80080bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d118      	bne.n	80080f6 <f_open+0x92>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 80080c4:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80080c8:	b25b      	sxtb	r3, r3
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	da03      	bge.n	80080d6 <f_open+0x72>
				res = FR_INVALID_NAME;
 80080ce:	2306      	movs	r3, #6
 80080d0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80080d4:	e00f      	b.n	80080f6 <f_open+0x92>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80080d6:	79fb      	ldrb	r3, [r7, #7]
 80080d8:	2b01      	cmp	r3, #1
 80080da:	bf8c      	ite	hi
 80080dc:	2301      	movhi	r3, #1
 80080de:	2300      	movls	r3, #0
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	461a      	mov	r2, r3
 80080e4:	f107 0318 	add.w	r3, r7, #24
 80080e8:	4611      	mov	r1, r2
 80080ea:	4618      	mov	r0, r3
 80080ec:	f7fd ff3c 	bl	8005f68 <chk_lock>
 80080f0:	4603      	mov	r3, r0
 80080f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80080f6:	79fb      	ldrb	r3, [r7, #7]
 80080f8:	f003 031c 	and.w	r3, r3, #28
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d07f      	beq.n	8008200 <f_open+0x19c>
			if (res != FR_OK) {					/* No file, create new */
 8008100:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008104:	2b00      	cmp	r3, #0
 8008106:	d017      	beq.n	8008138 <f_open+0xd4>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8008108:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800810c:	2b04      	cmp	r3, #4
 800810e:	d10e      	bne.n	800812e <f_open+0xca>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8008110:	f7fd ff86 	bl	8006020 <enq_lock>
 8008114:	4603      	mov	r3, r0
 8008116:	2b00      	cmp	r3, #0
 8008118:	d006      	beq.n	8008128 <f_open+0xc4>
 800811a:	f107 0318 	add.w	r3, r7, #24
 800811e:	4618      	mov	r0, r3
 8008120:	f7ff f8de 	bl	80072e0 <dir_register>
 8008124:	4603      	mov	r3, r0
 8008126:	e000      	b.n	800812a <f_open+0xc6>
 8008128:	2312      	movs	r3, #18
 800812a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800812e:	79fb      	ldrb	r3, [r7, #7]
 8008130:	f043 0308 	orr.w	r3, r3, #8
 8008134:	71fb      	strb	r3, [r7, #7]
 8008136:	e010      	b.n	800815a <f_open+0xf6>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8008138:	7fbb      	ldrb	r3, [r7, #30]
 800813a:	f003 0311 	and.w	r3, r3, #17
 800813e:	2b00      	cmp	r3, #0
 8008140:	d003      	beq.n	800814a <f_open+0xe6>
					res = FR_DENIED;
 8008142:	2307      	movs	r3, #7
 8008144:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008148:	e007      	b.n	800815a <f_open+0xf6>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800814a:	79fb      	ldrb	r3, [r7, #7]
 800814c:	f003 0304 	and.w	r3, r3, #4
 8008150:	2b00      	cmp	r3, #0
 8008152:	d002      	beq.n	800815a <f_open+0xf6>
 8008154:	2308      	movs	r3, #8
 8008156:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800815a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800815e:	2b00      	cmp	r3, #0
 8008160:	d168      	bne.n	8008234 <f_open+0x1d0>
 8008162:	79fb      	ldrb	r3, [r7, #7]
 8008164:	f003 0308 	and.w	r3, r3, #8
 8008168:	2b00      	cmp	r3, #0
 800816a:	d063      	beq.n	8008234 <f_open+0x1d0>
				dw = GET_FATTIME();
 800816c:	f7fd fcfe 	bl	8005b6c <get_fattime>
 8008170:	65b8      	str	r0, [r7, #88]	@ 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8008172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008174:	330e      	adds	r3, #14
 8008176:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008178:	4618      	mov	r0, r3
 800817a:	f7fd fe4b 	bl	8005e14 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800817e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008180:	3316      	adds	r3, #22
 8008182:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008184:	4618      	mov	r0, r3
 8008186:	f7fd fe45 	bl	8005e14 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800818a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800818c:	330b      	adds	r3, #11
 800818e:	2220      	movs	r2, #32
 8008190:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008196:	4611      	mov	r1, r2
 8008198:	4618      	mov	r0, r3
 800819a:	f7fe fe1a 	bl	8006dd2 <ld_clust>
 800819e:	6578      	str	r0, [r7, #84]	@ 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80081a0:	697b      	ldr	r3, [r7, #20]
 80081a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80081a4:	2200      	movs	r2, #0
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fe fe32 	bl	8006e10 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80081ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80081ae:	331c      	adds	r3, #28
 80081b0:	2100      	movs	r1, #0
 80081b2:	4618      	mov	r0, r3
 80081b4:	f7fd fe2e 	bl	8005e14 <st_dword>
					fs->wflag = 1;
 80081b8:	697b      	ldr	r3, [r7, #20]
 80081ba:	2201      	movs	r2, #1
 80081bc:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 80081be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d037      	beq.n	8008234 <f_open+0x1d0>
						dw = fs->winsect;
 80081c4:	697b      	ldr	r3, [r7, #20]
 80081c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80081c8:	65bb      	str	r3, [r7, #88]	@ 0x58
						res = remove_chain(&dj.obj, cl, 0);
 80081ca:	f107 0318 	add.w	r3, r7, #24
 80081ce:	2200      	movs	r2, #0
 80081d0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7fe fb22 	bl	800681c <remove_chain>
 80081d8:	4603      	mov	r3, r0
 80081da:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
						if (res == FR_OK) {
 80081de:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d126      	bne.n	8008234 <f_open+0x1d0>
							res = move_window(fs, dw);
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80081ea:	4618      	mov	r0, r3
 80081ec:	f7fe f86c 	bl	80062c8 <move_window>
 80081f0:	4603      	mov	r3, r0
 80081f2:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80081f6:	697b      	ldr	r3, [r7, #20]
 80081f8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80081fa:	3a01      	subs	r2, #1
 80081fc:	615a      	str	r2, [r3, #20]
 80081fe:	e019      	b.n	8008234 <f_open+0x1d0>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8008200:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008204:	2b00      	cmp	r3, #0
 8008206:	d115      	bne.n	8008234 <f_open+0x1d0>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8008208:	7fbb      	ldrb	r3, [r7, #30]
 800820a:	f003 0310 	and.w	r3, r3, #16
 800820e:	2b00      	cmp	r3, #0
 8008210:	d003      	beq.n	800821a <f_open+0x1b6>
					res = FR_NO_FILE;
 8008212:	2304      	movs	r3, #4
 8008214:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8008218:	e00c      	b.n	8008234 <f_open+0x1d0>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800821a:	79fb      	ldrb	r3, [r7, #7]
 800821c:	f003 0302 	and.w	r3, r3, #2
 8008220:	2b00      	cmp	r3, #0
 8008222:	d007      	beq.n	8008234 <f_open+0x1d0>
 8008224:	7fbb      	ldrb	r3, [r7, #30]
 8008226:	f003 0301 	and.w	r3, r3, #1
 800822a:	2b00      	cmp	r3, #0
 800822c:	d002      	beq.n	8008234 <f_open+0x1d0>
						res = FR_DENIED;
 800822e:	2307      	movs	r3, #7
 8008230:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8008234:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008238:	2b00      	cmp	r3, #0
 800823a:	d126      	bne.n	800828a <f_open+0x226>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800823c:	79fb      	ldrb	r3, [r7, #7]
 800823e:	f003 0308 	and.w	r3, r3, #8
 8008242:	2b00      	cmp	r3, #0
 8008244:	d003      	beq.n	800824e <f_open+0x1ea>
				mode |= FA_MODIFIED;
 8008246:	79fb      	ldrb	r3, [r7, #7]
 8008248:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800824c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800824e:	697b      	ldr	r3, [r7, #20]
 8008250:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	625a      	str	r2, [r3, #36]	@ 0x24
			fp->dir_ptr = dj.dir;
 8008256:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	629a      	str	r2, [r3, #40]	@ 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800825c:	79fb      	ldrb	r3, [r7, #7]
 800825e:	2b01      	cmp	r3, #1
 8008260:	bf8c      	ite	hi
 8008262:	2301      	movhi	r3, #1
 8008264:	2300      	movls	r3, #0
 8008266:	b2db      	uxtb	r3, r3
 8008268:	461a      	mov	r2, r3
 800826a:	f107 0318 	add.w	r3, r7, #24
 800826e:	4611      	mov	r1, r2
 8008270:	4618      	mov	r0, r3
 8008272:	f7fd fef7 	bl	8006064 <inc_lock>
 8008276:	4602      	mov	r2, r0
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d102      	bne.n	800828a <f_open+0x226>
 8008284:	2302      	movs	r3, #2
 8008286:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 800828a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800828e:	2b00      	cmp	r3, #0
 8008290:	f040 80a3 	bne.w	80083da <f_open+0x376>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8008294:	697b      	ldr	r3, [r7, #20]
 8008296:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008298:	4611      	mov	r1, r2
 800829a:	4618      	mov	r0, r3
 800829c:	f7fe fd99 	bl	8006dd2 <ld_clust>
 80082a0:	4602      	mov	r2, r0
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80082a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80082a8:	331c      	adds	r3, #28
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7fd fd74 	bl	8005d98 <ld_dword>
 80082b0:	4602      	mov	r2, r0
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2200      	movs	r2, #0
 80082ba:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80082c2:	697b      	ldr	r3, [r7, #20]
 80082c4:	88da      	ldrh	r2, [r3, #6]
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	79fa      	ldrb	r2, [r7, #7]
 80082ce:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	2200      	movs	r2, #0
 80082d4:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2200      	movs	r2, #0
 80082da:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	3330      	adds	r3, #48	@ 0x30
 80082e6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80082ea:	2100      	movs	r1, #0
 80082ec:	4618      	mov	r0, r3
 80082ee:	f7fd fdde 	bl	8005eae <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 80082f2:	79fb      	ldrb	r3, [r7, #7]
 80082f4:	f003 0320 	and.w	r3, r3, #32
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d06e      	beq.n	80083da <f_open+0x376>
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	2b00      	cmp	r3, #0
 8008302:	d06a      	beq.n	80083da <f_open+0x376>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	68da      	ldr	r2, [r3, #12]
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	895b      	ldrh	r3, [r3, #10]
 8008310:	461a      	mov	r2, r3
 8008312:	697b      	ldr	r3, [r7, #20]
 8008314:	899b      	ldrh	r3, [r3, #12]
 8008316:	fb02 f303 	mul.w	r3, r2, r3
 800831a:	653b      	str	r3, [r7, #80]	@ 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	663b      	str	r3, [r7, #96]	@ 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008328:	e016      	b.n	8008358 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 800832e:	4618      	mov	r0, r3
 8008330:	f7fe f887 	bl	8006442 <get_fat>
 8008334:	6638      	str	r0, [r7, #96]	@ 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8008336:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008338:	2b01      	cmp	r3, #1
 800833a:	d802      	bhi.n	8008342 <f_open+0x2de>
 800833c:	2302      	movs	r3, #2
 800833e:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8008342:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008344:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008348:	d102      	bne.n	8008350 <f_open+0x2ec>
 800834a:	2301      	movs	r3, #1
 800834c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8008350:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008352:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008354:	1ad3      	subs	r3, r2, r3
 8008356:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008358:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800835c:	2b00      	cmp	r3, #0
 800835e:	d103      	bne.n	8008368 <f_open+0x304>
 8008360:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008362:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008364:	429a      	cmp	r2, r3
 8008366:	d8e0      	bhi.n	800832a <f_open+0x2c6>
				}
				fp->clust = clst;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800836c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800836e:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8008372:	2b00      	cmp	r3, #0
 8008374:	d131      	bne.n	80083da <f_open+0x376>
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	899b      	ldrh	r3, [r3, #12]
 800837a:	461a      	mov	r2, r3
 800837c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800837e:	fbb3 f1f2 	udiv	r1, r3, r2
 8008382:	fb01 f202 	mul.w	r2, r1, r2
 8008386:	1a9b      	subs	r3, r3, r2
 8008388:	2b00      	cmp	r3, #0
 800838a:	d026      	beq.n	80083da <f_open+0x376>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008390:	4618      	mov	r0, r3
 8008392:	f7fe f837 	bl	8006404 <clust2sect>
 8008396:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8008398:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800839a:	2b00      	cmp	r3, #0
 800839c:	d103      	bne.n	80083a6 <f_open+0x342>
						res = FR_INT_ERR;
 800839e:	2302      	movs	r3, #2
 80083a0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80083a4:	e019      	b.n	80083da <f_open+0x376>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	899b      	ldrh	r3, [r3, #12]
 80083aa:	461a      	mov	r2, r3
 80083ac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80083ae:	fbb3 f2f2 	udiv	r2, r3, r2
 80083b2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80083b4:	441a      	add	r2, r3
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	7858      	ldrb	r0, [r3, #1]
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	6a1a      	ldr	r2, [r3, #32]
 80083c8:	2301      	movs	r3, #1
 80083ca:	f7fd fc6f 	bl	8005cac <disk_read>
 80083ce:	4603      	mov	r3, r0
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d002      	beq.n	80083da <f_open+0x376>
 80083d4:	2301      	movs	r3, #1
 80083d6:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80083da:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80083de:	2b00      	cmp	r3, #0
 80083e0:	d002      	beq.n	80083e8 <f_open+0x384>
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	2200      	movs	r2, #0
 80083e6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80083e8:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3768      	adds	r7, #104	@ 0x68
 80083f0:	46bd      	mov	sp, r7
 80083f2:	bd80      	pop	{r7, pc}

080083f4 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80083f4:	b580      	push	{r7, lr}
 80083f6:	b08c      	sub	sp, #48	@ 0x30
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
 8008400:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	2200      	movs	r2, #0
 800840a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	f107 0210 	add.w	r2, r7, #16
 8008412:	4611      	mov	r1, r2
 8008414:	4618      	mov	r0, r3
 8008416:	f7ff fda9 	bl	8007f6c <validate>
 800841a:	4603      	mov	r3, r0
 800841c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8008420:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008424:	2b00      	cmp	r3, #0
 8008426:	d107      	bne.n	8008438 <f_write+0x44>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	7d5b      	ldrb	r3, [r3, #21]
 800842c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008430:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8008434:	2b00      	cmp	r3, #0
 8008436:	d002      	beq.n	800843e <f_write+0x4a>
 8008438:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800843c:	e16a      	b.n	8008714 <f_write+0x320>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	7d1b      	ldrb	r3, [r3, #20]
 8008442:	f003 0302 	and.w	r3, r3, #2
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <f_write+0x5a>
 800844a:	2307      	movs	r3, #7
 800844c:	e162      	b.n	8008714 <f_write+0x320>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	699a      	ldr	r2, [r3, #24]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	441a      	add	r2, r3
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	699b      	ldr	r3, [r3, #24]
 800845a:	429a      	cmp	r2, r3
 800845c:	f080 814c 	bcs.w	80086f8 <f_write+0x304>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	699b      	ldr	r3, [r3, #24]
 8008464:	43db      	mvns	r3, r3
 8008466:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8008468:	e146      	b.n	80086f8 <f_write+0x304>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	699b      	ldr	r3, [r3, #24]
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	8992      	ldrh	r2, [r2, #12]
 8008472:	fbb3 f1f2 	udiv	r1, r3, r2
 8008476:	fb01 f202 	mul.w	r2, r1, r2
 800847a:	1a9b      	subs	r3, r3, r2
 800847c:	2b00      	cmp	r3, #0
 800847e:	f040 80f1 	bne.w	8008664 <f_write+0x270>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8008482:	68fb      	ldr	r3, [r7, #12]
 8008484:	699b      	ldr	r3, [r3, #24]
 8008486:	693a      	ldr	r2, [r7, #16]
 8008488:	8992      	ldrh	r2, [r2, #12]
 800848a:	fbb3 f3f2 	udiv	r3, r3, r2
 800848e:	693a      	ldr	r2, [r7, #16]
 8008490:	8952      	ldrh	r2, [r2, #10]
 8008492:	3a01      	subs	r2, #1
 8008494:	4013      	ands	r3, r2
 8008496:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	2b00      	cmp	r3, #0
 800849c:	d143      	bne.n	8008526 <f_write+0x132>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	699b      	ldr	r3, [r3, #24]
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d10c      	bne.n	80084c0 <f_write+0xcc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	62bb      	str	r3, [r7, #40]	@ 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 80084ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d11a      	bne.n	80084e8 <f_write+0xf4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2100      	movs	r1, #0
 80084b6:	4618      	mov	r0, r3
 80084b8:	f7fe fa15 	bl	80068e6 <create_chain>
 80084bc:	62b8      	str	r0, [r7, #40]	@ 0x28
 80084be:	e013      	b.n	80084e8 <f_write+0xf4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d007      	beq.n	80084d8 <f_write+0xe4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	699b      	ldr	r3, [r3, #24]
 80084cc:	4619      	mov	r1, r3
 80084ce:	68f8      	ldr	r0, [r7, #12]
 80084d0:	f7fe faa1 	bl	8006a16 <clmt_clust>
 80084d4:	62b8      	str	r0, [r7, #40]	@ 0x28
 80084d6:	e007      	b.n	80084e8 <f_write+0xf4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80084d8:	68fa      	ldr	r2, [r7, #12]
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	69db      	ldr	r3, [r3, #28]
 80084de:	4619      	mov	r1, r3
 80084e0:	4610      	mov	r0, r2
 80084e2:	f7fe fa00 	bl	80068e6 <create_chain>
 80084e6:	62b8      	str	r0, [r7, #40]	@ 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80084e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	f000 8109 	beq.w	8008702 <f_write+0x30e>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80084f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084f2:	2b01      	cmp	r3, #1
 80084f4:	d104      	bne.n	8008500 <f_write+0x10c>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	2202      	movs	r2, #2
 80084fa:	755a      	strb	r2, [r3, #21]
 80084fc:	2302      	movs	r3, #2
 80084fe:	e109      	b.n	8008714 <f_write+0x320>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8008500:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008506:	d104      	bne.n	8008512 <f_write+0x11e>
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	2201      	movs	r2, #1
 800850c:	755a      	strb	r2, [r3, #21]
 800850e:	2301      	movs	r3, #1
 8008510:	e100      	b.n	8008714 <f_write+0x320>
				fp->clust = clst;			/* Update current cluster */
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008516:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	2b00      	cmp	r3, #0
 800851e:	d102      	bne.n	8008526 <f_write+0x132>
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008524:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	7d1b      	ldrb	r3, [r3, #20]
 800852a:	b25b      	sxtb	r3, r3
 800852c:	2b00      	cmp	r3, #0
 800852e:	da18      	bge.n	8008562 <f_write+0x16e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8008530:	693b      	ldr	r3, [r7, #16]
 8008532:	7858      	ldrb	r0, [r3, #1]
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6a1a      	ldr	r2, [r3, #32]
 800853e:	2301      	movs	r3, #1
 8008540:	f7fd fbd4 	bl	8005cec <disk_write>
 8008544:	4603      	mov	r3, r0
 8008546:	2b00      	cmp	r3, #0
 8008548:	d004      	beq.n	8008554 <f_write+0x160>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	2201      	movs	r2, #1
 800854e:	755a      	strb	r2, [r3, #21]
 8008550:	2301      	movs	r3, #1
 8008552:	e0df      	b.n	8008714 <f_write+0x320>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	7d1b      	ldrb	r3, [r3, #20]
 8008558:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800855c:	b2da      	uxtb	r2, r3
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8008562:	693a      	ldr	r2, [r7, #16]
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	69db      	ldr	r3, [r3, #28]
 8008568:	4619      	mov	r1, r3
 800856a:	4610      	mov	r0, r2
 800856c:	f7fd ff4a 	bl	8006404 <clust2sect>
 8008570:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d104      	bne.n	8008582 <f_write+0x18e>
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2202      	movs	r2, #2
 800857c:	755a      	strb	r2, [r3, #21]
 800857e:	2302      	movs	r3, #2
 8008580:	e0c8      	b.n	8008714 <f_write+0x320>
			sect += csect;
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	69bb      	ldr	r3, [r7, #24]
 8008586:	4413      	add	r3, r2
 8008588:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 800858a:	693b      	ldr	r3, [r7, #16]
 800858c:	899b      	ldrh	r3, [r3, #12]
 800858e:	461a      	mov	r2, r3
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	fbb3 f3f2 	udiv	r3, r3, r2
 8008596:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8008598:	6a3b      	ldr	r3, [r7, #32]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d043      	beq.n	8008626 <f_write+0x232>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800859e:	69ba      	ldr	r2, [r7, #24]
 80085a0:	6a3b      	ldr	r3, [r7, #32]
 80085a2:	4413      	add	r3, r2
 80085a4:	693a      	ldr	r2, [r7, #16]
 80085a6:	8952      	ldrh	r2, [r2, #10]
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d905      	bls.n	80085b8 <f_write+0x1c4>
					cc = fs->csize - csect;
 80085ac:	693b      	ldr	r3, [r7, #16]
 80085ae:	895b      	ldrh	r3, [r3, #10]
 80085b0:	461a      	mov	r2, r3
 80085b2:	69bb      	ldr	r3, [r7, #24]
 80085b4:	1ad3      	subs	r3, r2, r3
 80085b6:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	7858      	ldrb	r0, [r3, #1]
 80085bc:	6a3b      	ldr	r3, [r7, #32]
 80085be:	697a      	ldr	r2, [r7, #20]
 80085c0:	69f9      	ldr	r1, [r7, #28]
 80085c2:	f7fd fb93 	bl	8005cec <disk_write>
 80085c6:	4603      	mov	r3, r0
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d004      	beq.n	80085d6 <f_write+0x1e2>
 80085cc:	68fb      	ldr	r3, [r7, #12]
 80085ce:	2201      	movs	r2, #1
 80085d0:	755a      	strb	r2, [r3, #21]
 80085d2:	2301      	movs	r3, #1
 80085d4:	e09e      	b.n	8008714 <f_write+0x320>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6a1a      	ldr	r2, [r3, #32]
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	1ad3      	subs	r3, r2, r3
 80085de:	6a3a      	ldr	r2, [r7, #32]
 80085e0:	429a      	cmp	r2, r3
 80085e2:	d918      	bls.n	8008616 <f_write+0x222>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	f103 0030 	add.w	r0, r3, #48	@ 0x30
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	6a1a      	ldr	r2, [r3, #32]
 80085ee:	697b      	ldr	r3, [r7, #20]
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	693a      	ldr	r2, [r7, #16]
 80085f4:	8992      	ldrh	r2, [r2, #12]
 80085f6:	fb02 f303 	mul.w	r3, r2, r3
 80085fa:	69fa      	ldr	r2, [r7, #28]
 80085fc:	18d1      	adds	r1, r2, r3
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	899b      	ldrh	r3, [r3, #12]
 8008602:	461a      	mov	r2, r3
 8008604:	f7fd fc32 	bl	8005e6c <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	7d1b      	ldrb	r3, [r3, #20]
 800860c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008610:	b2da      	uxtb	r2, r3
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 8008616:	693b      	ldr	r3, [r7, #16]
 8008618:	899b      	ldrh	r3, [r3, #12]
 800861a:	461a      	mov	r2, r3
 800861c:	6a3b      	ldr	r3, [r7, #32]
 800861e:	fb02 f303 	mul.w	r3, r2, r3
 8008622:	627b      	str	r3, [r7, #36]	@ 0x24
				continue;
 8008624:	e04b      	b.n	80086be <f_write+0x2ca>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	697a      	ldr	r2, [r7, #20]
 800862c:	429a      	cmp	r2, r3
 800862e:	d016      	beq.n	800865e <f_write+0x26a>
				fp->fptr < fp->obj.objsize &&
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	699a      	ldr	r2, [r3, #24]
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 8008638:	429a      	cmp	r2, r3
 800863a:	d210      	bcs.n	800865e <f_write+0x26a>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	7858      	ldrb	r0, [r3, #1]
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008646:	2301      	movs	r3, #1
 8008648:	697a      	ldr	r2, [r7, #20]
 800864a:	f7fd fb2f 	bl	8005cac <disk_read>
 800864e:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8008650:	2b00      	cmp	r3, #0
 8008652:	d004      	beq.n	800865e <f_write+0x26a>
					ABORT(fs, FR_DISK_ERR);
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	2201      	movs	r2, #1
 8008658:	755a      	strb	r2, [r3, #21]
 800865a:	2301      	movs	r3, #1
 800865c:	e05a      	b.n	8008714 <f_write+0x320>
			}
#endif
			fp->sect = sect;
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	697a      	ldr	r2, [r7, #20]
 8008662:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8008664:	693b      	ldr	r3, [r7, #16]
 8008666:	899b      	ldrh	r3, [r3, #12]
 8008668:	4618      	mov	r0, r3
 800866a:	68fb      	ldr	r3, [r7, #12]
 800866c:	699b      	ldr	r3, [r3, #24]
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	8992      	ldrh	r2, [r2, #12]
 8008672:	fbb3 f1f2 	udiv	r1, r3, r2
 8008676:	fb01 f202 	mul.w	r2, r1, r2
 800867a:	1a9b      	subs	r3, r3, r2
 800867c:	1ac3      	subs	r3, r0, r3
 800867e:	627b      	str	r3, [r7, #36]	@ 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8008680:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	429a      	cmp	r2, r3
 8008686:	d901      	bls.n	800868c <f_write+0x298>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	627b      	str	r3, [r7, #36]	@ 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	699b      	ldr	r3, [r3, #24]
 8008696:	693a      	ldr	r2, [r7, #16]
 8008698:	8992      	ldrh	r2, [r2, #12]
 800869a:	fbb3 f0f2 	udiv	r0, r3, r2
 800869e:	fb00 f202 	mul.w	r2, r0, r2
 80086a2:	1a9b      	subs	r3, r3, r2
 80086a4:	440b      	add	r3, r1
 80086a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086a8:	69f9      	ldr	r1, [r7, #28]
 80086aa:	4618      	mov	r0, r3
 80086ac:	f7fd fbde 	bl	8005e6c <mem_cpy>
		fp->flag |= FA_DIRTY;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	7d1b      	ldrb	r3, [r3, #20]
 80086b4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80086b8:	b2da      	uxtb	r2, r3
 80086ba:	68fb      	ldr	r3, [r7, #12]
 80086bc:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 80086be:	69fa      	ldr	r2, [r7, #28]
 80086c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086c2:	4413      	add	r3, r2
 80086c4:	61fb      	str	r3, [r7, #28]
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	699a      	ldr	r2, [r3, #24]
 80086ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086cc:	441a      	add	r2, r3
 80086ce:	68fb      	ldr	r3, [r7, #12]
 80086d0:	619a      	str	r2, [r3, #24]
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	68da      	ldr	r2, [r3, #12]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	699b      	ldr	r3, [r3, #24]
 80086da:	429a      	cmp	r2, r3
 80086dc:	bf38      	it	cc
 80086de:	461a      	movcc	r2, r3
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	60da      	str	r2, [r3, #12]
 80086e4:	683b      	ldr	r3, [r7, #0]
 80086e6:	681a      	ldr	r2, [r3, #0]
 80086e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086ea:	441a      	add	r2, r3
 80086ec:	683b      	ldr	r3, [r7, #0]
 80086ee:	601a      	str	r2, [r3, #0]
 80086f0:	687a      	ldr	r2, [r7, #4]
 80086f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086f4:	1ad3      	subs	r3, r2, r3
 80086f6:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	f47f aeb5 	bne.w	800846a <f_write+0x76>
 8008700:	e000      	b.n	8008704 <f_write+0x310>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8008702:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	7d1b      	ldrb	r3, [r3, #20]
 8008708:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800870c:	b2da      	uxtb	r2, r3
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 8008712:	2300      	movs	r3, #0
}
 8008714:	4618      	mov	r0, r3
 8008716:	3730      	adds	r7, #48	@ 0x30
 8008718:	46bd      	mov	sp, r7
 800871a:	bd80      	pop	{r7, pc}

0800871c <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b086      	sub	sp, #24
 8008720:	af00      	add	r7, sp, #0
 8008722:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f107 0208 	add.w	r2, r7, #8
 800872a:	4611      	mov	r1, r2
 800872c:	4618      	mov	r0, r3
 800872e:	f7ff fc1d 	bl	8007f6c <validate>
 8008732:	4603      	mov	r3, r0
 8008734:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8008736:	7dfb      	ldrb	r3, [r7, #23]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d168      	bne.n	800880e <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	7d1b      	ldrb	r3, [r3, #20]
 8008740:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008744:	2b00      	cmp	r3, #0
 8008746:	d062      	beq.n	800880e <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	7d1b      	ldrb	r3, [r3, #20]
 800874c:	b25b      	sxtb	r3, r3
 800874e:	2b00      	cmp	r3, #0
 8008750:	da15      	bge.n	800877e <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8008752:	68bb      	ldr	r3, [r7, #8]
 8008754:	7858      	ldrb	r0, [r3, #1]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	f103 0130 	add.w	r1, r3, #48	@ 0x30
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6a1a      	ldr	r2, [r3, #32]
 8008760:	2301      	movs	r3, #1
 8008762:	f7fd fac3 	bl	8005cec <disk_write>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d001      	beq.n	8008770 <f_sync+0x54>
 800876c:	2301      	movs	r3, #1
 800876e:	e04f      	b.n	8008810 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	7d1b      	ldrb	r3, [r3, #20]
 8008774:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008778:	b2da      	uxtb	r2, r3
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800877e:	f7fd f9f5 	bl	8005b6c <get_fattime>
 8008782:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8008784:	68ba      	ldr	r2, [r7, #8]
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800878a:	4619      	mov	r1, r3
 800878c:	4610      	mov	r0, r2
 800878e:	f7fd fd9b 	bl	80062c8 <move_window>
 8008792:	4603      	mov	r3, r0
 8008794:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8008796:	7dfb      	ldrb	r3, [r7, #23]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d138      	bne.n	800880e <f_sync+0xf2>
					dir = fp->dir_ptr;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a0:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	330b      	adds	r3, #11
 80087a6:	781a      	ldrb	r2, [r3, #0]
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	330b      	adds	r3, #11
 80087ac:	f042 0220 	orr.w	r2, r2, #32
 80087b0:	b2d2      	uxtb	r2, r2
 80087b2:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	6818      	ldr	r0, [r3, #0]
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	689b      	ldr	r3, [r3, #8]
 80087bc:	461a      	mov	r2, r3
 80087be:	68f9      	ldr	r1, [r7, #12]
 80087c0:	f7fe fb26 	bl	8006e10 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 80087c4:	68fb      	ldr	r3, [r7, #12]
 80087c6:	f103 021c 	add.w	r2, r3, #28
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	68db      	ldr	r3, [r3, #12]
 80087ce:	4619      	mov	r1, r3
 80087d0:	4610      	mov	r0, r2
 80087d2:	f7fd fb1f 	bl	8005e14 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	3316      	adds	r3, #22
 80087da:	6939      	ldr	r1, [r7, #16]
 80087dc:	4618      	mov	r0, r3
 80087de:	f7fd fb19 	bl	8005e14 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	3312      	adds	r3, #18
 80087e6:	2100      	movs	r1, #0
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7fd faf8 	bl	8005dde <st_word>
					fs->wflag = 1;
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	2201      	movs	r2, #1
 80087f2:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	4618      	mov	r0, r3
 80087f8:	f7fd fd94 	bl	8006324 <sync_fs>
 80087fc:	4603      	mov	r3, r0
 80087fe:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	7d1b      	ldrb	r3, [r3, #20]
 8008804:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008808:	b2da      	uxtb	r2, r3
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800880e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008810:	4618      	mov	r0, r3
 8008812:	3718      	adds	r7, #24
 8008814:	46bd      	mov	sp, r7
 8008816:	bd80      	pop	{r7, pc}

08008818 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b084      	sub	sp, #16
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7ff ff7b 	bl	800871c <f_sync>
 8008826:	4603      	mov	r3, r0
 8008828:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800882a:	7bfb      	ldrb	r3, [r7, #15]
 800882c:	2b00      	cmp	r3, #0
 800882e:	d118      	bne.n	8008862 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	f107 0208 	add.w	r2, r7, #8
 8008836:	4611      	mov	r1, r2
 8008838:	4618      	mov	r0, r3
 800883a:	f7ff fb97 	bl	8007f6c <validate>
 800883e:	4603      	mov	r3, r0
 8008840:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8008842:	7bfb      	ldrb	r3, [r7, #15]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d10c      	bne.n	8008862 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	4618      	mov	r0, r3
 800884e:	f7fd fc97 	bl	8006180 <dec_lock>
 8008852:	4603      	mov	r3, r0
 8008854:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8008856:	7bfb      	ldrb	r3, [r7, #15]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d102      	bne.n	8008862 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	2200      	movs	r2, #0
 8008860:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8008862:	7bfb      	ldrb	r3, [r7, #15]
}
 8008864:	4618      	mov	r0, r3
 8008866:	3710      	adds	r7, #16
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}

0800886c <f_getfree>:
FRESULT f_getfree (
	const TCHAR* path,	/* Path name of the logical drive number */
	DWORD* nclst,		/* Pointer to a variable to return number of free clusters */
	FATFS** fatfs		/* Pointer to return pointer to corresponding file system object */
)
{
 800886c:	b580      	push	{r7, lr}
 800886e:	b092      	sub	sp, #72	@ 0x48
 8008870:	af00      	add	r7, sp, #0
 8008872:	60f8      	str	r0, [r7, #12]
 8008874:	60b9      	str	r1, [r7, #8]
 8008876:	607a      	str	r2, [r7, #4]
	BYTE *p;
	_FDID obj;


	/* Get logical drive */
	res = find_volume(&path, &fs, 0);
 8008878:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800887c:	f107 030c 	add.w	r3, r7, #12
 8008880:	2200      	movs	r2, #0
 8008882:	4618      	mov	r0, r3
 8008884:	f7ff f8ec 	bl	8007a60 <find_volume>
 8008888:	4603      	mov	r3, r0
 800888a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
	if (res == FR_OK) {
 800888e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008892:	2b00      	cmp	r3, #0
 8008894:	f040 8099 	bne.w	80089ca <f_getfree+0x15e>
		*fatfs = fs;				/* Return ptr to the fs object */
 8008898:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	601a      	str	r2, [r3, #0]
		/* If free_clst is valid, return it without full cluster scan */
		if (fs->free_clst <= fs->n_fatent - 2) {
 800889e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a0:	699a      	ldr	r2, [r3, #24]
 80088a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088a4:	69db      	ldr	r3, [r3, #28]
 80088a6:	3b02      	subs	r3, #2
 80088a8:	429a      	cmp	r2, r3
 80088aa:	d804      	bhi.n	80088b6 <f_getfree+0x4a>
			*nclst = fs->free_clst;
 80088ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ae:	699a      	ldr	r2, [r3, #24]
 80088b0:	68bb      	ldr	r3, [r7, #8]
 80088b2:	601a      	str	r2, [r3, #0]
 80088b4:	e089      	b.n	80089ca <f_getfree+0x15e>
		} else {
			/* Get number of free clusters */
			nfree = 0;
 80088b6:	2300      	movs	r3, #0
 80088b8:	643b      	str	r3, [r7, #64]	@ 0x40
			if (fs->fs_type == FS_FAT12) {	/* FAT12: Sector unalighed FAT entries */
 80088ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088bc:	781b      	ldrb	r3, [r3, #0]
 80088be:	2b01      	cmp	r3, #1
 80088c0:	d128      	bne.n	8008914 <f_getfree+0xa8>
				clst = 2; obj.fs = fs;
 80088c2:	2302      	movs	r3, #2
 80088c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80088c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088c8:	617b      	str	r3, [r7, #20]
				do {
					stat = get_fat(&obj, clst);
 80088ca:	f107 0314 	add.w	r3, r7, #20
 80088ce:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80088d0:	4618      	mov	r0, r3
 80088d2:	f7fd fdb6 	bl	8006442 <get_fat>
 80088d6:	62f8      	str	r0, [r7, #44]	@ 0x2c
					if (stat == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }
 80088d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088de:	d103      	bne.n	80088e8 <f_getfree+0x7c>
 80088e0:	2301      	movs	r3, #1
 80088e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80088e6:	e063      	b.n	80089b0 <f_getfree+0x144>
					if (stat == 1) { res = FR_INT_ERR; break; }
 80088e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088ea:	2b01      	cmp	r3, #1
 80088ec:	d103      	bne.n	80088f6 <f_getfree+0x8a>
 80088ee:	2302      	movs	r3, #2
 80088f0:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 80088f4:	e05c      	b.n	80089b0 <f_getfree+0x144>
					if (stat == 0) nfree++;
 80088f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d102      	bne.n	8008902 <f_getfree+0x96>
 80088fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80088fe:	3301      	adds	r3, #1
 8008900:	643b      	str	r3, [r7, #64]	@ 0x40
				} while (++clst < fs->n_fatent);
 8008902:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008904:	3301      	adds	r3, #1
 8008906:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008908:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800890a:	69db      	ldr	r3, [r3, #28]
 800890c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800890e:	429a      	cmp	r2, r3
 8008910:	d3db      	bcc.n	80088ca <f_getfree+0x5e>
 8008912:	e04d      	b.n	80089b0 <f_getfree+0x144>
						i = (i + 1) % SS(fs);
					} while (clst);
				} else
#endif
				{	/* FAT16/32: Sector alighed FAT entries */
					clst = fs->n_fatent; sect = fs->fatbase;
 8008914:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008916:	69db      	ldr	r3, [r3, #28]
 8008918:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800891a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800891e:	63bb      	str	r3, [r7, #56]	@ 0x38
					i = 0; p = 0;
 8008920:	2300      	movs	r3, #0
 8008922:	637b      	str	r3, [r7, #52]	@ 0x34
 8008924:	2300      	movs	r3, #0
 8008926:	633b      	str	r3, [r7, #48]	@ 0x30
					do {
						if (i == 0) {
 8008928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800892a:	2b00      	cmp	r3, #0
 800892c:	d113      	bne.n	8008956 <f_getfree+0xea>
							res = move_window(fs, sect++);
 800892e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008930:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008932:	1c5a      	adds	r2, r3, #1
 8008934:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008936:	4619      	mov	r1, r3
 8008938:	f7fd fcc6 	bl	80062c8 <move_window>
 800893c:	4603      	mov	r3, r0
 800893e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
							if (res != FR_OK) break;
 8008942:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8008946:	2b00      	cmp	r3, #0
 8008948:	d131      	bne.n	80089ae <f_getfree+0x142>
							p = fs->win;
 800894a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800894c:	3338      	adds	r3, #56	@ 0x38
 800894e:	633b      	str	r3, [r7, #48]	@ 0x30
							i = SS(fs);
 8008950:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008952:	899b      	ldrh	r3, [r3, #12]
 8008954:	637b      	str	r3, [r7, #52]	@ 0x34
						}
						if (fs->fs_type == FS_FAT16) {
 8008956:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008958:	781b      	ldrb	r3, [r3, #0]
 800895a:	2b02      	cmp	r3, #2
 800895c:	d10f      	bne.n	800897e <f_getfree+0x112>
							if (ld_word(p) == 0) nfree++;
 800895e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008960:	f7fd fa02 	bl	8005d68 <ld_word>
 8008964:	4603      	mov	r3, r0
 8008966:	2b00      	cmp	r3, #0
 8008968:	d102      	bne.n	8008970 <f_getfree+0x104>
 800896a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800896c:	3301      	adds	r3, #1
 800896e:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 2; i -= 2;
 8008970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008972:	3302      	adds	r3, #2
 8008974:	633b      	str	r3, [r7, #48]	@ 0x30
 8008976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008978:	3b02      	subs	r3, #2
 800897a:	637b      	str	r3, [r7, #52]	@ 0x34
 800897c:	e010      	b.n	80089a0 <f_getfree+0x134>
						} else {
							if ((ld_dword(p) & 0x0FFFFFFF) == 0) nfree++;
 800897e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008980:	f7fd fa0a 	bl	8005d98 <ld_dword>
 8008984:	4603      	mov	r3, r0
 8008986:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800898a:	2b00      	cmp	r3, #0
 800898c:	d102      	bne.n	8008994 <f_getfree+0x128>
 800898e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008990:	3301      	adds	r3, #1
 8008992:	643b      	str	r3, [r7, #64]	@ 0x40
							p += 4; i -= 4;
 8008994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008996:	3304      	adds	r3, #4
 8008998:	633b      	str	r3, [r7, #48]	@ 0x30
 800899a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800899c:	3b04      	subs	r3, #4
 800899e:	637b      	str	r3, [r7, #52]	@ 0x34
						}
					} while (--clst);
 80089a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089a2:	3b01      	subs	r3, #1
 80089a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80089a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d1bd      	bne.n	8008928 <f_getfree+0xbc>
 80089ac:	e000      	b.n	80089b0 <f_getfree+0x144>
							if (res != FR_OK) break;
 80089ae:	bf00      	nop
				}
			}
			*nclst = nfree;			/* Return the free clusters */
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089b4:	601a      	str	r2, [r3, #0]
			fs->free_clst = nfree;	/* Now free_clst is valid */
 80089b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089b8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80089ba:	619a      	str	r2, [r3, #24]
			fs->fsi_flag |= 1;		/* FSInfo is to be updated */
 80089bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089be:	791a      	ldrb	r2, [r3, #4]
 80089c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80089c2:	f042 0201 	orr.w	r2, r2, #1
 80089c6:	b2d2      	uxtb	r2, r2
 80089c8:	711a      	strb	r2, [r3, #4]
		}
	}

	LEAVE_FF(fs, res);
 80089ca:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
}
 80089ce:	4618      	mov	r0, r3
 80089d0:	3748      	adds	r7, #72	@ 0x48
 80089d2:	46bd      	mov	sp, r7
 80089d4:	bd80      	pop	{r7, pc}

080089d6 <putc_bfd>:
static
void putc_bfd (		/* Buffered write with code conversion */
	putbuff* pb,
	TCHAR c
)
{
 80089d6:	b580      	push	{r7, lr}
 80089d8:	b084      	sub	sp, #16
 80089da:	af00      	add	r7, sp, #0
 80089dc:	6078      	str	r0, [r7, #4]
 80089de:	460b      	mov	r3, r1
 80089e0:	70fb      	strb	r3, [r7, #3]
	UINT bw;
	int i;


	if (_USE_STRFUNC == 2 && c == '\n') {	 /* LF -> CRLF conversion */
 80089e2:	78fb      	ldrb	r3, [r7, #3]
 80089e4:	2b0a      	cmp	r3, #10
 80089e6:	d103      	bne.n	80089f0 <putc_bfd+0x1a>
		putc_bfd(pb, '\r');
 80089e8:	210d      	movs	r1, #13
 80089ea:	6878      	ldr	r0, [r7, #4]
 80089ec:	f7ff fff3 	bl	80089d6 <putc_bfd>
	}

	i = pb->idx;		/* Write index of pb->buf[] */
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	685b      	ldr	r3, [r3, #4]
 80089f4:	60fb      	str	r3, [r7, #12]
	if (i < 0) return;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	db25      	blt.n	8008a48 <putc_bfd+0x72>
	if (c >= 0x100)
		pb->buf[i++] = (BYTE)(c >> 8);
	pb->buf[i++] = (BYTE)c;
#endif
#else							/* Write a character without conversion */
	pb->buf[i++] = (BYTE)c;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	1c5a      	adds	r2, r3, #1
 8008a00:	60fa      	str	r2, [r7, #12]
 8008a02:	687a      	ldr	r2, [r7, #4]
 8008a04:	4413      	add	r3, r2
 8008a06:	78fa      	ldrb	r2, [r7, #3]
 8008a08:	731a      	strb	r2, [r3, #12]
#endif

	if (i >= (int)(sizeof pb->buf) - 3) {	/* Write buffered characters to the file */
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	2b3c      	cmp	r3, #60	@ 0x3c
 8008a0e:	dd12      	ble.n	8008a36 <putc_bfd+0x60>
		f_write(pb->fp, pb->buf, (UINT)i, &bw);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	6818      	ldr	r0, [r3, #0]
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	f103 010c 	add.w	r1, r3, #12
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	f107 0308 	add.w	r3, r7, #8
 8008a20:	f7ff fce8 	bl	80083f4 <f_write>
		i = (bw == (UINT)i) ? 0 : -1;
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	429a      	cmp	r2, r3
 8008a2a:	d101      	bne.n	8008a30 <putc_bfd+0x5a>
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	e001      	b.n	8008a34 <putc_bfd+0x5e>
 8008a30:	f04f 33ff 	mov.w	r3, #4294967295
 8008a34:	60fb      	str	r3, [r7, #12]
	}
	pb->idx = i;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68fa      	ldr	r2, [r7, #12]
 8008a3a:	605a      	str	r2, [r3, #4]
	pb->nchr++;
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	1c5a      	adds	r2, r3, #1
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	609a      	str	r2, [r3, #8]
 8008a46:	e000      	b.n	8008a4a <putc_bfd+0x74>
	if (i < 0) return;
 8008a48:	bf00      	nop
}
 8008a4a:	3710      	adds	r7, #16
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	bd80      	pop	{r7, pc}

08008a50 <putc_flush>:

static
int putc_flush (		/* Flush left characters in the buffer */
	putbuff* pb
)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
	UINT nw;

	if (   pb->idx >= 0	/* Flush buffered characters to the file */
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	db16      	blt.n	8008a8e <putc_flush+0x3e>
		&& f_write(pb->fp, pb->buf, (UINT)pb->idx, &nw) == FR_OK
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6818      	ldr	r0, [r3, #0]
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	f103 010c 	add.w	r1, r3, #12
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	685b      	ldr	r3, [r3, #4]
 8008a6e:	461a      	mov	r2, r3
 8008a70:	f107 030c 	add.w	r3, r7, #12
 8008a74:	f7ff fcbe 	bl	80083f4 <f_write>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d107      	bne.n	8008a8e <putc_flush+0x3e>
		&& (UINT)pb->idx == nw) return pb->nchr;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	685b      	ldr	r3, [r3, #4]
 8008a82:	68fa      	ldr	r2, [r7, #12]
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d102      	bne.n	8008a8e <putc_flush+0x3e>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	e001      	b.n	8008a92 <putc_flush+0x42>
	return EOF;
 8008a8e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3710      	adds	r7, #16
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}

08008a9a <putc_init>:
static
void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
 8008a9a:	b480      	push	{r7}
 8008a9c:	b083      	sub	sp, #12
 8008a9e:	af00      	add	r7, sp, #0
 8008aa0:	6078      	str	r0, [r7, #4]
 8008aa2:	6039      	str	r1, [r7, #0]
	pb->fp = fp;
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	601a      	str	r2, [r3, #0]
	pb->nchr = pb->idx = 0;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	605a      	str	r2, [r3, #4]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	685a      	ldr	r2, [r3, #4]
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	609a      	str	r2, [r3, #8]
}
 8008ab8:	bf00      	nop
 8008aba:	370c      	adds	r7, #12
 8008abc:	46bd      	mov	sp, r7
 8008abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ac2:	4770      	bx	lr

08008ac4 <f_puts>:

int f_puts (
	const TCHAR* str,	/* Pointer to the string to be output */
	FIL* fp				/* Pointer to the file object */
)
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	b096      	sub	sp, #88	@ 0x58
 8008ac8:	af00      	add	r7, sp, #0
 8008aca:	6078      	str	r0, [r7, #4]
 8008acc:	6039      	str	r1, [r7, #0]
	putbuff pb;


	putc_init(&pb, fp);
 8008ace:	f107 030c 	add.w	r3, r7, #12
 8008ad2:	6839      	ldr	r1, [r7, #0]
 8008ad4:	4618      	mov	r0, r3
 8008ad6:	f7ff ffe0 	bl	8008a9a <putc_init>
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
 8008ada:	e009      	b.n	8008af0 <f_puts+0x2c>
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	1c5a      	adds	r2, r3, #1
 8008ae0:	607a      	str	r2, [r7, #4]
 8008ae2:	781a      	ldrb	r2, [r3, #0]
 8008ae4:	f107 030c 	add.w	r3, r7, #12
 8008ae8:	4611      	mov	r1, r2
 8008aea:	4618      	mov	r0, r3
 8008aec:	f7ff ff73 	bl	80089d6 <putc_bfd>
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1f1      	bne.n	8008adc <f_puts+0x18>
	return putc_flush(&pb);
 8008af8:	f107 030c 	add.w	r3, r7, #12
 8008afc:	4618      	mov	r0, r3
 8008afe:	f7ff ffa7 	bl	8008a50 <putc_flush>
 8008b02:	4603      	mov	r3, r0
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3758      	adds	r7, #88	@ 0x58
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	bd80      	pop	{r7, pc}

08008b0c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008b0c:	b480      	push	{r7}
 8008b0e:	b087      	sub	sp, #28
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	60f8      	str	r0, [r7, #12]
 8008b14:	60b9      	str	r1, [r7, #8]
 8008b16:	4613      	mov	r3, r2
 8008b18:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008b1a:	2301      	movs	r3, #1
 8008b1c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008b1e:	2300      	movs	r3, #0
 8008b20:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008b22:	4b1f      	ldr	r3, [pc, #124]	@ (8008ba0 <FATFS_LinkDriverEx+0x94>)
 8008b24:	7a5b      	ldrb	r3, [r3, #9]
 8008b26:	b2db      	uxtb	r3, r3
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d131      	bne.n	8008b90 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008b2c:	4b1c      	ldr	r3, [pc, #112]	@ (8008ba0 <FATFS_LinkDriverEx+0x94>)
 8008b2e:	7a5b      	ldrb	r3, [r3, #9]
 8008b30:	b2db      	uxtb	r3, r3
 8008b32:	461a      	mov	r2, r3
 8008b34:	4b1a      	ldr	r3, [pc, #104]	@ (8008ba0 <FATFS_LinkDriverEx+0x94>)
 8008b36:	2100      	movs	r1, #0
 8008b38:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008b3a:	4b19      	ldr	r3, [pc, #100]	@ (8008ba0 <FATFS_LinkDriverEx+0x94>)
 8008b3c:	7a5b      	ldrb	r3, [r3, #9]
 8008b3e:	b2db      	uxtb	r3, r3
 8008b40:	4a17      	ldr	r2, [pc, #92]	@ (8008ba0 <FATFS_LinkDriverEx+0x94>)
 8008b42:	009b      	lsls	r3, r3, #2
 8008b44:	4413      	add	r3, r2
 8008b46:	68fa      	ldr	r2, [r7, #12]
 8008b48:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008b4a:	4b15      	ldr	r3, [pc, #84]	@ (8008ba0 <FATFS_LinkDriverEx+0x94>)
 8008b4c:	7a5b      	ldrb	r3, [r3, #9]
 8008b4e:	b2db      	uxtb	r3, r3
 8008b50:	461a      	mov	r2, r3
 8008b52:	4b13      	ldr	r3, [pc, #76]	@ (8008ba0 <FATFS_LinkDriverEx+0x94>)
 8008b54:	4413      	add	r3, r2
 8008b56:	79fa      	ldrb	r2, [r7, #7]
 8008b58:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008b5a:	4b11      	ldr	r3, [pc, #68]	@ (8008ba0 <FATFS_LinkDriverEx+0x94>)
 8008b5c:	7a5b      	ldrb	r3, [r3, #9]
 8008b5e:	b2db      	uxtb	r3, r3
 8008b60:	1c5a      	adds	r2, r3, #1
 8008b62:	b2d1      	uxtb	r1, r2
 8008b64:	4a0e      	ldr	r2, [pc, #56]	@ (8008ba0 <FATFS_LinkDriverEx+0x94>)
 8008b66:	7251      	strb	r1, [r2, #9]
 8008b68:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008b6a:	7dbb      	ldrb	r3, [r7, #22]
 8008b6c:	3330      	adds	r3, #48	@ 0x30
 8008b6e:	b2da      	uxtb	r2, r3
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008b74:	68bb      	ldr	r3, [r7, #8]
 8008b76:	3301      	adds	r3, #1
 8008b78:	223a      	movs	r2, #58	@ 0x3a
 8008b7a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008b7c:	68bb      	ldr	r3, [r7, #8]
 8008b7e:	3302      	adds	r3, #2
 8008b80:	222f      	movs	r2, #47	@ 0x2f
 8008b82:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008b84:	68bb      	ldr	r3, [r7, #8]
 8008b86:	3303      	adds	r3, #3
 8008b88:	2200      	movs	r2, #0
 8008b8a:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	371c      	adds	r7, #28
 8008b96:	46bd      	mov	sp, r7
 8008b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9c:	4770      	bx	lr
 8008b9e:	bf00      	nop
 8008ba0:	20002504 	.word	0x20002504

08008ba4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b082      	sub	sp, #8
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	6078      	str	r0, [r7, #4]
 8008bac:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008bae:	2200      	movs	r2, #0
 8008bb0:	6839      	ldr	r1, [r7, #0]
 8008bb2:	6878      	ldr	r0, [r7, #4]
 8008bb4:	f7ff ffaa 	bl	8008b0c <FATFS_LinkDriverEx>
 8008bb8:	4603      	mov	r3, r0
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3708      	adds	r7, #8
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	bd80      	pop	{r7, pc}
	...

08008bc4 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b085      	sub	sp, #20
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	4603      	mov	r3, r0
 8008bcc:	6039      	str	r1, [r7, #0]
 8008bce:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8008bd0:	88fb      	ldrh	r3, [r7, #6]
 8008bd2:	2b7f      	cmp	r3, #127	@ 0x7f
 8008bd4:	d802      	bhi.n	8008bdc <ff_convert+0x18>
		c = chr;
 8008bd6:	88fb      	ldrh	r3, [r7, #6]
 8008bd8:	81fb      	strh	r3, [r7, #14]
 8008bda:	e025      	b.n	8008c28 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8008bdc:	683b      	ldr	r3, [r7, #0]
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d00b      	beq.n	8008bfa <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8008be2:	88fb      	ldrh	r3, [r7, #6]
 8008be4:	2bff      	cmp	r3, #255	@ 0xff
 8008be6:	d805      	bhi.n	8008bf4 <ff_convert+0x30>
 8008be8:	88fb      	ldrh	r3, [r7, #6]
 8008bea:	3b80      	subs	r3, #128	@ 0x80
 8008bec:	4a12      	ldr	r2, [pc, #72]	@ (8008c38 <ff_convert+0x74>)
 8008bee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008bf2:	e000      	b.n	8008bf6 <ff_convert+0x32>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	81fb      	strh	r3, [r7, #14]
 8008bf8:	e016      	b.n	8008c28 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	81fb      	strh	r3, [r7, #14]
 8008bfe:	e009      	b.n	8008c14 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8008c00:	89fb      	ldrh	r3, [r7, #14]
 8008c02:	4a0d      	ldr	r2, [pc, #52]	@ (8008c38 <ff_convert+0x74>)
 8008c04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008c08:	88fa      	ldrh	r2, [r7, #6]
 8008c0a:	429a      	cmp	r2, r3
 8008c0c:	d006      	beq.n	8008c1c <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8008c0e:	89fb      	ldrh	r3, [r7, #14]
 8008c10:	3301      	adds	r3, #1
 8008c12:	81fb      	strh	r3, [r7, #14]
 8008c14:	89fb      	ldrh	r3, [r7, #14]
 8008c16:	2b7f      	cmp	r3, #127	@ 0x7f
 8008c18:	d9f2      	bls.n	8008c00 <ff_convert+0x3c>
 8008c1a:	e000      	b.n	8008c1e <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8008c1c:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8008c1e:	89fb      	ldrh	r3, [r7, #14]
 8008c20:	3380      	adds	r3, #128	@ 0x80
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	b2db      	uxtb	r3, r3
 8008c26:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8008c28:	89fb      	ldrh	r3, [r7, #14]
}
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	3714      	adds	r7, #20
 8008c2e:	46bd      	mov	sp, r7
 8008c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c34:	4770      	bx	lr
 8008c36:	bf00      	nop
 8008c38:	08009820 	.word	0x08009820

08008c3c <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008c3c:	b480      	push	{r7}
 8008c3e:	b087      	sub	sp, #28
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	4603      	mov	r3, r0
 8008c44:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8008c46:	88fb      	ldrh	r3, [r7, #6]
 8008c48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008c4c:	d201      	bcs.n	8008c52 <ff_wtoupper+0x16>
 8008c4e:	4b3e      	ldr	r3, [pc, #248]	@ (8008d48 <ff_wtoupper+0x10c>)
 8008c50:	e000      	b.n	8008c54 <ff_wtoupper+0x18>
 8008c52:	4b3e      	ldr	r3, [pc, #248]	@ (8008d4c <ff_wtoupper+0x110>)
 8008c54:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8008c56:	697b      	ldr	r3, [r7, #20]
 8008c58:	1c9a      	adds	r2, r3, #2
 8008c5a:	617a      	str	r2, [r7, #20]
 8008c5c:	881b      	ldrh	r3, [r3, #0]
 8008c5e:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008c60:	8a7b      	ldrh	r3, [r7, #18]
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d068      	beq.n	8008d38 <ff_wtoupper+0xfc>
 8008c66:	88fa      	ldrh	r2, [r7, #6]
 8008c68:	8a7b      	ldrh	r3, [r7, #18]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d364      	bcc.n	8008d38 <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008c6e:	697b      	ldr	r3, [r7, #20]
 8008c70:	1c9a      	adds	r2, r3, #2
 8008c72:	617a      	str	r2, [r7, #20]
 8008c74:	881b      	ldrh	r3, [r3, #0]
 8008c76:	823b      	strh	r3, [r7, #16]
 8008c78:	8a3b      	ldrh	r3, [r7, #16]
 8008c7a:	0a1b      	lsrs	r3, r3, #8
 8008c7c:	81fb      	strh	r3, [r7, #14]
 8008c7e:	8a3b      	ldrh	r3, [r7, #16]
 8008c80:	b2db      	uxtb	r3, r3
 8008c82:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008c84:	88fa      	ldrh	r2, [r7, #6]
 8008c86:	8a79      	ldrh	r1, [r7, #18]
 8008c88:	8a3b      	ldrh	r3, [r7, #16]
 8008c8a:	440b      	add	r3, r1
 8008c8c:	429a      	cmp	r2, r3
 8008c8e:	da49      	bge.n	8008d24 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008c90:	89fb      	ldrh	r3, [r7, #14]
 8008c92:	2b08      	cmp	r3, #8
 8008c94:	d84f      	bhi.n	8008d36 <ff_wtoupper+0xfa>
 8008c96:	a201      	add	r2, pc, #4	@ (adr r2, 8008c9c <ff_wtoupper+0x60>)
 8008c98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c9c:	08008cc1 	.word	0x08008cc1
 8008ca0:	08008cd3 	.word	0x08008cd3
 8008ca4:	08008ce9 	.word	0x08008ce9
 8008ca8:	08008cf1 	.word	0x08008cf1
 8008cac:	08008cf9 	.word	0x08008cf9
 8008cb0:	08008d01 	.word	0x08008d01
 8008cb4:	08008d09 	.word	0x08008d09
 8008cb8:	08008d11 	.word	0x08008d11
 8008cbc:	08008d19 	.word	0x08008d19
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008cc0:	88fa      	ldrh	r2, [r7, #6]
 8008cc2:	8a7b      	ldrh	r3, [r7, #18]
 8008cc4:	1ad3      	subs	r3, r2, r3
 8008cc6:	005b      	lsls	r3, r3, #1
 8008cc8:	697a      	ldr	r2, [r7, #20]
 8008cca:	4413      	add	r3, r2
 8008ccc:	881b      	ldrh	r3, [r3, #0]
 8008cce:	80fb      	strh	r3, [r7, #6]
 8008cd0:	e027      	b.n	8008d22 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008cd2:	88fa      	ldrh	r2, [r7, #6]
 8008cd4:	8a7b      	ldrh	r3, [r7, #18]
 8008cd6:	1ad3      	subs	r3, r2, r3
 8008cd8:	b29b      	uxth	r3, r3
 8008cda:	f003 0301 	and.w	r3, r3, #1
 8008cde:	b29b      	uxth	r3, r3
 8008ce0:	88fa      	ldrh	r2, [r7, #6]
 8008ce2:	1ad3      	subs	r3, r2, r3
 8008ce4:	80fb      	strh	r3, [r7, #6]
 8008ce6:	e01c      	b.n	8008d22 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 8008ce8:	88fb      	ldrh	r3, [r7, #6]
 8008cea:	3b10      	subs	r3, #16
 8008cec:	80fb      	strh	r3, [r7, #6]
 8008cee:	e018      	b.n	8008d22 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8008cf0:	88fb      	ldrh	r3, [r7, #6]
 8008cf2:	3b20      	subs	r3, #32
 8008cf4:	80fb      	strh	r3, [r7, #6]
 8008cf6:	e014      	b.n	8008d22 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 8008cf8:	88fb      	ldrh	r3, [r7, #6]
 8008cfa:	3b30      	subs	r3, #48	@ 0x30
 8008cfc:	80fb      	strh	r3, [r7, #6]
 8008cfe:	e010      	b.n	8008d22 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8008d00:	88fb      	ldrh	r3, [r7, #6]
 8008d02:	3b1a      	subs	r3, #26
 8008d04:	80fb      	strh	r3, [r7, #6]
 8008d06:	e00c      	b.n	8008d22 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 8008d08:	88fb      	ldrh	r3, [r7, #6]
 8008d0a:	3308      	adds	r3, #8
 8008d0c:	80fb      	strh	r3, [r7, #6]
 8008d0e:	e008      	b.n	8008d22 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8008d10:	88fb      	ldrh	r3, [r7, #6]
 8008d12:	3b50      	subs	r3, #80	@ 0x50
 8008d14:	80fb      	strh	r3, [r7, #6]
 8008d16:	e004      	b.n	8008d22 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 8008d18:	88fb      	ldrh	r3, [r7, #6]
 8008d1a:	f5a3 53e3 	sub.w	r3, r3, #7264	@ 0x1c60
 8008d1e:	80fb      	strh	r3, [r7, #6]
 8008d20:	bf00      	nop
			}
			break;
 8008d22:	e008      	b.n	8008d36 <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8008d24:	89fb      	ldrh	r3, [r7, #14]
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d195      	bne.n	8008c56 <ff_wtoupper+0x1a>
 8008d2a:	8a3b      	ldrh	r3, [r7, #16]
 8008d2c:	005b      	lsls	r3, r3, #1
 8008d2e:	697a      	ldr	r2, [r7, #20]
 8008d30:	4413      	add	r3, r2
 8008d32:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8008d34:	e78f      	b.n	8008c56 <ff_wtoupper+0x1a>
			break;
 8008d36:	bf00      	nop
	}

	return chr;
 8008d38:	88fb      	ldrh	r3, [r7, #6]
}
 8008d3a:	4618      	mov	r0, r3
 8008d3c:	371c      	adds	r7, #28
 8008d3e:	46bd      	mov	sp, r7
 8008d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d44:	4770      	bx	lr
 8008d46:	bf00      	nop
 8008d48:	08009920 	.word	0x08009920
 8008d4c:	08009b14 	.word	0x08009b14

08008d50 <sniprintf>:
 8008d50:	b40c      	push	{r2, r3}
 8008d52:	b530      	push	{r4, r5, lr}
 8008d54:	4b17      	ldr	r3, [pc, #92]	@ (8008db4 <sniprintf+0x64>)
 8008d56:	1e0c      	subs	r4, r1, #0
 8008d58:	681d      	ldr	r5, [r3, #0]
 8008d5a:	b09d      	sub	sp, #116	@ 0x74
 8008d5c:	da08      	bge.n	8008d70 <sniprintf+0x20>
 8008d5e:	238b      	movs	r3, #139	@ 0x8b
 8008d60:	602b      	str	r3, [r5, #0]
 8008d62:	f04f 30ff 	mov.w	r0, #4294967295
 8008d66:	b01d      	add	sp, #116	@ 0x74
 8008d68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d6c:	b002      	add	sp, #8
 8008d6e:	4770      	bx	lr
 8008d70:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008d74:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008d78:	bf14      	ite	ne
 8008d7a:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008d7e:	4623      	moveq	r3, r4
 8008d80:	9304      	str	r3, [sp, #16]
 8008d82:	9307      	str	r3, [sp, #28]
 8008d84:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008d88:	9002      	str	r0, [sp, #8]
 8008d8a:	9006      	str	r0, [sp, #24]
 8008d8c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008d90:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008d92:	ab21      	add	r3, sp, #132	@ 0x84
 8008d94:	a902      	add	r1, sp, #8
 8008d96:	4628      	mov	r0, r5
 8008d98:	9301      	str	r3, [sp, #4]
 8008d9a:	f000 f9b5 	bl	8009108 <_svfiprintf_r>
 8008d9e:	1c43      	adds	r3, r0, #1
 8008da0:	bfbc      	itt	lt
 8008da2:	238b      	movlt	r3, #139	@ 0x8b
 8008da4:	602b      	strlt	r3, [r5, #0]
 8008da6:	2c00      	cmp	r4, #0
 8008da8:	d0dd      	beq.n	8008d66 <sniprintf+0x16>
 8008daa:	9b02      	ldr	r3, [sp, #8]
 8008dac:	2200      	movs	r2, #0
 8008dae:	701a      	strb	r2, [r3, #0]
 8008db0:	e7d9      	b.n	8008d66 <sniprintf+0x16>
 8008db2:	bf00      	nop
 8008db4:	20000024 	.word	0x20000024

08008db8 <siprintf>:
 8008db8:	b40e      	push	{r1, r2, r3}
 8008dba:	b500      	push	{lr}
 8008dbc:	b09c      	sub	sp, #112	@ 0x70
 8008dbe:	ab1d      	add	r3, sp, #116	@ 0x74
 8008dc0:	9002      	str	r0, [sp, #8]
 8008dc2:	9006      	str	r0, [sp, #24]
 8008dc4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008dc8:	4809      	ldr	r0, [pc, #36]	@ (8008df0 <siprintf+0x38>)
 8008dca:	9107      	str	r1, [sp, #28]
 8008dcc:	9104      	str	r1, [sp, #16]
 8008dce:	4909      	ldr	r1, [pc, #36]	@ (8008df4 <siprintf+0x3c>)
 8008dd0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008dd4:	9105      	str	r1, [sp, #20]
 8008dd6:	6800      	ldr	r0, [r0, #0]
 8008dd8:	9301      	str	r3, [sp, #4]
 8008dda:	a902      	add	r1, sp, #8
 8008ddc:	f000 f994 	bl	8009108 <_svfiprintf_r>
 8008de0:	9b02      	ldr	r3, [sp, #8]
 8008de2:	2200      	movs	r2, #0
 8008de4:	701a      	strb	r2, [r3, #0]
 8008de6:	b01c      	add	sp, #112	@ 0x70
 8008de8:	f85d eb04 	ldr.w	lr, [sp], #4
 8008dec:	b003      	add	sp, #12
 8008dee:	4770      	bx	lr
 8008df0:	20000024 	.word	0x20000024
 8008df4:	ffff0208 	.word	0xffff0208

08008df8 <memset>:
 8008df8:	4402      	add	r2, r0
 8008dfa:	4603      	mov	r3, r0
 8008dfc:	4293      	cmp	r3, r2
 8008dfe:	d100      	bne.n	8008e02 <memset+0xa>
 8008e00:	4770      	bx	lr
 8008e02:	f803 1b01 	strb.w	r1, [r3], #1
 8008e06:	e7f9      	b.n	8008dfc <memset+0x4>

08008e08 <__errno>:
 8008e08:	4b01      	ldr	r3, [pc, #4]	@ (8008e10 <__errno+0x8>)
 8008e0a:	6818      	ldr	r0, [r3, #0]
 8008e0c:	4770      	bx	lr
 8008e0e:	bf00      	nop
 8008e10:	20000024 	.word	0x20000024

08008e14 <__libc_init_array>:
 8008e14:	b570      	push	{r4, r5, r6, lr}
 8008e16:	4d0d      	ldr	r5, [pc, #52]	@ (8008e4c <__libc_init_array+0x38>)
 8008e18:	4c0d      	ldr	r4, [pc, #52]	@ (8008e50 <__libc_init_array+0x3c>)
 8008e1a:	1b64      	subs	r4, r4, r5
 8008e1c:	10a4      	asrs	r4, r4, #2
 8008e1e:	2600      	movs	r6, #0
 8008e20:	42a6      	cmp	r6, r4
 8008e22:	d109      	bne.n	8008e38 <__libc_init_array+0x24>
 8008e24:	4d0b      	ldr	r5, [pc, #44]	@ (8008e54 <__libc_init_array+0x40>)
 8008e26:	4c0c      	ldr	r4, [pc, #48]	@ (8008e58 <__libc_init_array+0x44>)
 8008e28:	f000 fc66 	bl	80096f8 <_init>
 8008e2c:	1b64      	subs	r4, r4, r5
 8008e2e:	10a4      	asrs	r4, r4, #2
 8008e30:	2600      	movs	r6, #0
 8008e32:	42a6      	cmp	r6, r4
 8008e34:	d105      	bne.n	8008e42 <__libc_init_array+0x2e>
 8008e36:	bd70      	pop	{r4, r5, r6, pc}
 8008e38:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e3c:	4798      	blx	r3
 8008e3e:	3601      	adds	r6, #1
 8008e40:	e7ee      	b.n	8008e20 <__libc_init_array+0xc>
 8008e42:	f855 3b04 	ldr.w	r3, [r5], #4
 8008e46:	4798      	blx	r3
 8008e48:	3601      	adds	r6, #1
 8008e4a:	e7f2      	b.n	8008e32 <__libc_init_array+0x1e>
 8008e4c:	08009c0c 	.word	0x08009c0c
 8008e50:	08009c0c 	.word	0x08009c0c
 8008e54:	08009c0c 	.word	0x08009c0c
 8008e58:	08009c10 	.word	0x08009c10

08008e5c <__retarget_lock_acquire_recursive>:
 8008e5c:	4770      	bx	lr

08008e5e <__retarget_lock_release_recursive>:
 8008e5e:	4770      	bx	lr

08008e60 <_free_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	4605      	mov	r5, r0
 8008e64:	2900      	cmp	r1, #0
 8008e66:	d041      	beq.n	8008eec <_free_r+0x8c>
 8008e68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e6c:	1f0c      	subs	r4, r1, #4
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	bfb8      	it	lt
 8008e72:	18e4      	addlt	r4, r4, r3
 8008e74:	f000 f8e0 	bl	8009038 <__malloc_lock>
 8008e78:	4a1d      	ldr	r2, [pc, #116]	@ (8008ef0 <_free_r+0x90>)
 8008e7a:	6813      	ldr	r3, [r2, #0]
 8008e7c:	b933      	cbnz	r3, 8008e8c <_free_r+0x2c>
 8008e7e:	6063      	str	r3, [r4, #4]
 8008e80:	6014      	str	r4, [r2, #0]
 8008e82:	4628      	mov	r0, r5
 8008e84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e88:	f000 b8dc 	b.w	8009044 <__malloc_unlock>
 8008e8c:	42a3      	cmp	r3, r4
 8008e8e:	d908      	bls.n	8008ea2 <_free_r+0x42>
 8008e90:	6820      	ldr	r0, [r4, #0]
 8008e92:	1821      	adds	r1, r4, r0
 8008e94:	428b      	cmp	r3, r1
 8008e96:	bf01      	itttt	eq
 8008e98:	6819      	ldreq	r1, [r3, #0]
 8008e9a:	685b      	ldreq	r3, [r3, #4]
 8008e9c:	1809      	addeq	r1, r1, r0
 8008e9e:	6021      	streq	r1, [r4, #0]
 8008ea0:	e7ed      	b.n	8008e7e <_free_r+0x1e>
 8008ea2:	461a      	mov	r2, r3
 8008ea4:	685b      	ldr	r3, [r3, #4]
 8008ea6:	b10b      	cbz	r3, 8008eac <_free_r+0x4c>
 8008ea8:	42a3      	cmp	r3, r4
 8008eaa:	d9fa      	bls.n	8008ea2 <_free_r+0x42>
 8008eac:	6811      	ldr	r1, [r2, #0]
 8008eae:	1850      	adds	r0, r2, r1
 8008eb0:	42a0      	cmp	r0, r4
 8008eb2:	d10b      	bne.n	8008ecc <_free_r+0x6c>
 8008eb4:	6820      	ldr	r0, [r4, #0]
 8008eb6:	4401      	add	r1, r0
 8008eb8:	1850      	adds	r0, r2, r1
 8008eba:	4283      	cmp	r3, r0
 8008ebc:	6011      	str	r1, [r2, #0]
 8008ebe:	d1e0      	bne.n	8008e82 <_free_r+0x22>
 8008ec0:	6818      	ldr	r0, [r3, #0]
 8008ec2:	685b      	ldr	r3, [r3, #4]
 8008ec4:	6053      	str	r3, [r2, #4]
 8008ec6:	4408      	add	r0, r1
 8008ec8:	6010      	str	r0, [r2, #0]
 8008eca:	e7da      	b.n	8008e82 <_free_r+0x22>
 8008ecc:	d902      	bls.n	8008ed4 <_free_r+0x74>
 8008ece:	230c      	movs	r3, #12
 8008ed0:	602b      	str	r3, [r5, #0]
 8008ed2:	e7d6      	b.n	8008e82 <_free_r+0x22>
 8008ed4:	6820      	ldr	r0, [r4, #0]
 8008ed6:	1821      	adds	r1, r4, r0
 8008ed8:	428b      	cmp	r3, r1
 8008eda:	bf04      	itt	eq
 8008edc:	6819      	ldreq	r1, [r3, #0]
 8008ede:	685b      	ldreq	r3, [r3, #4]
 8008ee0:	6063      	str	r3, [r4, #4]
 8008ee2:	bf04      	itt	eq
 8008ee4:	1809      	addeq	r1, r1, r0
 8008ee6:	6021      	streq	r1, [r4, #0]
 8008ee8:	6054      	str	r4, [r2, #4]
 8008eea:	e7ca      	b.n	8008e82 <_free_r+0x22>
 8008eec:	bd38      	pop	{r3, r4, r5, pc}
 8008eee:	bf00      	nop
 8008ef0:	20002654 	.word	0x20002654

08008ef4 <sbrk_aligned>:
 8008ef4:	b570      	push	{r4, r5, r6, lr}
 8008ef6:	4e0f      	ldr	r6, [pc, #60]	@ (8008f34 <sbrk_aligned+0x40>)
 8008ef8:	460c      	mov	r4, r1
 8008efa:	6831      	ldr	r1, [r6, #0]
 8008efc:	4605      	mov	r5, r0
 8008efe:	b911      	cbnz	r1, 8008f06 <sbrk_aligned+0x12>
 8008f00:	f000 fba6 	bl	8009650 <_sbrk_r>
 8008f04:	6030      	str	r0, [r6, #0]
 8008f06:	4621      	mov	r1, r4
 8008f08:	4628      	mov	r0, r5
 8008f0a:	f000 fba1 	bl	8009650 <_sbrk_r>
 8008f0e:	1c43      	adds	r3, r0, #1
 8008f10:	d103      	bne.n	8008f1a <sbrk_aligned+0x26>
 8008f12:	f04f 34ff 	mov.w	r4, #4294967295
 8008f16:	4620      	mov	r0, r4
 8008f18:	bd70      	pop	{r4, r5, r6, pc}
 8008f1a:	1cc4      	adds	r4, r0, #3
 8008f1c:	f024 0403 	bic.w	r4, r4, #3
 8008f20:	42a0      	cmp	r0, r4
 8008f22:	d0f8      	beq.n	8008f16 <sbrk_aligned+0x22>
 8008f24:	1a21      	subs	r1, r4, r0
 8008f26:	4628      	mov	r0, r5
 8008f28:	f000 fb92 	bl	8009650 <_sbrk_r>
 8008f2c:	3001      	adds	r0, #1
 8008f2e:	d1f2      	bne.n	8008f16 <sbrk_aligned+0x22>
 8008f30:	e7ef      	b.n	8008f12 <sbrk_aligned+0x1e>
 8008f32:	bf00      	nop
 8008f34:	20002650 	.word	0x20002650

08008f38 <_malloc_r>:
 8008f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f3c:	1ccd      	adds	r5, r1, #3
 8008f3e:	f025 0503 	bic.w	r5, r5, #3
 8008f42:	3508      	adds	r5, #8
 8008f44:	2d0c      	cmp	r5, #12
 8008f46:	bf38      	it	cc
 8008f48:	250c      	movcc	r5, #12
 8008f4a:	2d00      	cmp	r5, #0
 8008f4c:	4606      	mov	r6, r0
 8008f4e:	db01      	blt.n	8008f54 <_malloc_r+0x1c>
 8008f50:	42a9      	cmp	r1, r5
 8008f52:	d904      	bls.n	8008f5e <_malloc_r+0x26>
 8008f54:	230c      	movs	r3, #12
 8008f56:	6033      	str	r3, [r6, #0]
 8008f58:	2000      	movs	r0, #0
 8008f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f5e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009034 <_malloc_r+0xfc>
 8008f62:	f000 f869 	bl	8009038 <__malloc_lock>
 8008f66:	f8d8 3000 	ldr.w	r3, [r8]
 8008f6a:	461c      	mov	r4, r3
 8008f6c:	bb44      	cbnz	r4, 8008fc0 <_malloc_r+0x88>
 8008f6e:	4629      	mov	r1, r5
 8008f70:	4630      	mov	r0, r6
 8008f72:	f7ff ffbf 	bl	8008ef4 <sbrk_aligned>
 8008f76:	1c43      	adds	r3, r0, #1
 8008f78:	4604      	mov	r4, r0
 8008f7a:	d158      	bne.n	800902e <_malloc_r+0xf6>
 8008f7c:	f8d8 4000 	ldr.w	r4, [r8]
 8008f80:	4627      	mov	r7, r4
 8008f82:	2f00      	cmp	r7, #0
 8008f84:	d143      	bne.n	800900e <_malloc_r+0xd6>
 8008f86:	2c00      	cmp	r4, #0
 8008f88:	d04b      	beq.n	8009022 <_malloc_r+0xea>
 8008f8a:	6823      	ldr	r3, [r4, #0]
 8008f8c:	4639      	mov	r1, r7
 8008f8e:	4630      	mov	r0, r6
 8008f90:	eb04 0903 	add.w	r9, r4, r3
 8008f94:	f000 fb5c 	bl	8009650 <_sbrk_r>
 8008f98:	4581      	cmp	r9, r0
 8008f9a:	d142      	bne.n	8009022 <_malloc_r+0xea>
 8008f9c:	6821      	ldr	r1, [r4, #0]
 8008f9e:	1a6d      	subs	r5, r5, r1
 8008fa0:	4629      	mov	r1, r5
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	f7ff ffa6 	bl	8008ef4 <sbrk_aligned>
 8008fa8:	3001      	adds	r0, #1
 8008faa:	d03a      	beq.n	8009022 <_malloc_r+0xea>
 8008fac:	6823      	ldr	r3, [r4, #0]
 8008fae:	442b      	add	r3, r5
 8008fb0:	6023      	str	r3, [r4, #0]
 8008fb2:	f8d8 3000 	ldr.w	r3, [r8]
 8008fb6:	685a      	ldr	r2, [r3, #4]
 8008fb8:	bb62      	cbnz	r2, 8009014 <_malloc_r+0xdc>
 8008fba:	f8c8 7000 	str.w	r7, [r8]
 8008fbe:	e00f      	b.n	8008fe0 <_malloc_r+0xa8>
 8008fc0:	6822      	ldr	r2, [r4, #0]
 8008fc2:	1b52      	subs	r2, r2, r5
 8008fc4:	d420      	bmi.n	8009008 <_malloc_r+0xd0>
 8008fc6:	2a0b      	cmp	r2, #11
 8008fc8:	d917      	bls.n	8008ffa <_malloc_r+0xc2>
 8008fca:	1961      	adds	r1, r4, r5
 8008fcc:	42a3      	cmp	r3, r4
 8008fce:	6025      	str	r5, [r4, #0]
 8008fd0:	bf18      	it	ne
 8008fd2:	6059      	strne	r1, [r3, #4]
 8008fd4:	6863      	ldr	r3, [r4, #4]
 8008fd6:	bf08      	it	eq
 8008fd8:	f8c8 1000 	streq.w	r1, [r8]
 8008fdc:	5162      	str	r2, [r4, r5]
 8008fde:	604b      	str	r3, [r1, #4]
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	f000 f82f 	bl	8009044 <__malloc_unlock>
 8008fe6:	f104 000b 	add.w	r0, r4, #11
 8008fea:	1d23      	adds	r3, r4, #4
 8008fec:	f020 0007 	bic.w	r0, r0, #7
 8008ff0:	1ac2      	subs	r2, r0, r3
 8008ff2:	bf1c      	itt	ne
 8008ff4:	1a1b      	subne	r3, r3, r0
 8008ff6:	50a3      	strne	r3, [r4, r2]
 8008ff8:	e7af      	b.n	8008f5a <_malloc_r+0x22>
 8008ffa:	6862      	ldr	r2, [r4, #4]
 8008ffc:	42a3      	cmp	r3, r4
 8008ffe:	bf0c      	ite	eq
 8009000:	f8c8 2000 	streq.w	r2, [r8]
 8009004:	605a      	strne	r2, [r3, #4]
 8009006:	e7eb      	b.n	8008fe0 <_malloc_r+0xa8>
 8009008:	4623      	mov	r3, r4
 800900a:	6864      	ldr	r4, [r4, #4]
 800900c:	e7ae      	b.n	8008f6c <_malloc_r+0x34>
 800900e:	463c      	mov	r4, r7
 8009010:	687f      	ldr	r7, [r7, #4]
 8009012:	e7b6      	b.n	8008f82 <_malloc_r+0x4a>
 8009014:	461a      	mov	r2, r3
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	42a3      	cmp	r3, r4
 800901a:	d1fb      	bne.n	8009014 <_malloc_r+0xdc>
 800901c:	2300      	movs	r3, #0
 800901e:	6053      	str	r3, [r2, #4]
 8009020:	e7de      	b.n	8008fe0 <_malloc_r+0xa8>
 8009022:	230c      	movs	r3, #12
 8009024:	6033      	str	r3, [r6, #0]
 8009026:	4630      	mov	r0, r6
 8009028:	f000 f80c 	bl	8009044 <__malloc_unlock>
 800902c:	e794      	b.n	8008f58 <_malloc_r+0x20>
 800902e:	6005      	str	r5, [r0, #0]
 8009030:	e7d6      	b.n	8008fe0 <_malloc_r+0xa8>
 8009032:	bf00      	nop
 8009034:	20002654 	.word	0x20002654

08009038 <__malloc_lock>:
 8009038:	4801      	ldr	r0, [pc, #4]	@ (8009040 <__malloc_lock+0x8>)
 800903a:	f7ff bf0f 	b.w	8008e5c <__retarget_lock_acquire_recursive>
 800903e:	bf00      	nop
 8009040:	2000264c 	.word	0x2000264c

08009044 <__malloc_unlock>:
 8009044:	4801      	ldr	r0, [pc, #4]	@ (800904c <__malloc_unlock+0x8>)
 8009046:	f7ff bf0a 	b.w	8008e5e <__retarget_lock_release_recursive>
 800904a:	bf00      	nop
 800904c:	2000264c 	.word	0x2000264c

08009050 <__ssputs_r>:
 8009050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009054:	688e      	ldr	r6, [r1, #8]
 8009056:	461f      	mov	r7, r3
 8009058:	42be      	cmp	r6, r7
 800905a:	680b      	ldr	r3, [r1, #0]
 800905c:	4682      	mov	sl, r0
 800905e:	460c      	mov	r4, r1
 8009060:	4690      	mov	r8, r2
 8009062:	d82d      	bhi.n	80090c0 <__ssputs_r+0x70>
 8009064:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009068:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800906c:	d026      	beq.n	80090bc <__ssputs_r+0x6c>
 800906e:	6965      	ldr	r5, [r4, #20]
 8009070:	6909      	ldr	r1, [r1, #16]
 8009072:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009076:	eba3 0901 	sub.w	r9, r3, r1
 800907a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800907e:	1c7b      	adds	r3, r7, #1
 8009080:	444b      	add	r3, r9
 8009082:	106d      	asrs	r5, r5, #1
 8009084:	429d      	cmp	r5, r3
 8009086:	bf38      	it	cc
 8009088:	461d      	movcc	r5, r3
 800908a:	0553      	lsls	r3, r2, #21
 800908c:	d527      	bpl.n	80090de <__ssputs_r+0x8e>
 800908e:	4629      	mov	r1, r5
 8009090:	f7ff ff52 	bl	8008f38 <_malloc_r>
 8009094:	4606      	mov	r6, r0
 8009096:	b360      	cbz	r0, 80090f2 <__ssputs_r+0xa2>
 8009098:	6921      	ldr	r1, [r4, #16]
 800909a:	464a      	mov	r2, r9
 800909c:	f000 fae8 	bl	8009670 <memcpy>
 80090a0:	89a3      	ldrh	r3, [r4, #12]
 80090a2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80090a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090aa:	81a3      	strh	r3, [r4, #12]
 80090ac:	6126      	str	r6, [r4, #16]
 80090ae:	6165      	str	r5, [r4, #20]
 80090b0:	444e      	add	r6, r9
 80090b2:	eba5 0509 	sub.w	r5, r5, r9
 80090b6:	6026      	str	r6, [r4, #0]
 80090b8:	60a5      	str	r5, [r4, #8]
 80090ba:	463e      	mov	r6, r7
 80090bc:	42be      	cmp	r6, r7
 80090be:	d900      	bls.n	80090c2 <__ssputs_r+0x72>
 80090c0:	463e      	mov	r6, r7
 80090c2:	6820      	ldr	r0, [r4, #0]
 80090c4:	4632      	mov	r2, r6
 80090c6:	4641      	mov	r1, r8
 80090c8:	f000 faa8 	bl	800961c <memmove>
 80090cc:	68a3      	ldr	r3, [r4, #8]
 80090ce:	1b9b      	subs	r3, r3, r6
 80090d0:	60a3      	str	r3, [r4, #8]
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	4433      	add	r3, r6
 80090d6:	6023      	str	r3, [r4, #0]
 80090d8:	2000      	movs	r0, #0
 80090da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090de:	462a      	mov	r2, r5
 80090e0:	f000 fad4 	bl	800968c <_realloc_r>
 80090e4:	4606      	mov	r6, r0
 80090e6:	2800      	cmp	r0, #0
 80090e8:	d1e0      	bne.n	80090ac <__ssputs_r+0x5c>
 80090ea:	6921      	ldr	r1, [r4, #16]
 80090ec:	4650      	mov	r0, sl
 80090ee:	f7ff feb7 	bl	8008e60 <_free_r>
 80090f2:	230c      	movs	r3, #12
 80090f4:	f8ca 3000 	str.w	r3, [sl]
 80090f8:	89a3      	ldrh	r3, [r4, #12]
 80090fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090fe:	81a3      	strh	r3, [r4, #12]
 8009100:	f04f 30ff 	mov.w	r0, #4294967295
 8009104:	e7e9      	b.n	80090da <__ssputs_r+0x8a>
	...

08009108 <_svfiprintf_r>:
 8009108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800910c:	4698      	mov	r8, r3
 800910e:	898b      	ldrh	r3, [r1, #12]
 8009110:	061b      	lsls	r3, r3, #24
 8009112:	b09d      	sub	sp, #116	@ 0x74
 8009114:	4607      	mov	r7, r0
 8009116:	460d      	mov	r5, r1
 8009118:	4614      	mov	r4, r2
 800911a:	d510      	bpl.n	800913e <_svfiprintf_r+0x36>
 800911c:	690b      	ldr	r3, [r1, #16]
 800911e:	b973      	cbnz	r3, 800913e <_svfiprintf_r+0x36>
 8009120:	2140      	movs	r1, #64	@ 0x40
 8009122:	f7ff ff09 	bl	8008f38 <_malloc_r>
 8009126:	6028      	str	r0, [r5, #0]
 8009128:	6128      	str	r0, [r5, #16]
 800912a:	b930      	cbnz	r0, 800913a <_svfiprintf_r+0x32>
 800912c:	230c      	movs	r3, #12
 800912e:	603b      	str	r3, [r7, #0]
 8009130:	f04f 30ff 	mov.w	r0, #4294967295
 8009134:	b01d      	add	sp, #116	@ 0x74
 8009136:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800913a:	2340      	movs	r3, #64	@ 0x40
 800913c:	616b      	str	r3, [r5, #20]
 800913e:	2300      	movs	r3, #0
 8009140:	9309      	str	r3, [sp, #36]	@ 0x24
 8009142:	2320      	movs	r3, #32
 8009144:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009148:	f8cd 800c 	str.w	r8, [sp, #12]
 800914c:	2330      	movs	r3, #48	@ 0x30
 800914e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80092ec <_svfiprintf_r+0x1e4>
 8009152:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009156:	f04f 0901 	mov.w	r9, #1
 800915a:	4623      	mov	r3, r4
 800915c:	469a      	mov	sl, r3
 800915e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009162:	b10a      	cbz	r2, 8009168 <_svfiprintf_r+0x60>
 8009164:	2a25      	cmp	r2, #37	@ 0x25
 8009166:	d1f9      	bne.n	800915c <_svfiprintf_r+0x54>
 8009168:	ebba 0b04 	subs.w	fp, sl, r4
 800916c:	d00b      	beq.n	8009186 <_svfiprintf_r+0x7e>
 800916e:	465b      	mov	r3, fp
 8009170:	4622      	mov	r2, r4
 8009172:	4629      	mov	r1, r5
 8009174:	4638      	mov	r0, r7
 8009176:	f7ff ff6b 	bl	8009050 <__ssputs_r>
 800917a:	3001      	adds	r0, #1
 800917c:	f000 80a7 	beq.w	80092ce <_svfiprintf_r+0x1c6>
 8009180:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009182:	445a      	add	r2, fp
 8009184:	9209      	str	r2, [sp, #36]	@ 0x24
 8009186:	f89a 3000 	ldrb.w	r3, [sl]
 800918a:	2b00      	cmp	r3, #0
 800918c:	f000 809f 	beq.w	80092ce <_svfiprintf_r+0x1c6>
 8009190:	2300      	movs	r3, #0
 8009192:	f04f 32ff 	mov.w	r2, #4294967295
 8009196:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800919a:	f10a 0a01 	add.w	sl, sl, #1
 800919e:	9304      	str	r3, [sp, #16]
 80091a0:	9307      	str	r3, [sp, #28]
 80091a2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091a6:	931a      	str	r3, [sp, #104]	@ 0x68
 80091a8:	4654      	mov	r4, sl
 80091aa:	2205      	movs	r2, #5
 80091ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091b0:	484e      	ldr	r0, [pc, #312]	@ (80092ec <_svfiprintf_r+0x1e4>)
 80091b2:	f7f7 f81d 	bl	80001f0 <memchr>
 80091b6:	9a04      	ldr	r2, [sp, #16]
 80091b8:	b9d8      	cbnz	r0, 80091f2 <_svfiprintf_r+0xea>
 80091ba:	06d0      	lsls	r0, r2, #27
 80091bc:	bf44      	itt	mi
 80091be:	2320      	movmi	r3, #32
 80091c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091c4:	0711      	lsls	r1, r2, #28
 80091c6:	bf44      	itt	mi
 80091c8:	232b      	movmi	r3, #43	@ 0x2b
 80091ca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091ce:	f89a 3000 	ldrb.w	r3, [sl]
 80091d2:	2b2a      	cmp	r3, #42	@ 0x2a
 80091d4:	d015      	beq.n	8009202 <_svfiprintf_r+0xfa>
 80091d6:	9a07      	ldr	r2, [sp, #28]
 80091d8:	4654      	mov	r4, sl
 80091da:	2000      	movs	r0, #0
 80091dc:	f04f 0c0a 	mov.w	ip, #10
 80091e0:	4621      	mov	r1, r4
 80091e2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091e6:	3b30      	subs	r3, #48	@ 0x30
 80091e8:	2b09      	cmp	r3, #9
 80091ea:	d94b      	bls.n	8009284 <_svfiprintf_r+0x17c>
 80091ec:	b1b0      	cbz	r0, 800921c <_svfiprintf_r+0x114>
 80091ee:	9207      	str	r2, [sp, #28]
 80091f0:	e014      	b.n	800921c <_svfiprintf_r+0x114>
 80091f2:	eba0 0308 	sub.w	r3, r0, r8
 80091f6:	fa09 f303 	lsl.w	r3, r9, r3
 80091fa:	4313      	orrs	r3, r2
 80091fc:	9304      	str	r3, [sp, #16]
 80091fe:	46a2      	mov	sl, r4
 8009200:	e7d2      	b.n	80091a8 <_svfiprintf_r+0xa0>
 8009202:	9b03      	ldr	r3, [sp, #12]
 8009204:	1d19      	adds	r1, r3, #4
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	9103      	str	r1, [sp, #12]
 800920a:	2b00      	cmp	r3, #0
 800920c:	bfbb      	ittet	lt
 800920e:	425b      	neglt	r3, r3
 8009210:	f042 0202 	orrlt.w	r2, r2, #2
 8009214:	9307      	strge	r3, [sp, #28]
 8009216:	9307      	strlt	r3, [sp, #28]
 8009218:	bfb8      	it	lt
 800921a:	9204      	strlt	r2, [sp, #16]
 800921c:	7823      	ldrb	r3, [r4, #0]
 800921e:	2b2e      	cmp	r3, #46	@ 0x2e
 8009220:	d10a      	bne.n	8009238 <_svfiprintf_r+0x130>
 8009222:	7863      	ldrb	r3, [r4, #1]
 8009224:	2b2a      	cmp	r3, #42	@ 0x2a
 8009226:	d132      	bne.n	800928e <_svfiprintf_r+0x186>
 8009228:	9b03      	ldr	r3, [sp, #12]
 800922a:	1d1a      	adds	r2, r3, #4
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	9203      	str	r2, [sp, #12]
 8009230:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009234:	3402      	adds	r4, #2
 8009236:	9305      	str	r3, [sp, #20]
 8009238:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80092fc <_svfiprintf_r+0x1f4>
 800923c:	7821      	ldrb	r1, [r4, #0]
 800923e:	2203      	movs	r2, #3
 8009240:	4650      	mov	r0, sl
 8009242:	f7f6 ffd5 	bl	80001f0 <memchr>
 8009246:	b138      	cbz	r0, 8009258 <_svfiprintf_r+0x150>
 8009248:	9b04      	ldr	r3, [sp, #16]
 800924a:	eba0 000a 	sub.w	r0, r0, sl
 800924e:	2240      	movs	r2, #64	@ 0x40
 8009250:	4082      	lsls	r2, r0
 8009252:	4313      	orrs	r3, r2
 8009254:	3401      	adds	r4, #1
 8009256:	9304      	str	r3, [sp, #16]
 8009258:	f814 1b01 	ldrb.w	r1, [r4], #1
 800925c:	4824      	ldr	r0, [pc, #144]	@ (80092f0 <_svfiprintf_r+0x1e8>)
 800925e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009262:	2206      	movs	r2, #6
 8009264:	f7f6 ffc4 	bl	80001f0 <memchr>
 8009268:	2800      	cmp	r0, #0
 800926a:	d036      	beq.n	80092da <_svfiprintf_r+0x1d2>
 800926c:	4b21      	ldr	r3, [pc, #132]	@ (80092f4 <_svfiprintf_r+0x1ec>)
 800926e:	bb1b      	cbnz	r3, 80092b8 <_svfiprintf_r+0x1b0>
 8009270:	9b03      	ldr	r3, [sp, #12]
 8009272:	3307      	adds	r3, #7
 8009274:	f023 0307 	bic.w	r3, r3, #7
 8009278:	3308      	adds	r3, #8
 800927a:	9303      	str	r3, [sp, #12]
 800927c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800927e:	4433      	add	r3, r6
 8009280:	9309      	str	r3, [sp, #36]	@ 0x24
 8009282:	e76a      	b.n	800915a <_svfiprintf_r+0x52>
 8009284:	fb0c 3202 	mla	r2, ip, r2, r3
 8009288:	460c      	mov	r4, r1
 800928a:	2001      	movs	r0, #1
 800928c:	e7a8      	b.n	80091e0 <_svfiprintf_r+0xd8>
 800928e:	2300      	movs	r3, #0
 8009290:	3401      	adds	r4, #1
 8009292:	9305      	str	r3, [sp, #20]
 8009294:	4619      	mov	r1, r3
 8009296:	f04f 0c0a 	mov.w	ip, #10
 800929a:	4620      	mov	r0, r4
 800929c:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092a0:	3a30      	subs	r2, #48	@ 0x30
 80092a2:	2a09      	cmp	r2, #9
 80092a4:	d903      	bls.n	80092ae <_svfiprintf_r+0x1a6>
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d0c6      	beq.n	8009238 <_svfiprintf_r+0x130>
 80092aa:	9105      	str	r1, [sp, #20]
 80092ac:	e7c4      	b.n	8009238 <_svfiprintf_r+0x130>
 80092ae:	fb0c 2101 	mla	r1, ip, r1, r2
 80092b2:	4604      	mov	r4, r0
 80092b4:	2301      	movs	r3, #1
 80092b6:	e7f0      	b.n	800929a <_svfiprintf_r+0x192>
 80092b8:	ab03      	add	r3, sp, #12
 80092ba:	9300      	str	r3, [sp, #0]
 80092bc:	462a      	mov	r2, r5
 80092be:	4b0e      	ldr	r3, [pc, #56]	@ (80092f8 <_svfiprintf_r+0x1f0>)
 80092c0:	a904      	add	r1, sp, #16
 80092c2:	4638      	mov	r0, r7
 80092c4:	f3af 8000 	nop.w
 80092c8:	1c42      	adds	r2, r0, #1
 80092ca:	4606      	mov	r6, r0
 80092cc:	d1d6      	bne.n	800927c <_svfiprintf_r+0x174>
 80092ce:	89ab      	ldrh	r3, [r5, #12]
 80092d0:	065b      	lsls	r3, r3, #25
 80092d2:	f53f af2d 	bmi.w	8009130 <_svfiprintf_r+0x28>
 80092d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092d8:	e72c      	b.n	8009134 <_svfiprintf_r+0x2c>
 80092da:	ab03      	add	r3, sp, #12
 80092dc:	9300      	str	r3, [sp, #0]
 80092de:	462a      	mov	r2, r5
 80092e0:	4b05      	ldr	r3, [pc, #20]	@ (80092f8 <_svfiprintf_r+0x1f0>)
 80092e2:	a904      	add	r1, sp, #16
 80092e4:	4638      	mov	r0, r7
 80092e6:	f000 f879 	bl	80093dc <_printf_i>
 80092ea:	e7ed      	b.n	80092c8 <_svfiprintf_r+0x1c0>
 80092ec:	08009bd0 	.word	0x08009bd0
 80092f0:	08009bda 	.word	0x08009bda
 80092f4:	00000000 	.word	0x00000000
 80092f8:	08009051 	.word	0x08009051
 80092fc:	08009bd6 	.word	0x08009bd6

08009300 <_printf_common>:
 8009300:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009304:	4616      	mov	r6, r2
 8009306:	4698      	mov	r8, r3
 8009308:	688a      	ldr	r2, [r1, #8]
 800930a:	690b      	ldr	r3, [r1, #16]
 800930c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009310:	4293      	cmp	r3, r2
 8009312:	bfb8      	it	lt
 8009314:	4613      	movlt	r3, r2
 8009316:	6033      	str	r3, [r6, #0]
 8009318:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800931c:	4607      	mov	r7, r0
 800931e:	460c      	mov	r4, r1
 8009320:	b10a      	cbz	r2, 8009326 <_printf_common+0x26>
 8009322:	3301      	adds	r3, #1
 8009324:	6033      	str	r3, [r6, #0]
 8009326:	6823      	ldr	r3, [r4, #0]
 8009328:	0699      	lsls	r1, r3, #26
 800932a:	bf42      	ittt	mi
 800932c:	6833      	ldrmi	r3, [r6, #0]
 800932e:	3302      	addmi	r3, #2
 8009330:	6033      	strmi	r3, [r6, #0]
 8009332:	6825      	ldr	r5, [r4, #0]
 8009334:	f015 0506 	ands.w	r5, r5, #6
 8009338:	d106      	bne.n	8009348 <_printf_common+0x48>
 800933a:	f104 0a19 	add.w	sl, r4, #25
 800933e:	68e3      	ldr	r3, [r4, #12]
 8009340:	6832      	ldr	r2, [r6, #0]
 8009342:	1a9b      	subs	r3, r3, r2
 8009344:	42ab      	cmp	r3, r5
 8009346:	dc26      	bgt.n	8009396 <_printf_common+0x96>
 8009348:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800934c:	6822      	ldr	r2, [r4, #0]
 800934e:	3b00      	subs	r3, #0
 8009350:	bf18      	it	ne
 8009352:	2301      	movne	r3, #1
 8009354:	0692      	lsls	r2, r2, #26
 8009356:	d42b      	bmi.n	80093b0 <_printf_common+0xb0>
 8009358:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800935c:	4641      	mov	r1, r8
 800935e:	4638      	mov	r0, r7
 8009360:	47c8      	blx	r9
 8009362:	3001      	adds	r0, #1
 8009364:	d01e      	beq.n	80093a4 <_printf_common+0xa4>
 8009366:	6823      	ldr	r3, [r4, #0]
 8009368:	6922      	ldr	r2, [r4, #16]
 800936a:	f003 0306 	and.w	r3, r3, #6
 800936e:	2b04      	cmp	r3, #4
 8009370:	bf02      	ittt	eq
 8009372:	68e5      	ldreq	r5, [r4, #12]
 8009374:	6833      	ldreq	r3, [r6, #0]
 8009376:	1aed      	subeq	r5, r5, r3
 8009378:	68a3      	ldr	r3, [r4, #8]
 800937a:	bf0c      	ite	eq
 800937c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009380:	2500      	movne	r5, #0
 8009382:	4293      	cmp	r3, r2
 8009384:	bfc4      	itt	gt
 8009386:	1a9b      	subgt	r3, r3, r2
 8009388:	18ed      	addgt	r5, r5, r3
 800938a:	2600      	movs	r6, #0
 800938c:	341a      	adds	r4, #26
 800938e:	42b5      	cmp	r5, r6
 8009390:	d11a      	bne.n	80093c8 <_printf_common+0xc8>
 8009392:	2000      	movs	r0, #0
 8009394:	e008      	b.n	80093a8 <_printf_common+0xa8>
 8009396:	2301      	movs	r3, #1
 8009398:	4652      	mov	r2, sl
 800939a:	4641      	mov	r1, r8
 800939c:	4638      	mov	r0, r7
 800939e:	47c8      	blx	r9
 80093a0:	3001      	adds	r0, #1
 80093a2:	d103      	bne.n	80093ac <_printf_common+0xac>
 80093a4:	f04f 30ff 	mov.w	r0, #4294967295
 80093a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ac:	3501      	adds	r5, #1
 80093ae:	e7c6      	b.n	800933e <_printf_common+0x3e>
 80093b0:	18e1      	adds	r1, r4, r3
 80093b2:	1c5a      	adds	r2, r3, #1
 80093b4:	2030      	movs	r0, #48	@ 0x30
 80093b6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80093ba:	4422      	add	r2, r4
 80093bc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80093c0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80093c4:	3302      	adds	r3, #2
 80093c6:	e7c7      	b.n	8009358 <_printf_common+0x58>
 80093c8:	2301      	movs	r3, #1
 80093ca:	4622      	mov	r2, r4
 80093cc:	4641      	mov	r1, r8
 80093ce:	4638      	mov	r0, r7
 80093d0:	47c8      	blx	r9
 80093d2:	3001      	adds	r0, #1
 80093d4:	d0e6      	beq.n	80093a4 <_printf_common+0xa4>
 80093d6:	3601      	adds	r6, #1
 80093d8:	e7d9      	b.n	800938e <_printf_common+0x8e>
	...

080093dc <_printf_i>:
 80093dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093e0:	7e0f      	ldrb	r7, [r1, #24]
 80093e2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80093e4:	2f78      	cmp	r7, #120	@ 0x78
 80093e6:	4691      	mov	r9, r2
 80093e8:	4680      	mov	r8, r0
 80093ea:	460c      	mov	r4, r1
 80093ec:	469a      	mov	sl, r3
 80093ee:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80093f2:	d807      	bhi.n	8009404 <_printf_i+0x28>
 80093f4:	2f62      	cmp	r7, #98	@ 0x62
 80093f6:	d80a      	bhi.n	800940e <_printf_i+0x32>
 80093f8:	2f00      	cmp	r7, #0
 80093fa:	f000 80d2 	beq.w	80095a2 <_printf_i+0x1c6>
 80093fe:	2f58      	cmp	r7, #88	@ 0x58
 8009400:	f000 80b9 	beq.w	8009576 <_printf_i+0x19a>
 8009404:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009408:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800940c:	e03a      	b.n	8009484 <_printf_i+0xa8>
 800940e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009412:	2b15      	cmp	r3, #21
 8009414:	d8f6      	bhi.n	8009404 <_printf_i+0x28>
 8009416:	a101      	add	r1, pc, #4	@ (adr r1, 800941c <_printf_i+0x40>)
 8009418:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800941c:	08009475 	.word	0x08009475
 8009420:	08009489 	.word	0x08009489
 8009424:	08009405 	.word	0x08009405
 8009428:	08009405 	.word	0x08009405
 800942c:	08009405 	.word	0x08009405
 8009430:	08009405 	.word	0x08009405
 8009434:	08009489 	.word	0x08009489
 8009438:	08009405 	.word	0x08009405
 800943c:	08009405 	.word	0x08009405
 8009440:	08009405 	.word	0x08009405
 8009444:	08009405 	.word	0x08009405
 8009448:	08009589 	.word	0x08009589
 800944c:	080094b3 	.word	0x080094b3
 8009450:	08009543 	.word	0x08009543
 8009454:	08009405 	.word	0x08009405
 8009458:	08009405 	.word	0x08009405
 800945c:	080095ab 	.word	0x080095ab
 8009460:	08009405 	.word	0x08009405
 8009464:	080094b3 	.word	0x080094b3
 8009468:	08009405 	.word	0x08009405
 800946c:	08009405 	.word	0x08009405
 8009470:	0800954b 	.word	0x0800954b
 8009474:	6833      	ldr	r3, [r6, #0]
 8009476:	1d1a      	adds	r2, r3, #4
 8009478:	681b      	ldr	r3, [r3, #0]
 800947a:	6032      	str	r2, [r6, #0]
 800947c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009480:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009484:	2301      	movs	r3, #1
 8009486:	e09d      	b.n	80095c4 <_printf_i+0x1e8>
 8009488:	6833      	ldr	r3, [r6, #0]
 800948a:	6820      	ldr	r0, [r4, #0]
 800948c:	1d19      	adds	r1, r3, #4
 800948e:	6031      	str	r1, [r6, #0]
 8009490:	0606      	lsls	r6, r0, #24
 8009492:	d501      	bpl.n	8009498 <_printf_i+0xbc>
 8009494:	681d      	ldr	r5, [r3, #0]
 8009496:	e003      	b.n	80094a0 <_printf_i+0xc4>
 8009498:	0645      	lsls	r5, r0, #25
 800949a:	d5fb      	bpl.n	8009494 <_printf_i+0xb8>
 800949c:	f9b3 5000 	ldrsh.w	r5, [r3]
 80094a0:	2d00      	cmp	r5, #0
 80094a2:	da03      	bge.n	80094ac <_printf_i+0xd0>
 80094a4:	232d      	movs	r3, #45	@ 0x2d
 80094a6:	426d      	negs	r5, r5
 80094a8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80094ac:	4859      	ldr	r0, [pc, #356]	@ (8009614 <_printf_i+0x238>)
 80094ae:	230a      	movs	r3, #10
 80094b0:	e011      	b.n	80094d6 <_printf_i+0xfa>
 80094b2:	6821      	ldr	r1, [r4, #0]
 80094b4:	6833      	ldr	r3, [r6, #0]
 80094b6:	0608      	lsls	r0, r1, #24
 80094b8:	f853 5b04 	ldr.w	r5, [r3], #4
 80094bc:	d402      	bmi.n	80094c4 <_printf_i+0xe8>
 80094be:	0649      	lsls	r1, r1, #25
 80094c0:	bf48      	it	mi
 80094c2:	b2ad      	uxthmi	r5, r5
 80094c4:	2f6f      	cmp	r7, #111	@ 0x6f
 80094c6:	4853      	ldr	r0, [pc, #332]	@ (8009614 <_printf_i+0x238>)
 80094c8:	6033      	str	r3, [r6, #0]
 80094ca:	bf14      	ite	ne
 80094cc:	230a      	movne	r3, #10
 80094ce:	2308      	moveq	r3, #8
 80094d0:	2100      	movs	r1, #0
 80094d2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80094d6:	6866      	ldr	r6, [r4, #4]
 80094d8:	60a6      	str	r6, [r4, #8]
 80094da:	2e00      	cmp	r6, #0
 80094dc:	bfa2      	ittt	ge
 80094de:	6821      	ldrge	r1, [r4, #0]
 80094e0:	f021 0104 	bicge.w	r1, r1, #4
 80094e4:	6021      	strge	r1, [r4, #0]
 80094e6:	b90d      	cbnz	r5, 80094ec <_printf_i+0x110>
 80094e8:	2e00      	cmp	r6, #0
 80094ea:	d04b      	beq.n	8009584 <_printf_i+0x1a8>
 80094ec:	4616      	mov	r6, r2
 80094ee:	fbb5 f1f3 	udiv	r1, r5, r3
 80094f2:	fb03 5711 	mls	r7, r3, r1, r5
 80094f6:	5dc7      	ldrb	r7, [r0, r7]
 80094f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094fc:	462f      	mov	r7, r5
 80094fe:	42bb      	cmp	r3, r7
 8009500:	460d      	mov	r5, r1
 8009502:	d9f4      	bls.n	80094ee <_printf_i+0x112>
 8009504:	2b08      	cmp	r3, #8
 8009506:	d10b      	bne.n	8009520 <_printf_i+0x144>
 8009508:	6823      	ldr	r3, [r4, #0]
 800950a:	07df      	lsls	r7, r3, #31
 800950c:	d508      	bpl.n	8009520 <_printf_i+0x144>
 800950e:	6923      	ldr	r3, [r4, #16]
 8009510:	6861      	ldr	r1, [r4, #4]
 8009512:	4299      	cmp	r1, r3
 8009514:	bfde      	ittt	le
 8009516:	2330      	movle	r3, #48	@ 0x30
 8009518:	f806 3c01 	strble.w	r3, [r6, #-1]
 800951c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009520:	1b92      	subs	r2, r2, r6
 8009522:	6122      	str	r2, [r4, #16]
 8009524:	f8cd a000 	str.w	sl, [sp]
 8009528:	464b      	mov	r3, r9
 800952a:	aa03      	add	r2, sp, #12
 800952c:	4621      	mov	r1, r4
 800952e:	4640      	mov	r0, r8
 8009530:	f7ff fee6 	bl	8009300 <_printf_common>
 8009534:	3001      	adds	r0, #1
 8009536:	d14a      	bne.n	80095ce <_printf_i+0x1f2>
 8009538:	f04f 30ff 	mov.w	r0, #4294967295
 800953c:	b004      	add	sp, #16
 800953e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009542:	6823      	ldr	r3, [r4, #0]
 8009544:	f043 0320 	orr.w	r3, r3, #32
 8009548:	6023      	str	r3, [r4, #0]
 800954a:	4833      	ldr	r0, [pc, #204]	@ (8009618 <_printf_i+0x23c>)
 800954c:	2778      	movs	r7, #120	@ 0x78
 800954e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009552:	6823      	ldr	r3, [r4, #0]
 8009554:	6831      	ldr	r1, [r6, #0]
 8009556:	061f      	lsls	r7, r3, #24
 8009558:	f851 5b04 	ldr.w	r5, [r1], #4
 800955c:	d402      	bmi.n	8009564 <_printf_i+0x188>
 800955e:	065f      	lsls	r7, r3, #25
 8009560:	bf48      	it	mi
 8009562:	b2ad      	uxthmi	r5, r5
 8009564:	6031      	str	r1, [r6, #0]
 8009566:	07d9      	lsls	r1, r3, #31
 8009568:	bf44      	itt	mi
 800956a:	f043 0320 	orrmi.w	r3, r3, #32
 800956e:	6023      	strmi	r3, [r4, #0]
 8009570:	b11d      	cbz	r5, 800957a <_printf_i+0x19e>
 8009572:	2310      	movs	r3, #16
 8009574:	e7ac      	b.n	80094d0 <_printf_i+0xf4>
 8009576:	4827      	ldr	r0, [pc, #156]	@ (8009614 <_printf_i+0x238>)
 8009578:	e7e9      	b.n	800954e <_printf_i+0x172>
 800957a:	6823      	ldr	r3, [r4, #0]
 800957c:	f023 0320 	bic.w	r3, r3, #32
 8009580:	6023      	str	r3, [r4, #0]
 8009582:	e7f6      	b.n	8009572 <_printf_i+0x196>
 8009584:	4616      	mov	r6, r2
 8009586:	e7bd      	b.n	8009504 <_printf_i+0x128>
 8009588:	6833      	ldr	r3, [r6, #0]
 800958a:	6825      	ldr	r5, [r4, #0]
 800958c:	6961      	ldr	r1, [r4, #20]
 800958e:	1d18      	adds	r0, r3, #4
 8009590:	6030      	str	r0, [r6, #0]
 8009592:	062e      	lsls	r6, r5, #24
 8009594:	681b      	ldr	r3, [r3, #0]
 8009596:	d501      	bpl.n	800959c <_printf_i+0x1c0>
 8009598:	6019      	str	r1, [r3, #0]
 800959a:	e002      	b.n	80095a2 <_printf_i+0x1c6>
 800959c:	0668      	lsls	r0, r5, #25
 800959e:	d5fb      	bpl.n	8009598 <_printf_i+0x1bc>
 80095a0:	8019      	strh	r1, [r3, #0]
 80095a2:	2300      	movs	r3, #0
 80095a4:	6123      	str	r3, [r4, #16]
 80095a6:	4616      	mov	r6, r2
 80095a8:	e7bc      	b.n	8009524 <_printf_i+0x148>
 80095aa:	6833      	ldr	r3, [r6, #0]
 80095ac:	1d1a      	adds	r2, r3, #4
 80095ae:	6032      	str	r2, [r6, #0]
 80095b0:	681e      	ldr	r6, [r3, #0]
 80095b2:	6862      	ldr	r2, [r4, #4]
 80095b4:	2100      	movs	r1, #0
 80095b6:	4630      	mov	r0, r6
 80095b8:	f7f6 fe1a 	bl	80001f0 <memchr>
 80095bc:	b108      	cbz	r0, 80095c2 <_printf_i+0x1e6>
 80095be:	1b80      	subs	r0, r0, r6
 80095c0:	6060      	str	r0, [r4, #4]
 80095c2:	6863      	ldr	r3, [r4, #4]
 80095c4:	6123      	str	r3, [r4, #16]
 80095c6:	2300      	movs	r3, #0
 80095c8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80095cc:	e7aa      	b.n	8009524 <_printf_i+0x148>
 80095ce:	6923      	ldr	r3, [r4, #16]
 80095d0:	4632      	mov	r2, r6
 80095d2:	4649      	mov	r1, r9
 80095d4:	4640      	mov	r0, r8
 80095d6:	47d0      	blx	sl
 80095d8:	3001      	adds	r0, #1
 80095da:	d0ad      	beq.n	8009538 <_printf_i+0x15c>
 80095dc:	6823      	ldr	r3, [r4, #0]
 80095de:	079b      	lsls	r3, r3, #30
 80095e0:	d413      	bmi.n	800960a <_printf_i+0x22e>
 80095e2:	68e0      	ldr	r0, [r4, #12]
 80095e4:	9b03      	ldr	r3, [sp, #12]
 80095e6:	4298      	cmp	r0, r3
 80095e8:	bfb8      	it	lt
 80095ea:	4618      	movlt	r0, r3
 80095ec:	e7a6      	b.n	800953c <_printf_i+0x160>
 80095ee:	2301      	movs	r3, #1
 80095f0:	4632      	mov	r2, r6
 80095f2:	4649      	mov	r1, r9
 80095f4:	4640      	mov	r0, r8
 80095f6:	47d0      	blx	sl
 80095f8:	3001      	adds	r0, #1
 80095fa:	d09d      	beq.n	8009538 <_printf_i+0x15c>
 80095fc:	3501      	adds	r5, #1
 80095fe:	68e3      	ldr	r3, [r4, #12]
 8009600:	9903      	ldr	r1, [sp, #12]
 8009602:	1a5b      	subs	r3, r3, r1
 8009604:	42ab      	cmp	r3, r5
 8009606:	dcf2      	bgt.n	80095ee <_printf_i+0x212>
 8009608:	e7eb      	b.n	80095e2 <_printf_i+0x206>
 800960a:	2500      	movs	r5, #0
 800960c:	f104 0619 	add.w	r6, r4, #25
 8009610:	e7f5      	b.n	80095fe <_printf_i+0x222>
 8009612:	bf00      	nop
 8009614:	08009be1 	.word	0x08009be1
 8009618:	08009bf2 	.word	0x08009bf2

0800961c <memmove>:
 800961c:	4288      	cmp	r0, r1
 800961e:	b510      	push	{r4, lr}
 8009620:	eb01 0402 	add.w	r4, r1, r2
 8009624:	d902      	bls.n	800962c <memmove+0x10>
 8009626:	4284      	cmp	r4, r0
 8009628:	4623      	mov	r3, r4
 800962a:	d807      	bhi.n	800963c <memmove+0x20>
 800962c:	1e43      	subs	r3, r0, #1
 800962e:	42a1      	cmp	r1, r4
 8009630:	d008      	beq.n	8009644 <memmove+0x28>
 8009632:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009636:	f803 2f01 	strb.w	r2, [r3, #1]!
 800963a:	e7f8      	b.n	800962e <memmove+0x12>
 800963c:	4402      	add	r2, r0
 800963e:	4601      	mov	r1, r0
 8009640:	428a      	cmp	r2, r1
 8009642:	d100      	bne.n	8009646 <memmove+0x2a>
 8009644:	bd10      	pop	{r4, pc}
 8009646:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800964a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800964e:	e7f7      	b.n	8009640 <memmove+0x24>

08009650 <_sbrk_r>:
 8009650:	b538      	push	{r3, r4, r5, lr}
 8009652:	4d06      	ldr	r5, [pc, #24]	@ (800966c <_sbrk_r+0x1c>)
 8009654:	2300      	movs	r3, #0
 8009656:	4604      	mov	r4, r0
 8009658:	4608      	mov	r0, r1
 800965a:	602b      	str	r3, [r5, #0]
 800965c:	f7f8 fa3e 	bl	8001adc <_sbrk>
 8009660:	1c43      	adds	r3, r0, #1
 8009662:	d102      	bne.n	800966a <_sbrk_r+0x1a>
 8009664:	682b      	ldr	r3, [r5, #0]
 8009666:	b103      	cbz	r3, 800966a <_sbrk_r+0x1a>
 8009668:	6023      	str	r3, [r4, #0]
 800966a:	bd38      	pop	{r3, r4, r5, pc}
 800966c:	20002648 	.word	0x20002648

08009670 <memcpy>:
 8009670:	440a      	add	r2, r1
 8009672:	4291      	cmp	r1, r2
 8009674:	f100 33ff 	add.w	r3, r0, #4294967295
 8009678:	d100      	bne.n	800967c <memcpy+0xc>
 800967a:	4770      	bx	lr
 800967c:	b510      	push	{r4, lr}
 800967e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009682:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009686:	4291      	cmp	r1, r2
 8009688:	d1f9      	bne.n	800967e <memcpy+0xe>
 800968a:	bd10      	pop	{r4, pc}

0800968c <_realloc_r>:
 800968c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009690:	4680      	mov	r8, r0
 8009692:	4615      	mov	r5, r2
 8009694:	460c      	mov	r4, r1
 8009696:	b921      	cbnz	r1, 80096a2 <_realloc_r+0x16>
 8009698:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800969c:	4611      	mov	r1, r2
 800969e:	f7ff bc4b 	b.w	8008f38 <_malloc_r>
 80096a2:	b92a      	cbnz	r2, 80096b0 <_realloc_r+0x24>
 80096a4:	f7ff fbdc 	bl	8008e60 <_free_r>
 80096a8:	2400      	movs	r4, #0
 80096aa:	4620      	mov	r0, r4
 80096ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096b0:	f000 f81a 	bl	80096e8 <_malloc_usable_size_r>
 80096b4:	4285      	cmp	r5, r0
 80096b6:	4606      	mov	r6, r0
 80096b8:	d802      	bhi.n	80096c0 <_realloc_r+0x34>
 80096ba:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80096be:	d8f4      	bhi.n	80096aa <_realloc_r+0x1e>
 80096c0:	4629      	mov	r1, r5
 80096c2:	4640      	mov	r0, r8
 80096c4:	f7ff fc38 	bl	8008f38 <_malloc_r>
 80096c8:	4607      	mov	r7, r0
 80096ca:	2800      	cmp	r0, #0
 80096cc:	d0ec      	beq.n	80096a8 <_realloc_r+0x1c>
 80096ce:	42b5      	cmp	r5, r6
 80096d0:	462a      	mov	r2, r5
 80096d2:	4621      	mov	r1, r4
 80096d4:	bf28      	it	cs
 80096d6:	4632      	movcs	r2, r6
 80096d8:	f7ff ffca 	bl	8009670 <memcpy>
 80096dc:	4621      	mov	r1, r4
 80096de:	4640      	mov	r0, r8
 80096e0:	f7ff fbbe 	bl	8008e60 <_free_r>
 80096e4:	463c      	mov	r4, r7
 80096e6:	e7e0      	b.n	80096aa <_realloc_r+0x1e>

080096e8 <_malloc_usable_size_r>:
 80096e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80096ec:	1f18      	subs	r0, r3, #4
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	bfbc      	itt	lt
 80096f2:	580b      	ldrlt	r3, [r1, r0]
 80096f4:	18c0      	addlt	r0, r0, r3
 80096f6:	4770      	bx	lr

080096f8 <_init>:
 80096f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80096fa:	bf00      	nop
 80096fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80096fe:	bc08      	pop	{r3}
 8009700:	469e      	mov	lr, r3
 8009702:	4770      	bx	lr

08009704 <_fini>:
 8009704:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009706:	bf00      	nop
 8009708:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800970a:	bc08      	pop	{r3}
 800970c:	469e      	mov	lr, r3
 800970e:	4770      	bx	lr
